var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.2.0","fields":["title","body"],"fieldVectors":[["title/interfaces/BoundingRectangle.html",[0,0.15,1,0.736]],["body/interfaces/BoundingRectangle.html",[0,0.249,1,1.226,2,0.877,3,0.742,4,0.619,5,4.489,6,3.752,7,1.832,8,2.5,9,1.189,10,0.505,11,0.742,12,0.74,13,1.422,14,1.359,15,2.224,16,1.822,17,1.359,18,1.163,19,2.103,20,2.103,21,1.577,22,1.822,23,2.991,24,1.226,25,1.281,26,0.057,27,2.547,28,1.189,29,3.752,30,1.041,31,0.619,32,0.047,33,0.047]],["title/interfaces/Coordinate.html",[0,0.15,34,1.139]],["body/interfaces/Coordinate.html",[0,0.162,1,1.137,2,0.35,3,0.296,4,0.247,9,1.051,10,0.657,11,0.759,12,0.247,13,0.748,14,0.906,16,1.215,17,1.048,18,0.775,19,0.997,20,0.997,21,1.216,22,1.215,24,1.17,25,1.155,26,0.058,28,0.474,30,0.467,31,0.389,32,0.025,33,0.025,34,1.759,35,0.548,36,1.874,37,1.874,38,0.896,39,0.467,40,1.402,41,1.235,42,1.153,43,1.402,44,1.759,45,1.62,46,0.997,47,1.402,48,0.409,49,1.402,50,2.016,51,0.997,52,0.731,53,0.632,54,1.62,55,0.731,56,0.731,57,0.731,58,0.731,59,0.731,60,0.632,61,0.632,62,0.731,63,0.983,64,0.632,65,0.731,66,0.632,67,1.216,68,0.731,69,0.731,70,0.632,71,1.843,72,1.863,73,1.006,74,1.215,75,1.526,76,1.322,77,0.632,78,0.632,79,0.997,80,0.548,81,0.997,82,1.322,83,2.449,84,1.153,85,0.731,86,2.438,87,0.731,88,0.731,89,0.474,90,0.632,91,0.731,92,1.764,93,1.153,94,1.153,95,1.235,96,1.764,97,0.632,98,0.864,99,1.427,100,1.153,101,1.153,102,1.153,103,1.153,104,0.731,105,0.731,106,0.731,107,0.731,108,0.731,109,0.731,110,0.731,111,0.731,112,0.731,113,0.731,114,0.632,115,1.153,116,0.731,117,0.731,118,0.731,119,0.731,120,0.731,121,1.962,122,0.731,123,0.731,124,1.235,125,0.864,126,0.997,127,1.402,128,0.997,129,0.997,130,0.997,131,0.997,132,0.864,133,0.632,134,0.632,135,0.632,136,0.632,137,0.474,138,0.632,139,0.474,140,0.474,141,0.467,142,0.409,143,0.548,144,1.402,145,0.632,146,0.632,147,1.81,148,0.864,149,0.731,150,1.427,151,0.632,152,0.731,153,0.632,154,1.051,155,0.474,156,0.864,157,1.235,158,0.632,159,0.632,160,0.632,161,0.731,162,0.997,163,0.997,164,0.548,165,0.632,166,0.632,167,0.731,168,0.731,169,0.731,170,0.997,171,0.632,172,1.526,173,1.638,174,1.357,175,1.235,176,0.632,177,0.731,178,0.731,179,0.997,180,1.235,181,0.731,182,0.731,183,1.853,184,0.474,185,0.731,186,0.632,187,1.697,188,2.033,189,0.997,190,0.997,191,1.215,192,1.621,193,1.621,194,0.731,195,0.632,196,1.402,197,1.427,198,1.322,199,0.731,200,0.731,201,0.731,202,1.606,203,0.731,204,0.409,205,0.731,206,0.731,207,0.731,208,0.731,209,0.731,210,0.731,211,0.731,212,0.731,213,0.731,214,0.731,215,0.731,216,2.185,217,1.405,218,1.153,219,0.731,220,0.731,221,1.153,222,1.427,223,2.33,224,0.731,225,1.427,226,1.153,227,0.731,228,0.731,229,0.731,230,0.731,231,0.632,232,0.731,233,0.731,234,0.731,235,0.997,236,1.962,237,1.153,238,0.997,239,0.997,240,1.153,241,1.153,242,1.153,243,0.632,244,0.731,245,1.153,246,0.731,247,0.731,248,1.62,249,0.731,250,0.731,251,0.731,252,0.731,253,0.997,254,1.427,255,2.092,256,0.731,257,0.731,258,0.731,259,0.731,260,0.731,261,0.731,262,1.427,263,1.962,264,1.153,265,0.731,266,1.764,267,1.153,268,0.731,269,1.153,270,0.731,271,1.764,272,1.153,273,0.731,274,1.153,275,1.153,276,0.731,277,0.731,278,0.731,279,0.731,280,0.731,281,1.427,282,1.62,283,0.731,284,0.731,285,0.731,286,0.731,287,0.731,288,0.731,289,0.731,290,0.731,291,0.731,292,0.731,293,0.731,294,0.731,295,0.731,296,0.731,297,0.632,298,1.62,299,1.62,300,1.153,301,1.153,302,1.153,303,1.153,304,1.764,305,1.402,306,1.62,307,1.62,308,0.731,309,2.185,310,0.731,311,0.731,312,0.731,313,0.731,314,1.427,315,0.731,316,1.427,317,0.731,318,0.731,319,0.731,320,0.632,321,1.153,322,0.731,323,0.731,324,0.731,325,0.731,326,0.731,327,0.731,328,0.731,329,0.731,330,0.731,331,0.731,332,0.731,333,1.153,334,0.731,335,0.731,336,0.632,337,0.731,338,0.731,339,0.731,340,0.632,341,0.731,342,0.731,343,0.731,344,0.731,345,0.731,346,0.731,347,0.731,348,1.07,349,0.864,350,0.731,351,0.731,352,0.731,353,0.731,354,0.731,355,1.153,356,0.632,357,0.731,358,0.731,359,0.731,360,1.427,361,0.632,362,0.731,363,1.427,364,1.427,365,1.427,366,1.962,367,1.273,368,1.962,369,1.235,370,1.235,371,0.632,372,0.632,373,0.632,374,1.427,375,0.731,376,1.427,377,1.427,378,0.632,379,0.731,380,0.731,381,0.731,382,1.427,383,1.427,384,1.427,385,0.632,386,0.997,387,0.997,388,0.731]],["title/interfaces/Edges.html",[0,0.15,63,0.533]],["body/interfaces/Edges.html",[0,0.251,2,0.886,3,0.75,4,0.625,7,1.852,10,0.51,12,0.745,13,1.431,14,1.364,15,2.228,17,1.364,18,1.167,21,1.583,23,3.01,24,1.233,25,1.262,26,0.058,27,2.563,28,1.202,30,0.988,31,0.625,32,0.047,33,0.047,63,0.954,73,0.75,82,1.978,389,3.792,390,2.527,391,3.792]],["title/interfaces/PointerEventCoordinate.html",[0,0.15,70,1.139]],["body/interfaces/PointerEventCoordinate.html",[0,0.162,1,1.135,2,0.348,3,0.295,4,0.246,9,1.049,10,0.657,11,0.757,12,0.246,13,0.745,14,0.904,16,1.212,17,1.046,18,0.773,19,0.994,20,0.994,21,1.214,22,1.212,24,1.168,25,1.154,26,0.058,28,0.472,30,0.576,31,0.388,32,0.025,33,0.025,34,1.694,35,0.545,36,1.423,37,1.423,38,0.895,39,0.465,40,1.398,41,1.231,42,1.148,43,1.398,44,1.756,45,1.616,46,0.994,47,1.398,48,0.407,49,1.398,50,2.014,51,0.994,52,0.727,53,0.629,54,1.616,55,0.727,56,0.727,57,0.727,58,0.727,59,0.727,60,0.629,61,0.629,62,0.727,63,0.982,64,0.629,65,0.727,66,0.629,67,1.214,68,0.727,69,0.727,70,0.994,71,1.862,72,1.878,73,1.015,74,1.402,75,1.694,76,1.319,77,0.629,78,0.629,79,0.994,80,0.545,81,0.994,82,1.319,83,2.447,84,1.148,85,0.727,86,2.436,87,0.727,88,0.727,89,0.472,90,0.629,91,0.727,92,1.76,93,1.148,94,1.148,95,1.231,96,1.76,97,0.629,98,0.861,99,1.423,100,1.148,101,1.148,102,1.148,103,1.148,104,0.727,105,0.727,106,0.727,107,0.727,108,0.727,109,0.727,110,0.727,111,0.727,112,0.727,113,0.727,114,0.629,115,1.148,116,0.727,117,0.727,118,0.727,119,0.727,120,0.727,121,1.958,122,0.727,123,0.727,124,1.231,125,0.861,126,0.994,127,1.398,128,0.994,129,0.994,130,0.994,131,0.994,132,0.861,133,0.629,134,0.629,135,0.629,136,0.629,137,0.472,138,0.629,139,0.472,140,0.472,141,0.465,142,0.407,143,0.545,144,1.398,145,0.629,146,0.629,147,1.808,148,0.861,149,0.727,150,1.423,151,0.629,152,0.727,153,0.629,154,1.049,155,0.472,156,0.861,157,1.231,158,0.629,159,0.629,160,0.629,161,0.727,162,0.994,163,0.994,164,0.545,165,0.629,166,0.629,167,0.727,168,0.727,169,0.727,170,0.994,171,0.629,172,1.523,173,1.636,174,1.355,175,1.231,176,0.629,177,0.727,178,0.727,179,0.994,180,1.231,181,0.727,182,0.727,183,1.851,184,0.472,185,0.727,186,0.629,187,1.694,188,2.03,189,0.994,190,0.994,191,1.212,192,1.618,193,1.618,194,0.727,195,0.629,196,1.398,197,1.423,198,1.319,199,0.727,200,0.727,201,0.727,202,1.604,203,0.727,204,0.407,205,0.727,206,0.727,207,0.727,208,0.727,209,0.727,210,0.727,211,0.727,212,0.727,213,0.727,214,0.727,215,0.727,216,2.182,217,1.402,218,1.148,219,0.727,220,0.727,221,1.148,222,1.423,223,2.327,224,0.727,225,1.423,226,1.148,227,0.727,228,0.727,229,0.727,230,0.727,231,0.629,232,0.727,233,0.727,234,0.727,235,0.994,236,1.958,237,1.148,238,0.994,239,0.994,240,1.148,241,1.148,242,1.148,243,0.629,244,0.727,245,1.148,246,0.727,247,0.727,248,1.616,249,0.727,250,0.727,251,0.727,252,0.727,253,0.994,254,1.423,255,2.089,256,0.727,257,0.727,258,0.727,259,0.727,260,0.727,261,0.727,262,1.423,263,1.958,264,1.148,265,0.727,266,1.76,267,1.148,268,0.727,269,1.148,270,0.727,271,1.76,272,1.148,273,0.727,274,1.148,275,1.148,276,0.727,277,0.727,278,0.727,279,0.727,280,0.727,281,1.423,282,1.616,283,0.727,284,0.727,285,0.727,286,0.727,287,0.727,288,0.727,289,0.727,290,0.727,291,0.727,292,0.727,293,0.727,294,0.727,295,0.727,296,0.727,297,0.629,298,1.616,299,1.616,300,1.148,301,1.148,302,1.148,303,1.148,304,1.76,305,1.398,306,1.616,307,1.616,308,0.727,309,2.182,310,0.727,311,0.727,312,0.727,313,0.727,314,1.423,315,0.727,316,1.423,317,0.727,318,0.727,319,0.727,320,0.629,321,1.148,322,0.727,323,0.727,324,0.727,325,0.727,326,0.727,327,0.727,328,0.727,329,0.727,330,0.727,331,0.727,332,0.727,333,1.148,334,0.727,335,0.727,336,0.629,337,0.727,338,0.727,339,0.727,340,0.629,341,0.727,342,0.727,343,0.727,344,0.727,345,0.727,346,0.727,347,0.727,348,1.067,349,0.861,350,0.727,351,0.727,352,0.727,353,0.727,354,0.727,355,1.148,356,0.629,357,0.727,358,0.727,359,0.727,360,1.423,361,0.629,362,0.727,363,1.423,364,1.423,365,1.423,366,1.958,367,1.271,368,1.958,369,1.231,370,1.231,371,0.629,372,0.629,373,0.629,374,1.423,375,0.727,376,1.423,377,1.423,378,0.629,379,0.727,380,0.727,381,0.727,382,1.423,383,1.423,384,1.423,385,0.629,386,0.994,387,0.994,388,0.727]],["title/classes/PointerEventListeners.html",[141,0.533,193,1.139]],["body/classes/PointerEventListeners.html",[0,0.129,1,1.127,2,0.341,3,0.289,4,0.241,9,1.037,10,0.655,11,0.751,12,0.241,13,0.734,14,0.894,15,0.978,16,1.199,17,1.037,18,0.765,19,0.978,20,0.978,21,1.203,22,1.199,24,1.161,25,1.119,26,0.058,28,1.203,30,0.706,31,0.382,32,0.024,33,0.024,34,1.681,35,0.535,36,1.405,37,1.405,38,0.887,39,0.458,40,1.744,41,1.215,42,1.13,43,1.383,44,1.744,45,1.598,46,0.978,47,1.744,48,0.399,49,1.383,50,2.091,51,0.978,52,0.713,53,0.617,54,1.598,55,0.713,56,0.713,57,0.713,58,0.713,59,0.713,60,0.617,61,0.617,62,0.713,63,0.979,64,0.617,65,0.713,66,0.617,67,1.203,68,0.713,69,0.713,70,0.617,71,1.837,72,1.858,73,1.003,74,1.199,75,1.508,76,1.307,77,0.617,78,0.617,79,0.978,80,0.535,81,0.978,82,1.307,83,2.44,84,1.13,85,0.713,86,2.44,87,0.713,88,0.713,89,0.463,90,0.617,91,0.713,92,1.743,93,1.13,94,1.13,95,1.215,96,1.743,97,0.617,98,0.848,99,1.405,100,1.13,101,1.13,102,1.13,103,1.13,104,0.713,105,0.713,106,0.713,107,0.713,108,0.713,109,0.713,110,0.713,111,0.713,112,0.713,113,0.713,114,0.617,115,1.13,116,0.713,117,0.713,118,0.713,119,0.713,120,0.713,121,1.943,122,0.713,123,0.713,124,1.215,125,0.848,126,0.978,127,1.383,128,0.978,129,0.978,130,0.978,131,0.978,132,0.848,133,0.617,134,0.617,135,0.617,136,0.617,137,0.463,138,0.617,139,0.463,140,0.463,141,0.569,142,0.399,143,0.535,144,1.383,145,0.617,146,0.617,147,1.796,148,0.848,149,0.713,150,1.405,151,0.617,152,0.713,153,0.617,154,1.037,155,0.463,156,0.848,157,1.215,158,0.617,159,0.617,160,0.617,161,0.713,162,0.978,163,0.978,164,0.535,165,0.617,166,0.617,167,0.713,168,0.713,169,0.713,170,0.978,171,0.617,172,1.508,173,1.627,174,1.347,175,1.215,176,0.617,177,0.713,178,0.713,179,0.978,180,1.215,181,0.713,182,0.713,183,1.84,184,0.463,185,0.713,186,0.617,187,1.681,188,2.269,189,0.978,190,0.978,191,1.199,192,1.604,193,1.744,194,0.713,195,0.978,196,1.604,197,1.405,198,1.556,199,0.713,200,0.713,201,0.713,202,1.595,203,0.713,204,0.399,205,0.713,206,0.713,207,0.713,208,0.713,209,0.713,210,0.713,211,0.713,212,0.713,213,0.713,214,0.713,215,0.713,216,2.17,217,1.39,218,1.13,219,0.713,220,0.713,221,1.13,222,1.405,223,2.318,224,0.713,225,1.405,226,1.13,227,0.713,228,0.713,229,0.713,230,0.713,231,0.617,232,0.713,233,0.713,234,0.713,235,0.978,236,1.943,237,1.13,238,0.978,239,0.978,240,1.13,241,1.13,242,1.13,243,0.617,244,0.713,245,1.13,246,0.713,247,0.713,248,1.598,249,0.713,250,0.713,251,0.713,252,0.713,253,0.978,254,1.405,255,2.076,256,0.713,257,0.713,258,0.713,259,0.713,260,0.713,261,0.713,262,1.405,263,1.943,264,1.13,265,0.713,266,1.743,267,1.13,268,0.713,269,1.13,270,0.713,271,1.743,272,1.13,273,0.713,274,1.13,275,1.13,276,0.713,277,0.713,278,0.713,279,0.713,280,0.713,281,1.405,282,1.598,283,0.713,284,0.713,285,0.713,286,0.713,287,0.713,288,0.713,289,0.713,290,0.713,291,0.713,292,0.713,293,0.713,294,0.713,295,0.713,296,0.713,297,0.617,298,1.598,299,1.598,300,1.13,301,1.13,302,1.13,303,1.13,304,1.743,305,1.383,306,1.598,307,1.598,308,0.713,309,2.17,310,0.713,311,0.713,312,0.713,313,0.713,314,1.405,315,0.713,316,1.405,317,0.713,318,0.713,319,0.713,320,0.617,321,1.13,322,0.713,323,0.713,324,0.713,325,0.713,326,0.713,327,0.713,328,0.713,329,0.713,330,0.713,331,0.713,332,0.713,333,1.13,334,0.713,335,0.713,336,0.617,337,0.713,338,0.713,339,0.713,340,0.617,341,0.713,342,0.713,343,0.713,344,0.713,345,0.713,346,0.713,347,0.713,348,1.307,349,0.848,350,0.713,351,0.713,352,1.598,353,1.598,354,1.598,355,1.598,356,0.617,357,0.713,358,0.713,359,1.405,360,1.405,361,0.978,362,0.713,363,1.405,364,1.405,365,1.405,366,1.943,367,1.261,368,1.943,369,1.215,370,1.215,371,0.617,372,0.617,373,0.617,374,1.405,375,0.713,376,1.405,377,1.405,378,0.617,379,0.713,380,0.713,381,0.713,382,1.405,383,1.405,384,1.405,385,0.617,386,0.978,387,0.978,388,0.713,392,2.315,393,1.46,394,1.543,395,1.46,396,1.46,397,1.46,398,1.46,399,1.46]],["title/directives/ResizableDirective.html",[39,0.533,142,0.736]],["body/directives/ResizableDirective.html",[0,0.124,1,1.108,2,0.325,3,0.275,4,0.23,7,0.68,9,1.01,10,0.689,11,0.867,12,0.23,14,0.952,16,1.167,17,1.066,18,0.814,19,0.942,20,0.942,21,1.237,22,1.167,24,1.143,25,1.118,26,0.058,28,1.415,30,0.849,31,0.368,32,0.023,33,0.023,34,1.65,35,0.51,36,1.361,37,1.361,38,0.869,39,0.551,40,1.346,41,1.178,42,1.361,43,1.571,44,1.814,45,1.907,46,1.178,47,1.346,48,0.38,49,1.346,50,1.986,51,0.942,52,0.68,53,0.588,54,1.556,55,0.68,56,0.68,57,0.68,58,0.68,59,0.68,60,0.588,61,0.588,62,0.68,63,0.994,64,0.588,65,0.68,66,0.588,67,1.326,68,0.68,69,0.68,70,0.588,71,1.825,72,1.846,73,1.029,74,1.167,75,1.473,76,1.43,77,0.588,78,0.588,79,0.942,80,0.51,81,1.178,82,1.362,83,2.423,84,1.089,85,0.68,86,2.423,87,0.68,88,0.68,89,1.237,90,0.588,91,0.68,92,1.702,93,1.089,94,1.089,95,1.178,96,1.702,97,0.588,98,1.167,99,1.702,100,1.089,101,1.089,102,1.089,103,1.089,104,0.68,105,0.68,106,0.68,107,0.68,108,0.68,109,0.68,110,0.68,111,0.68,112,0.68,113,0.68,114,0.588,115,1.089,116,0.68,117,0.68,118,0.68,119,0.68,120,0.68,121,1.907,122,0.68,123,0.68,124,1.178,125,1.021,126,0.942,127,1.346,128,0.942,129,0.942,130,0.942,131,0.942,132,1.021,133,0.588,134,0.588,135,0.942,136,0.942,137,0.706,138,0.588,139,0.706,140,0.706,141,0.441,142,0.609,143,0.816,144,1.715,145,0.942,146,0.942,147,1.887,148,1.167,149,1.089,150,1.816,151,0.942,152,1.361,153,0.942,154,1.286,155,1.286,156,1.167,157,1.571,158,0.942,159,0.942,160,0.942,161,1.089,162,1.473,163,1.473,164,1.021,165,0.942,166,0.942,167,1.089,168,1.089,169,1.089,170,1.346,171,1.178,172,1.814,173,1.66,174,1.415,175,1.346,176,0.942,177,1.089,178,1.361,179,1.178,180,1.571,181,1.089,182,1.089,183,1.814,184,0.706,185,1.089,186,0.942,187,1.65,188,1.982,189,0.942,190,0.942,191,1.167,192,1.571,193,1.571,194,0.68,195,0.588,196,1.346,197,1.361,198,1.276,199,0.68,200,0.68,201,0.68,202,1.572,203,0.68,204,0.38,205,0.68,206,0.68,207,0.68,208,0.68,209,0.68,210,0.68,211,0.68,212,0.68,213,0.68,214,0.68,215,0.68,216,2.141,217,1.362,218,1.089,219,0.68,220,0.68,221,1.089,222,1.361,223,2.295,224,0.68,225,1.361,226,1.089,227,0.68,228,0.68,229,0.68,230,0.68,231,0.588,232,0.68,233,0.68,234,0.68,235,0.942,236,1.907,237,1.089,238,0.942,239,0.942,240,1.089,241,1.089,242,1.089,243,0.588,244,0.68,245,1.089,246,0.68,247,0.68,248,1.556,249,0.68,250,0.68,251,0.68,252,0.68,253,0.942,254,1.361,255,2.044,256,0.68,257,0.68,258,0.68,259,0.68,260,0.68,261,0.68,262,1.361,263,1.907,264,1.089,265,0.68,266,1.702,267,1.089,268,0.68,269,1.089,270,0.68,271,1.702,272,1.089,273,0.68,274,1.089,275,1.089,276,0.68,277,0.68,278,0.68,279,0.68,280,0.68,281,1.361,282,1.556,283,0.68,284,0.68,285,0.68,286,0.68,287,0.68,288,0.68,289,0.68,290,0.68,291,0.68,292,0.68,293,0.68,294,0.68,295,0.68,296,0.68,297,0.588,298,1.556,299,1.556,300,1.089,301,1.089,302,1.089,303,1.089,304,1.702,305,1.346,306,1.556,307,1.556,308,0.68,309,2.141,310,0.68,311,0.68,312,0.68,313,0.68,314,1.361,315,0.68,316,1.361,317,0.68,318,0.68,319,0.68,320,0.588,321,1.089,322,0.68,323,0.68,324,0.68,325,0.68,326,0.68,327,0.68,328,0.68,329,0.68,330,0.68,331,0.68,332,0.68,333,1.089,334,0.68,335,0.68,336,0.588,337,0.68,338,0.68,339,0.68,340,0.588,341,0.68,342,0.68,343,0.68,344,0.68,345,0.68,346,0.68,347,0.68,348,1.021,349,0.816,350,0.68,351,0.68,352,0.68,353,0.68,354,0.68,355,1.089,356,0.588,357,0.68,358,0.68,359,0.68,360,1.361,361,0.588,362,0.68,363,1.361,364,1.361,365,1.361,366,1.907,367,1.237,368,1.907,369,1.178,370,1.178,371,0.588,372,0.588,373,0.588,374,1.361,375,0.68,376,1.361,377,1.361,378,0.588,379,0.68,380,0.68,381,0.68,382,1.361,383,1.361,384,1.361,385,0.588,386,0.942,387,0.942,388,0.68,400,1.113,401,1.393,402,1.393,403,1.393,404,1.393,405,1.393,406,1.393,407,1.393,408,1.393,409,1.393,410,1.393]],["title/modules/ResizableModule.html",[411,1.139,412,1.317]],["body/modules/ResizableModule.html",[2,0.951,3,0.805,4,0.671,10,0.548,26,0.057,31,0.819,32,0.049,33,0.049,38,1.161,48,1.111,141,0.805,142,1.419,411,1.72,412,2.299,413,4.07,414,3.762,415,2.949,416,3.762,417,3.251,418,4.07]],["title/interfaces/ResizeCursors.html",[0,0.15,174,0.854]],["body/interfaces/ResizeCursors.html",[0,0.161,1,1.132,2,0.346,3,0.293,4,0.244,9,1.045,10,0.656,11,0.755,12,0.244,13,0.741,14,0.9,16,1.207,17,1.043,18,0.77,19,0.988,20,0.988,21,1.21,22,1.207,24,1.347,25,1.122,26,0.058,28,0.469,30,0.755,31,0.386,32,0.025,33,0.025,34,1.69,35,0.542,36,1.416,37,1.416,38,0.892,39,0.463,40,1.393,41,1.226,42,1.142,43,1.393,44,1.752,45,1.61,46,0.988,47,1.393,48,0.404,49,1.393,50,2.011,51,0.988,52,0.722,53,0.625,54,1.61,55,0.722,56,0.722,57,0.722,58,0.722,59,0.722,60,0.625,61,0.625,62,0.722,63,0.981,64,0.625,65,0.722,66,0.625,67,1.21,68,0.722,69,0.722,70,0.625,71,1.841,72,1.861,73,1.005,74,1.207,75,1.517,76,1.315,77,0.625,78,0.625,79,0.988,80,0.542,81,0.988,82,1.315,83,2.445,84,1.142,85,0.722,86,2.434,87,0.722,88,0.722,89,0.469,90,0.625,91,0.722,92,1.754,93,1.142,94,1.142,95,1.226,96,1.754,97,0.625,98,0.856,99,1.416,100,1.142,101,1.142,102,1.142,103,1.142,104,0.722,105,0.722,106,0.722,107,0.722,108,0.722,109,0.722,110,0.722,111,0.722,112,0.722,113,0.722,114,0.625,115,1.142,116,0.722,117,0.722,118,0.722,119,0.722,120,0.722,121,1.953,122,0.722,123,0.722,124,1.226,125,0.856,126,0.988,127,1.393,128,0.988,129,0.988,130,0.988,131,0.988,132,0.856,133,0.625,134,0.625,135,0.625,136,0.625,137,0.469,138,0.625,139,0.469,140,0.469,141,0.463,142,0.404,143,0.542,144,1.393,145,0.625,146,0.625,147,1.803,148,0.856,149,0.722,150,1.416,151,0.625,152,0.722,153,0.625,154,1.045,155,0.469,156,0.856,157,1.226,158,0.625,159,0.625,160,0.625,161,0.722,162,0.988,163,0.988,164,0.542,165,0.625,166,0.625,167,0.722,168,0.722,169,0.722,170,0.988,171,0.625,172,1.517,173,1.633,174,1.385,175,1.226,176,0.625,177,0.722,178,0.722,179,0.988,180,1.226,181,0.722,182,0.722,183,1.847,184,0.469,185,0.722,186,0.625,187,1.69,188,2.025,189,0.988,190,0.988,191,1.207,192,1.613,193,1.613,194,0.722,195,0.625,196,1.393,197,1.416,198,1.315,199,0.722,200,0.722,201,0.722,202,1.601,203,0.722,204,0.404,205,0.722,206,0.722,207,0.722,208,0.722,209,0.722,210,0.722,211,0.722,212,0.722,213,0.722,214,0.722,215,0.722,216,2.178,217,1.398,218,1.142,219,0.722,220,0.722,221,1.142,222,1.416,223,2.324,224,0.722,225,1.416,226,1.142,227,0.722,228,0.722,229,0.722,230,0.722,231,0.625,232,0.722,233,0.722,234,0.722,235,0.988,236,1.953,237,1.142,238,0.988,239,0.988,240,1.142,241,1.142,242,1.142,243,0.625,244,0.722,245,1.142,246,0.722,247,0.722,248,1.61,249,0.722,250,0.722,251,0.722,252,0.722,253,0.988,254,1.416,255,2.084,256,0.722,257,0.722,258,0.722,259,0.722,260,0.722,261,0.722,262,1.416,263,1.953,264,1.142,265,0.722,266,1.754,267,1.142,268,0.722,269,1.142,270,0.722,271,1.754,272,1.142,273,0.722,274,1.142,275,1.142,276,0.722,277,0.722,278,0.722,279,0.722,280,0.722,281,1.416,282,1.61,283,0.722,284,0.722,285,0.722,286,0.722,287,0.722,288,0.722,289,0.722,290,0.722,291,0.722,292,0.722,293,0.722,294,0.722,295,0.722,296,0.722,297,0.625,298,1.61,299,1.61,300,1.142,301,1.142,302,1.142,303,1.142,304,1.754,305,1.393,306,1.61,307,1.61,308,0.722,309,2.178,310,0.722,311,0.722,312,0.722,313,0.722,314,1.416,315,0.722,316,1.416,317,0.722,318,0.722,319,0.722,320,0.625,321,1.142,322,0.722,323,0.722,324,0.722,325,0.722,326,0.722,327,0.722,328,0.722,329,0.722,330,0.722,331,0.722,332,0.722,333,1.142,334,0.722,335,0.722,336,0.625,337,0.722,338,0.722,339,0.722,340,0.625,341,0.722,342,0.722,343,0.722,344,0.722,345,0.722,346,0.722,347,0.722,348,1.062,349,0.856,350,0.722,351,0.722,352,0.722,353,0.722,354,0.722,355,1.142,356,0.625,357,0.722,358,0.722,359,0.722,360,1.416,361,0.625,362,0.722,363,1.416,364,1.416,365,1.416,366,1.953,367,1.267,368,1.953,369,1.226,370,1.226,371,0.625,372,0.625,373,0.625,374,1.416,375,0.722,376,1.416,377,1.416,378,0.625,379,0.722,380,0.722,381,0.722,382,1.416,383,1.416,384,1.416,385,0.625,386,0.988,387,0.988,388,0.722,419,2.317,420,2.317,421,2.317,422,2.317,423,2.317,424,2.317]],["title/interfaces/ResizeEvent.html",[0,0.15,67,0.854]],["body/interfaces/ResizeEvent.html",[0,0.259,1,1.386,2,0.932,3,0.789,4,0.658,7,1.947,8,2.657,9,1.609,10,0.626,12,0.658,13,1.474,26,0.057,30,0.92,31,0.658,32,0.049,33,0.049,38,1.087,63,1.052,66,1.685,67,1.474,73,1.004,153,1.966,154,1.474,425,3.988,426,3.988,427,3.988]],["title/directives/ResizeHandleDirective.html",[39,0.533,415,1.53]],["body/directives/ResizeHandleDirective.html",[2,0.695,3,0.588,4,0.49,7,1.452,10,0.668,11,0.981,12,0.49,15,1.256,23,1.981,24,0.812,25,1.199,26,0.058,27,1.687,28,1.451,30,0.768,31,0.49,32,0.041,33,0.041,38,1.009,39,0.94,40,1.935,41,1.935,44,1.935,46,1.825,47,1.935,48,0.812,63,1.015,64,1.256,71,1.784,72,1.843,73,0.964,74,1.677,75,1.935,89,0.942,135,1.64,137,1.23,138,1.256,139,1.23,140,1.23,141,0.588,142,1.25,143,1.421,154,1.23,155,0.942,156,1.582,184,1.451,187,1.64,191,1.421,192,2.097,195,1.64,196,1.64,198,1.582,202,1.843,204,1.06,231,1.256,238,1.825,340,1.256,348,1.089,361,1.256,369,1.64,370,1.64,371,1.64,372,1.64,373,1.64,378,1.64,385,1.64,386,1.825,387,1.825,390,2.586,394,1.981,400,2.376,415,2.202,417,2.376,428,4.751,429,2.974,430,3.1,431,3.659,432,3.1,433,4.321,434,2.974,435,3.1,436,3.881,437,2.974,438,3.881,439,2.974,440,2.974,441,2.974,442,2.974,443,2.974,444,3.881,445,2.974,446,2.974,447,2.974,448,3.881,449,3.881,450,3.881,451,3.881,452,3.881,453,3.881,454,2.974,455,2.974,456,3.881,457,3.881,458,2.974,459,2.974,460,2.974,461,2.974,462,2.974,463,2.974,464,2.974,465,2.974,466,2.974,467,2.974,468,2.974,469,2.974,470,2.974,471,2.974,472,2.974]],["title/changelog.html",[473,1.515,474,1.11,475,2.273]],["body/changelog.html",[0,0.107,1,0.782,4,0.472,8,1.909,9,1.084,10,0.725,11,1.013,13,0.61,14,0.526,16,1.049,17,0.526,18,0.45,22,1.049,25,0.45,26,0.03,30,0.749,31,0.625,32,0.03,33,0.03,38,0.885,39,0.869,43,1.856,50,1.445,53,1.907,60,0.814,61,0.814,63,0.8,73,0.987,74,0.705,80,0.705,81,0.814,82,0.705,89,0.908,90,1.21,98,0.705,125,0.705,132,1.387,136,1.21,137,0.61,139,0.908,140,0.61,141,0.567,142,0.526,143,0.705,144,0.814,145,0.814,146,0.814,147,1.6,148,1.719,151,1.21,154,0.61,155,1.282,156,1.049,157,1.445,158,0.814,159,0.814,160,0.814,162,0.814,163,0.814,164,0.705,165,0.814,166,0.814,170,1.6,171,0.814,172,1.792,173,1.766,174,0.61,176,0.814,179,1.21,180,2.215,183,0.814,184,1.392,189,0.814,190,1.21,191,0.705,198,1.049,204,1.3,217,0.705,239,0.814,253,1.445,349,1.553,356,0.814,367,0.61,390,1.284,412,0.941,415,1.093,430,1.539,431,3.233,432,1.539,435,1.539,474,1.67,476,5.024,477,1.926,478,1.926,479,1.926,480,2.288,481,1.926,482,2.865,483,1.926,484,1.926,485,1.926,486,2.865,487,4.514,488,2.865,489,4.958,490,3.787,491,1.926,492,1.926,493,3.787,494,4.243,495,4.048,496,4.036,497,2.732,498,1.926,499,4.514,500,3.787,501,3.929,502,3.233,503,3.025,504,1.926,505,5.101,506,4.393,507,3.42,508,1.926,509,1.926,510,3.787,511,1.926,512,1.926,513,3.787,514,1.926,515,1.926,516,1.926,517,2.865,518,1.926,519,5.253,520,1.926,521,1.926,522,2.865,523,1.926,524,3.787,525,1.539,526,1.926,527,1.926,528,4.048,529,3.42,530,2.865,531,2.865,532,2.865,533,2.865,534,1.926,535,1.926,536,2.865,537,4.048,538,1.926,539,1.926,540,1.926,541,4.243,542,1.926,543,5.205,544,2.865,545,1.926,546,1.926,547,1.926,548,1.926,549,1.926,550,1.926,551,1.926,552,1.926,553,1.926,554,3.42,555,2.288,556,1.94,557,1.926,558,1.926,559,3.787,560,1.926,561,3.42,562,2.865,563,1.926,564,1.926,565,1.926,566,3.787,567,2.865,568,1.926,569,2.865,570,1.926,571,1.926,572,1.926,573,2.865,574,1.926,575,1.926,576,1.926,577,1.926,578,2.288,579,1.926,580,1.926,581,1.926,582,1.926,583,1.926,584,1.926,585,1.926,586,1.926,587,1.926,588,1.926,589,1.926,590,1.926,591,1.926,592,4.243,593,2.865,594,2.865,595,3.42,596,1.926,597,1.926,598,1.926,599,1.926,600,1.926,601,2.865,602,3.42,603,1.926,604,1.926,605,1.926,606,2.865,607,1.926,608,1.926,609,2.865,610,1.926,611,1.926,612,2.865,613,1.926,614,1.926,615,1.926,616,1.539,617,2.865,618,1.926,619,2.865,620,2.865,621,1.926,622,1.926,623,1.926,624,3.42,625,1.926,626,1.926,627,1.926,628,1.926,629,1.926,630,1.926,631,1.926,632,1.926,633,4.393,634,1.926,635,1.926,636,2.865,637,1.926,638,1.926,639,1.926,640,2.865,641,1.926,642,1.926,643,1.926,644,3.42,645,1.926,646,2.865,647,2.865,648,1.926,649,1.926,650,1.926,651,3.42,652,1.926,653,1.926,654,1.926,655,1.926,656,1.926,657,1.926,658,1.926,659,1.926,660,1.926,661,4.013,662,2.865,663,4.048,664,1.539,665,1.926,666,1.926,667,1.926,668,1.539,669,1.926,670,1.926,671,1.926,672,1.926,673,2.865,674,1.926,675,1.926,676,1.926,677,3.42,678,1.926,679,1.926,680,1.926,681,1.926,682,1.926,683,2.865,684,1.926,685,1.926,686,1.926,687,1.926,688,1.926,689,4.694,690,1.926,691,1.926,692,1.926,693,1.926,694,1.926,695,1.926,696,1.926,697,1.926,698,1.539,699,1.926,700,1.926,701,1.926,702,1.926,703,2.865,704,4.048,705,1.926,706,1.539,707,1.926,708,1.926,709,1.926,710,2.865,711,1.926,712,1.926,713,1.926,714,1.926,715,1.926,716,4.048,717,1.926,718,1.926,719,3.42,720,1.926,721,1.926,722,1.926,723,1.926,724,1.926,725,1.926,726,1.926,727,1.926,728,1.926,729,1.926,730,1.926,731,1.926,732,2.865,733,1.926,734,1.926,735,1.926,736,4.243,737,1.926,738,2.732,739,1.539,740,2.865,741,1.926,742,2.865,743,1.926,744,2.865,745,3.42,746,1.926,747,1.926,748,1.926,749,1.926,750,1.926,751,2.732,752,1.926,753,1.926,754,1.926,755,3.42,756,1.926,757,2.865,758,1.926,759,1.926,760,1.926,761,1.926,762,1.926,763,3.42,764,1.926,765,1.926,766,1.926,767,1.926,768,1.926,769,1.926,770,1.926,771,3.42,772,1.926,773,1.926,774,1.926,775,1.926,776,1.926,777,1.926,778,1.926,779,1.926,780,1.926,781,1.926,782,1.926,783,1.926,784,1.926,785,1.926,786,1.926,787,1.926,788,1.539,789,1.926,790,1.539,791,1.926,792,1.926,793,1.926,794,1.926,795,1.926,796,1.926,797,1.926,798,1.926,799,1.926,800,1.926,801,2.865,802,1.926,803,1.926,804,1.926,805,1.926,806,1.926,807,1.926,808,1.926,809,1.926,810,1.926,811,1.926,812,1.926,813,1.926,814,1.926,815,1.926,816,1.926,817,1.926,818,1.926,819,1.926,820,1.926,821,1.926,822,1.926,823,1.926,824,1.926,825,1.926,826,1.926]],["title/dependencies.html",[503,1.816,556,1.833]],["body/dependencies.html",[26,0.053,32,0.051,33,0.051,48,1.158,555,3.387,556,2.406,827,4.24]],["title/miscellaneous/functions.html",[76,1.183,828,1.29]],["body/miscellaneous/functions.html",[11,0.752,12,0.627,15,2.229,26,0.056,27,3.073,32,0.048,33,0.048,35,1.393,63,0.956,71,1.657,72,1.657,76,1.393,77,1.912,78,1.607,79,1.912,80,1.657,98,1.657,114,1.912,173,1.657,217,1.393,235,1.912,243,1.912,297,1.912,305,1.912,320,1.912,336,1.607,348,1.932,394,3.516,828,2.158,829,4.215,830,4.526,831,3.805,832,3.805,833,3.805,834,3.805,835,3.805,836,3.805,837,3.805]],["title/index.html",[12,0.375,473,1.515,474,1.11]],["body/index.html",[3,0.85,10,0.699,11,0.986,15,1.475,26,0.057,31,0.576,32,0.045,33,0.045,38,1.165,39,0.69,48,1.173,67,1.361,73,0.69,137,1.106,139,1.106,140,1.106,141,0.85,148,1.278,164,1.278,184,1.106,186,1.475,202,1.278,204,1.271,349,1.278,367,1.475,411,1.475,412,2.098,414,2.789,416,3.432,474,2.098,480,2.789,496,3.984,501,2.789,502,2.789,556,1.98,578,2.789,616,4.056,664,3.432,668,3.432,706,2.789,738,3.88,739,3.718,751,3.432,838,4.297,839,3.491,840,3.491,841,3.491,842,5.145,843,4.857,844,2.326,845,3.491,846,3.491,847,5.196,848,3.491,849,3.491,850,4.297,851,3.491,852,3.491,853,2.789,854,4.297,855,3.491,856,3.491,857,3.491,858,4.655,859,3.491,860,3.491,861,3.491,862,3.491,863,3.491,864,4.297,865,3.491,866,3.491,867,3.491,868,3.491,869,3.491,870,3.491,871,3.491,872,3.491,873,3.491,874,3.491,875,3.491,876,3.491,877,4.297,878,3.491,879,3.491,880,3.491,881,4.987,882,3.491,883,3.491,884,3.491,885,3.491,886,2.789]],["title/license.html",[473,1.515,474,1.11,844,1.515]],["body/license.html",[4,0.632,18,0.895,26,0.048,32,0.048,33,0.048,49,1.619,51,1.619,73,0.758,204,1.241,367,1.214,525,3.062,661,3.062,698,3.872,788,3.062,790,3.062,844,2.554,853,3.062,886,3.632,887,4.847,888,3.833,889,3.833,890,3.833,891,4.547,892,3.833,893,3.833,894,3.833,895,3.833,896,4.547,897,3.833,898,5.013,899,5.316,900,3.833,901,4.547,902,4.847,903,3.833,904,4.547,905,3.833,906,3.833,907,3.833,908,3.833,909,3.833,910,3.833,911,3.833,912,3.833,913,3.833,914,3.833,915,4.547,916,4.547,917,3.833,918,3.833,919,4.547,920,3.833,921,3.833,922,3.833,923,3.833,924,3.833,925,3.833,926,3.833,927,3.833,928,3.833,929,3.833,930,3.833,931,3.833,932,3.833,933,3.833,934,3.833,935,3.833,936,3.833,937,3.833,938,3.833,939,3.833]],["title/modules.html",[411,1.537]],["body/modules.html",[26,0.051,32,0.051,33,0.051,411,1.796,412,2.075,940,4.25]],["title/overview.html",[941,2.905]],["body/overview.html",[0,0.234,26,0.051,32,0.051,33,0.051,39,0.835,95,2.031,97,1.783,141,0.835,411,1.783,497,3.371,941,3.371]],["title/miscellaneous/variables.html",[828,1.29,942,2.581]],["body/miscellaneous/variables.html",[10,0.721,11,0.73,12,0.609,14,1.007,17,1.007,18,0.862,21,1.169,24,1.462,25,1.038,26,0.057,30,1.038,32,0.047,33,0.047,35,1.351,89,1.663,124,2.015,125,1.351,126,2.015,127,2.091,128,2.015,129,2.015,130,2.015,131,2.015,132,1.351,133,2.015,134,1.559,155,1.663,174,1.408,175,2.015,419,2.948,420,2.948,421,2.948,422,2.948,423,2.948,424,2.948,828,2.093,829,4.193,942,2.948,943,3.69,944,3.69,945,3.69,946,3.69,947,3.69,948,3.69,949,3.69]]],"invertedIndex":[["",{"_index":26,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":121,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["0.0.1",{"_index":806,"title":{},"body":{"changelog.html":{}}}],["0.0.2",{"_index":803,"title":{},"body":{"changelog.html":{}}}],["0.0.3",{"_index":800,"title":{},"body":{"changelog.html":{}}}],["0.1.0",{"_index":756,"title":{},"body":{"changelog.html":{}}}],["0.2.0",{"_index":748,"title":{},"body":{"changelog.html":{}}}],["0.2.1",{"_index":743,"title":{},"body":{"changelog.html":{}}}],["0.3.0",{"_index":727,"title":{},"body":{"changelog.html":{}}}],["0.3.1",{"_index":724,"title":{},"body":{"changelog.html":{}}}],["0.3.2",{"_index":721,"title":{},"body":{"changelog.html":{}}}],["0.3.3",{"_index":715,"title":{},"body":{"changelog.html":{}}}],["0.4.0",{"_index":702,"title":{},"body":{"changelog.html":{}}}],["0.4.1",{"_index":697,"title":{},"body":{"changelog.html":{}}}],["0.5.0",{"_index":679,"title":{},"body":{"changelog.html":{}}}],["0.5.1",{"_index":676,"title":{},"body":{"changelog.html":{}}}],["0.5.2",{"_index":672,"title":{},"body":{"changelog.html":{}}}],["0.5.3",{"_index":666,"title":{},"body":{"changelog.html":{}}}],["0.5.4",{"_index":660,"title":{},"body":{"changelog.html":{}}}],["0.5.5",{"_index":654,"title":{},"body":{"changelog.html":{}}}],["0.5.6",{"_index":650,"title":{},"body":{"changelog.html":{}}}],["0.5.7",{"_index":643,"title":{},"body":{"changelog.html":{}}}],["0.6.0",{"_index":639,"title":{},"body":{"changelog.html":{}}}],["0.6.1",{"_index":632,"title":{},"body":{"changelog.html":{}}}],["0.7.0",{"_index":623,"title":{},"body":{"changelog.html":{}}}],["0.7.2",{"_index":611,"title":{},"body":{"changelog.html":{}}}],["0.8.0",{"_index":605,"title":{},"body":{"changelog.html":{}}}],["0.8.1",{"_index":599,"title":{},"body":{"changelog.html":{}}}],["01",{"_index":644,"title":{},"body":{"changelog.html":{}}}],["02",{"_index":624,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":592,"title":{},"body":{"changelog.html":{}}}],["032ea5a",{"_index":816,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":612,"title":{},"body":{"changelog.html":{}}}],["0440bbd",{"_index":509,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":493,"title":{},"body":{"changelog.html":{}}}],["053fb0e",{"_index":810,"title":{},"body":{"changelog.html":{}}}],["05f7f7e",{"_index":603,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":487,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":744,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":566,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":494,"title":{},"body":{"changelog.html":{}}}],["0959a12",{"_index":819,"title":{},"body":{"changelog.html":{}}}],["0a5bf11",{"_index":747,"title":{},"body":{"changelog.html":{}}}],["0ab7d40",{"_index":648,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":95,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"overview.html":{}}}],["1.0.0",{"_index":591,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":589,"title":{},"body":{"changelog.html":{}}}],["1.1.1",{"_index":586,"title":{},"body":{"changelog.html":{}}}],["1.1.2",{"_index":581,"title":{},"body":{"changelog.html":{}}}],["1.2.0",{"_index":577,"title":{},"body":{"changelog.html":{}}}],["1.2.1",{"_index":572,"title":{},"body":{"changelog.html":{}}}],["1.2.2",{"_index":565,"title":{},"body":{"changelog.html":{}}}],["1.2.3",{"_index":558,"title":{},"body":{"changelog.html":{}}}],["1.2.4",{"_index":553,"title":{},"body":{"changelog.html":{}}}],["1.2.5",{"_index":542,"title":{},"body":{"changelog.html":{}}}],["10",{"_index":170,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["10051cd",{"_index":580,"title":{},"body":{"changelog.html":{}}}],["10px",{"_index":169,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["11",{"_index":633,"title":{},"body":{"changelog.html":{}}}],["12",{"_index":506,"title":{},"body":{"changelog.html":{}}}],["13",{"_index":716,"title":{},"body":{"changelog.html":{}}}],["149c1a4",{"_index":758,"title":{},"body":{"changelog.html":{}}}],["15",{"_index":745,"title":{},"body":{"changelog.html":{}}}],["16",{"_index":606,"title":{},"body":{"changelog.html":{}}}],["19",{"_index":488,"title":{},"body":{"changelog.html":{}}}],["1af705a",{"_index":787,"title":{},"body":{"changelog.html":{}}}],["1d15bb4",{"_index":584,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":97,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"overview.html":{}}}],["2.0.0",{"_index":504,"title":{},"body":{"changelog.html":{}}}],["20",{"_index":693,"title":{},"body":{"changelog.html":{}}}],["2016",{"_index":661,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["2017",{"_index":505,"title":{},"body":{"changelog.html":{}}}],["2018",{"_index":486,"title":{},"body":{"changelog.html":{}}}],["21",{"_index":554,"title":{},"body":{"changelog.html":{}}}],["22",{"_index":688,"title":{},"body":{"changelog.html":{}}}],["22af52f",{"_index":822,"title":{},"body":{"changelog.html":{}}}],["23",{"_index":600,"title":{},"body":{"changelog.html":{}}}],["23fc6e5",{"_index":570,"title":{},"body":{"changelog.html":{}}}],["24",{"_index":593,"title":{},"body":{"changelog.html":{}}}],["25",{"_index":651,"title":{},"body":{"changelog.html":{}}}],["25cfe50",{"_index":557,"title":{},"body":{"changelog.html":{}}}],["26",{"_index":507,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":671,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":559,"title":{},"body":{"changelog.html":{}}}],["29",{"_index":680,"title":{},"body":{"changelog.html":{}}}],["2a4b102",{"_index":604,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":81,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["3.0.0",{"_index":492,"title":{},"body":{"changelog.html":{}}}],["3.1.0",{"_index":485,"title":{},"body":{"changelog.html":{}}}],["30",{"_index":645,"title":{},"body":{"changelog.html":{}}}],["300ac10",{"_index":802,"title":{},"body":{"changelog.html":{}}}],["31",{"_index":656,"title":{},"body":{"changelog.html":{}}}],["33",{"_index":659,"title":{},"body":{"changelog.html":{}}}],["34342aa",{"_index":546,"title":{},"body":{"changelog.html":{}}}],["36",{"_index":653,"title":{},"body":{"changelog.html":{}}}],["3633040",{"_index":610,"title":{},"body":{"changelog.html":{}}}],["37fc88e",{"_index":491,"title":{},"body":{"changelog.html":{}}}],["39",{"_index":649,"title":{},"body":{"changelog.html":{}}}],["3ce508d",{"_index":631,"title":{},"body":{"changelog.html":{}}}],["4",{"_index":595,"title":{},"body":{"changelog.html":{}}}],["4.0",{"_index":597,"title":{},"body":{"changelog.html":{}}}],["40",{"_index":642,"title":{},"body":{"changelog.html":{}}}],["41",{"_index":638,"title":{},"body":{"changelog.html":{}}}],["4b20cde",{"_index":622,"title":{},"body":{"changelog.html":{}}}],["4c59b05",{"_index":783,"title":{},"body":{"changelog.html":{}}}],["4c665d2",{"_index":596,"title":{},"body":{"changelog.html":{}}}],["4da938d",{"_index":792,"title":{},"body":{"changelog.html":{}}}],["5",{"_index":510,"title":{},"body":{"changelog.html":{}}}],["5.5",{"_index":527,"title":{},"body":{"changelog.html":{}}}],["50",{"_index":134,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["514851f",{"_index":665,"title":{},"body":{"changelog.html":{}}}],["520abc",{"_index":637,"title":{},"body":{"changelog.html":{}}}],["53",{"_index":588,"title":{},"body":{"changelog.html":{}}}],["54",{"_index":585,"title":{},"body":{"changelog.html":{}}}],["54be6b7",{"_index":590,"title":{},"body":{"changelog.html":{}}}],["5571069",{"_index":687,"title":{},"body":{"changelog.html":{}}}],["59078e2",{"_index":774,"title":{},"body":{"changelog.html":{}}}],["5d6a576",{"_index":511,"title":{},"body":{"changelog.html":{}}}],["5f7f468",{"_index":682,"title":{},"body":{"changelog.html":{}}}],["6",{"_index":497,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["6.0",{"_index":845,"title":{},"body":{"index.html":{}}}],["6.0.0",{"_index":827,"title":{},"body":{"dependencies.html":{}}}],["60c2e08",{"_index":784,"title":{},"body":{"changelog.html":{}}}],["62",{"_index":576,"title":{},"body":{"changelog.html":{}}}],["65",{"_index":571,"title":{},"body":{"changelog.html":{}}}],["66",{"_index":563,"title":{},"body":{"changelog.html":{}}}],["68",{"_index":547,"title":{},"body":{"changelog.html":{}}}],["68dc84f",{"_index":701,"title":{},"body":{"changelog.html":{}}}],["697c52c",{"_index":678,"title":{},"body":{"changelog.html":{}}}],["70",{"_index":552,"title":{},"body":{"changelog.html":{}}}],["71d5a05",{"_index":551,"title":{},"body":{"changelog.html":{}}}],["72",{"_index":550,"title":{},"body":{"changelog.html":{}}}],["74424ba",{"_index":789,"title":{},"body":{"changelog.html":{}}}],["75ce122",{"_index":655,"title":{},"body":{"changelog.html":{}}}],["79",{"_index":520,"title":{},"body":{"changelog.html":{}}}],["7b1280e",{"_index":805,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":785,"title":{},"body":{"changelog.html":{}}}],["80",{"_index":521,"title":{},"body":{"changelog.html":{}}}],["8000",{"_index":879,"title":{},"body":{"index.html":{}}}],["81fe0b4",{"_index":768,"title":{},"body":{"changelog.html":{}}}],["820612e",{"_index":618,"title":{},"body":{"changelog.html":{}}}],["8232e66",{"_index":615,"title":{},"body":{"changelog.html":{}}}],["858b3f8",{"_index":726,"title":{},"body":{"changelog.html":{}}}],["8e3f108",{"_index":629,"title":{},"body":{"changelog.html":{}}}],["9",{"_index":759,"title":{},"body":{"changelog.html":{}}}],["9236e02",{"_index":675,"title":{},"body":{"changelog.html":{}}}],["927235e",{"_index":691,"title":{},"body":{"changelog.html":{}}}],["93a5c4",{"_index":658,"title":{},"body":{"changelog.html":{}}}],["9557c0a",{"_index":735,"title":{},"body":{"changelog.html":{}}}],["9597986",{"_index":692,"title":{},"body":{"changelog.html":{}}}],["99d2f66",{"_index":641,"title":{},"body":{"changelog.html":{}}}],["9c76aac",{"_index":730,"title":{},"body":{"changelog.html":{}}}],["9f9c54a",{"_index":778,"title":{},"body":{"changelog.html":{}}}],["a0323e9",{"_index":575,"title":{},"body":{"changelog.html":{}}}],["a056154",{"_index":564,"title":{},"body":{"changelog.html":{}}}],["a74f9e2",{"_index":621,"title":{},"body":{"changelog.html":{}}}],["a8e5cd3",{"_index":812,"title":{},"body":{"changelog.html":{}}}],["aa169c7",{"_index":652,"title":{},"body":{"changelog.html":{}}}],["abov",{"_index":914,"title":{},"body":{"license.html":{}}}],["absolut",{"_index":99,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["action",{"_index":934,"title":{},"body":{"license.html":{}}}],["activ",{"_index":125,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["add",{"_index":349,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{}}}],["af7abf7",{"_index":514,"title":{},"body":{"changelog.html":{}}}],["allow",{"_index":148,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{}}}],["allowededg",{"_index":237,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["amount",{"_index":779,"title":{},"body":{"changelog.html":{}}}],["and/or",{"_index":908,"title":{},"body":{"license.html":{}}}],["angular",{"_index":496,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["angular/cor",{"_index":48,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"dependencies.html":{},"index.html":{}}}],["angular2",{"_index":690,"title":{},"body":{"changelog.html":{}}}],["any).eventlisteners[typ",{"_index":470,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["aot",{"_index":673,"title":{},"body":{"changelog.html":{}}}],["app",{"_index":739,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["appli",{"_index":750,"title":{},"body":{"changelog.html":{}}}],["applic",{"_index":579,"title":{},"body":{"changelog.html":{}}}],["argument",{"_index":438,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["aris",{"_index":938,"title":{},"body":{"license.html":{}}}],["associ",{"_index":900,"title":{},"body":{"license.html":{}}}],["author",{"_index":927,"title":{},"body":{"license.html":{}}}],["auto",{"_index":664,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["b77c9fc",{"_index":608,"title":{},"body":{"changelog.html":{}}}],["bac87e3",{"_index":826,"title":{},"body":{"changelog.html":{}}}],["back",{"_index":573,"title":{},"body":{"changelog.html":{}}}],["be",{"_index":685,"title":{},"body":{"changelog.html":{}}}],["be5d727",{"_index":587,"title":{},"body":{"changelog.html":{}}}],["befor",{"_index":145,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["before(resize)=\"onresize($ev",{"_index":695,"title":{},"body":{"changelog.html":{}}}],["begin",{"_index":182,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["begun",{"_index":185,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["behaviour",{"_index":799,"title":{},"body":{"changelog.html":{}}}],["between",{"_index":161,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["bf497d2",{"_index":809,"title":{},"body":{"changelog.html":{}}}],["boolean",{"_index":82,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["bootstrap",{"_index":861,"title":{},"body":{"index.html":{}}}],["border",{"_index":856,"title":{},"body":{"index.html":{}}}],["bottom",{"_index":14,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["bottomleft",{"_index":419,"title":{},"body":{"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["bottomright",{"_index":420,"title":{},"body":{"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["bound",{"_index":8,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/ResizeEvent.html":{},"changelog.html":{}}}],["boundingrect",{"_index":104,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrect.bottom",{"_index":109,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrect.height",{"_index":106,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrect.left",{"_index":110,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrect.right",{"_index":111,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrect.top",{"_index":108,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrect.width",{"_index":107,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrectangl",{"_index":1,"title":{"interfaces/BoundingRectangle.html":{}},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"changelog.html":{}}}],["box",{"_index":854,"title":{},"body":{"index.html":{}}}],["break",{"_index":499,"title":{},"body":{"changelog.html":{}}}],["broken",{"_index":746,"title":{},"body":{"changelog.html":{}}}],["brows",{"_index":940,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":773,"title":{},"body":{"changelog.html":{}}}],["bug",{"_index":543,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":703,"title":{},"body":{"changelog.html":{}}}],["bundl",{"_index":517,"title":{},"body":{"changelog.html":{}}}],["c",{"_index":888,"title":{},"body":{"license.html":{}}}],["c4519a1",{"_index":518,"title":{},"body":{"changelog.html":{}}}],["c60b3f5",{"_index":775,"title":{},"body":{"changelog.html":{}}}],["c76be59",{"_index":770,"title":{},"body":{"changelog.html":{}}}],["c7e3de6",{"_index":498,"title":{},"body":{"changelog.html":{}}}],["call",{"_index":144,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["camel",{"_index":731,"title":{},"body":{"changelog.html":{}}}],["cancel",{"_index":151,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["case",{"_index":732,"title":{},"body":{"changelog.html":{}}}],["cbe088f",{"_index":720,"title":{},"body":{"changelog.html":{}}}],["chang",{"_index":476,"title":{},"body":{"changelog.html":{}}}],["changelog",{"_index":475,"title":{"changelog.html":{}},"body":{}}],["charg",{"_index":895,"title":{},"body":{"license.html":{}}}],["claim",{"_index":930,"title":{},"body":{"license.html":{}}}],["class",{"_index":141,"title":{"classes/PointerEventListeners.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{},"overview.html":{}}}],["clienti",{"_index":72,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{}}}],["clientrect",{"_index":116,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["clientx",{"_index":71,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{}}}],["clone",{"_index":561,"title":{},"body":{"changelog.html":{}}}],["clonednod",{"_index":219,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["close",{"_index":519,"title":{},"body":{"changelog.html":{}}}],["co",{"_index":760,"title":{},"body":{"changelog.html":{}}}],["col",{"_index":948,"title":{},"body":{"miscellaneous/variables.html":{}}}],["come",{"_index":871,"title":{},"body":{"index.html":{}}}],["commit",{"_index":483,"title":{},"body":{"changelog.html":{}}}],["compat",{"_index":674,"title":{},"body":{"changelog.html":{}}}],["compil",{"_index":707,"title":{},"body":{"changelog.html":{}}}],["complet",{"_index":777,"title":{},"body":{"changelog.html":{}}}],["compon",{"_index":668,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["con",{"_index":782,"title":{},"body":{"changelog.html":{}}}],["condit",{"_index":913,"title":{},"body":{"license.html":{}}}],["config",{"_index":540,"title":{},"body":{"changelog.html":{}}}],["configur",{"_index":607,"title":{},"body":{"changelog.html":{}}}],["connect",{"_index":939,"title":{},"body":{"license.html":{}}}],["console.log('el",{"_index":860,"title":{},"body":{"index.html":{}}}],["const",{"_index":83,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["constructor",{"_index":195,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["constructor(render",{"_index":361,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["contain",{"_index":435,"title":{},"body":{"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["content",{"_index":841,"title":{},"body":{"index.html":{}}}],["continu",{"_index":884,"title":{},"body":{"index.html":{}}}],["contract",{"_index":935,"title":{},"body":{"license.html":{}}}],["coord",{"_index":275,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["coordin",{"_index":34,"title":{"interfaces/Coordinate.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["copi",{"_index":898,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":887,"title":{},"body":{"license.html":{}}}],["core",{"_index":699,"title":{},"body":{"changelog.html":{}}}],["corner",{"_index":825,"title":{},"body":{"changelog.html":{}}}],["correct",{"_index":646,"title":{},"body":{"changelog.html":{}}}],["creat",{"_index":749,"title":{},"body":{"changelog.html":{}}}],["css",{"_index":548,"title":{},"body":{"changelog.html":{}}}],["cssclass",{"_index":625,"title":{},"body":{"changelog.html":{}}}],["current",{"_index":874,"title":{},"body":{"index.html":{}}}],["currentrect",{"_index":218,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentres",{"_index":216,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize!.currentrect",{"_index":316,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize!.edg",{"_index":299,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize!.startingrect",{"_index":298,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize)).subscrib",{"_index":230,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.clonednod",{"_index":223,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.clonednode!.scrollleft",{"_index":334,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.clonednode!.scrolltop",{"_index":332,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.edg",{"_index":244,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.edges.bottom",{"_index":273,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.edges.left",{"_index":265,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.edges.right",{"_index":268,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.edges.top",{"_index":270,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.startingrect",{"_index":333,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.startingrect.height}px",{"_index":328,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.startingrect.left}px",{"_index":326,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.startingrect.top}px",{"_index":327,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.startingrect.width}px",{"_index":329,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["cursor",{"_index":173,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["cursorprecis",{"_index":239,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["customis",{"_index":640,"title":{},"body":{"changelog.html":{}}}],["d5b18cc",{"_index":723,"title":{},"body":{"changelog.html":{}}}],["d5ea756",{"_index":670,"title":{},"body":{"changelog.html":{}}}],["d664038",{"_index":780,"title":{},"body":{"changelog.html":{}}}],["damag",{"_index":931,"title":{},"body":{"license.html":{}}}],["dash",{"_index":733,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":901,"title":{},"body":{"license.html":{}}}],["declar",{"_index":414,"title":{},"body":{"modules/ResizableModule.html":{},"index.html":{}}}],["dedc3bb",{"_index":754,"title":{},"body":{"changelog.html":{}}}],["default",{"_index":155,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["default_resize_cursor",{"_index":175,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["defin",{"_index":28,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["delet",{"_index":471,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["demo",{"_index":738,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["depend",{"_index":556,"title":{"dependencies.html":{}},"body":{"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["descript",{"_index":7,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Edges.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{}}}],["destroy",{"_index":669,"title":{},"body":{"changelog.html":{}}}],["dev",{"_index":873,"title":{},"body":{"index.html":{}}}],["develop",{"_index":843,"title":{},"body":{"index.html":{}}}],["diff",{"_index":84,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["direct",{"_index":39,"title":{"directives/ResizableDirective.html":{},"directives/ResizeHandleDirective.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{},"overview.html":{}}}],["directori",{"_index":875,"title":{},"body":{"index.html":{}}}],["disabl",{"_index":771,"title":{},"body":{"changelog.html":{}}}],["disableres",{"_index":776,"title":{},"body":{"changelog.html":{}}}],["dist",{"_index":725,"title":{},"body":{"changelog.html":{}}}],["distribut",{"_index":906,"title":{},"body":{"license.html":{}}}],["document",{"_index":367,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["dont",{"_index":677,"title":{},"body":{"changelog.html":{}}}],["drag",{"_index":184,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{}}}],["draghandl",{"_index":582,"title":{},"body":{"changelog.html":{}}}],["drop",{"_index":728,"title":{},"body":{"changelog.html":{}}}],["dynam",{"_index":544,"title":{},"body":{"changelog.html":{}}}],["e.g",{"_index":168,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["e722a86",{"_index":818,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":146,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["eb314fd",{"_index":766,"title":{},"body":{"changelog.html":{}}}],["edg",{"_index":63,"title":{"interfaces/Edges.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["edges.interfac",{"_index":427,"title":{},"body":{"interfaces/ResizeEvent.html":{}}}],["edgesdiff",{"_index":123,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["edgesdiff[edg",{"_index":119,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["edit",{"_index":630,"title":{},"body":{"changelog.html":{}}}],["effect",{"_index":160,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["element",{"_index":11,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["element.j",{"_index":533,"title":{},"body":{"changelog.html":{}}}],["element.nativeelement.getboundingclientrect",{"_index":105,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.nativeelement.offsetheight",{"_index":100,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.nativeelement.offsetleft",{"_index":103,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.nativeelement.offsettop",{"_index":102,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.nativeelement.offsetwidth",{"_index":101,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.nativeelement.scrollleft",{"_index":113,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.nativeelement.scrolltop",{"_index":112,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.umd.j",{"_index":535,"title":{},"body":{"changelog.html":{}}}],["element/bundles/angular",{"_index":534,"title":{},"body":{"changelog.html":{}}}],["element/demo",{"_index":839,"title":{},"body":{"index.html":{}}}],["element/dist/umd/angular",{"_index":532,"title":{},"body":{"changelog.html":{}}}],["element/doc",{"_index":867,"title":{},"body":{"index.html":{}}}],["elementref",{"_index":41,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["elementthen",{"_index":849,"title":{},"body":{"index.html":{}}}],["elm",{"_index":197,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["enabl",{"_index":158,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["enableghostres",{"_index":164,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{}}}],["enableresizestyl",{"_index":755,"title":{},"body":{"changelog.html":{}}}],["enableresizestyling]=\"tru",{"_index":794,"title":{},"body":{"changelog.html":{}}}],["ensur",{"_index":567,"title":{},"body":{"changelog.html":{}}}],["entri",{"_index":530,"title":{},"body":{"changelog.html":{}}}],["environ",{"_index":869,"title":{},"body":{"index.html":{}}}],["event",{"_index":73,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["event.changedtouches[0].clienti",{"_index":387,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["event.changedtouches[0].clientx",{"_index":386,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["event.clienti",{"_index":370,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["event.clientx",{"_index":369,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["event.edg",{"_index":795,"title":{},"body":{"changelog.html":{}}}],["event.interfac",{"_index":69,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["event.interface.t",{"_index":426,"title":{},"body":{"interfaces/ResizeEvent.html":{}}}],["event.preventdefault",{"_index":231,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["event.targettouches[0].clienti",{"_index":380,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["event.targettouches[0].clientx",{"_index":379,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["event.touches[0].clienti",{"_index":373,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["event.touches[0].clientx",{"_index":372,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["eventemitt",{"_index":45,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["eventlisten",{"_index":443,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["exampl",{"_index":137,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{}}}],["export",{"_index":31,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{}}}],["expos",{"_index":609,"title":{},"body":{"changelog.html":{}}}],["express",{"_index":921,"title":{},"body":{"license.html":{}}}],["f24a746",{"_index":549,"title":{},"body":{"changelog.html":{}}}],["f3fe12a",{"_index":708,"title":{},"body":{"changelog.html":{}}}],["f440c87",{"_index":824,"title":{},"body":{"changelog.html":{}}}],["fa73345",{"_index":753,"title":{},"body":{"changelog.html":{}}}],["fals",{"_index":150,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["fanci",{"_index":205,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["fe49114",{"_index":804,"title":{},"body":{"changelog.html":{}}}],["featur",{"_index":489,"title":{},"body":{"changelog.html":{}}}],["ffad2ca",{"_index":734,"title":{},"body":{"changelog.html":{}}}],["file",{"_index":4,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"license.html":{}}}],["filter",{"_index":57,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["filter(([previouscoord",{"_index":285,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["filter((edg",{"_index":317,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["filter((newboundingrect",{"_index":300,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["find",{"_index":863,"title":{},"body":{"index.html":{}}}],["find(valu",{"_index":88,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["fire",{"_index":769,"title":{},"body":{"changelog.html":{}}}],["firefox",{"_index":583,"title":{},"body":{"changelog.html":{}}}],["fit",{"_index":788,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["fix",{"_index":180,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["flesh",{"_index":852,"title":{},"body":{"index.html":{}}}],["flicker",{"_index":815,"title":{},"body":{"changelog.html":{}}}],["folder",{"_index":851,"title":{},"body":{"index.html":{}}}],["follow",{"_index":912,"title":{},"body":{"license.html":{}}}],["free",{"_index":894,"title":{},"body":{"license.html":{}}}],["function",{"_index":76,"title":{"miscellaneous/functions.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["furnish",{"_index":911,"title":{},"body":{"license.html":{}}}],["gener",{"_index":865,"title":{},"body":{"index.html":{}}}],["get",{"_index":473,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["getdiff(movecoord",{"_index":257,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getdiff(newcoord",{"_index":284,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getdiff(previouscoord",{"_index":283,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getedgesdiff",{"_index":305,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["getedgesdiff(undefin",{"_index":831,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getelementrect",{"_index":320,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["getelementrect(el",{"_index":832,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getgrid",{"_index":274,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getgrid(newcoord",{"_index":288,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getinst",{"_index":359,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getinstance(render",{"_index":398,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["getnewboundingrectangl",{"_index":297,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["getnewboundingrectangle(startingrect",{"_index":336,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["getresizecursor",{"_index":243,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["getresizecursor(currentresize.edg",{"_index":330,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getresizecursor(edg",{"_index":833,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getresizecursor(resizeedg",{"_index":246,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getresizeedg",{"_index":235,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["getresizeedges(undefin",{"_index":834,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getsnapgrid",{"_index":262,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["ghost",{"_index":132,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["ghostelementposit",{"_index":98,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["give",{"_index":626,"title":{},"body":{"changelog.html":{}}}],["global",{"_index":522,"title":{},"body":{"changelog.html":{}}}],["grant",{"_index":893,"title":{},"body":{"license.html":{}}}],["grid",{"_index":166,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["guidelin",{"_index":484,"title":{},"body":{"changelog.html":{}}}],["handl",{"_index":431,"title":{},"body":{"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["handle.direct",{"_index":418,"title":{},"body":{"modules/ResizableModule.html":{}}}],["handle.directive.t",{"_index":429,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["handle.directive.ts:112",{"_index":440,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["handle.directive.ts:31",{"_index":437,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["handle.directive.ts:37",{"_index":434,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["handle.directive.ts:59",{"_index":442,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["handler",{"_index":568,"title":{},"body":{"changelog.html":{}}}],["height",{"_index":16,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["here",{"_index":866,"title":{},"body":{"index.html":{}}}],["herebi",{"_index":892,"title":{},"body":{"license.html":{}}}],["hidden",{"_index":187,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["higher",{"_index":500,"title":{},"body":{"changelog.html":{}}}],["holder",{"_index":928,"title":{},"body":{"license.html":{}}}],["host",{"_index":752,"title":{},"body":{"changelog.html":{}}}],["hostlisten",{"_index":433,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["hostlistener('mousedown",{"_index":446,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["hostlistener('mouseup",{"_index":463,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["hostlistener('touchcancel",{"_index":462,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["hostlistener('touchend",{"_index":461,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["hostlistener('touchstart",{"_index":445,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["hover",{"_index":127,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["html",{"_index":138,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["htmlelement",{"_index":220,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["https://mattlewis92.github.io/angular",{"_index":838,"title":{},"body":{"index.html":{}}}],["ie11",{"_index":574,"title":{},"body":{"changelog.html":{}}}],["implement",{"_index":143,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["impli",{"_index":922,"title":{},"body":{"license.html":{}}}],["import",{"_index":38,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{}}}],["improv",{"_index":490,"title":{},"body":{"changelog.html":{}}}],["includ",{"_index":698,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":2,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{}}}],["inherit",{"_index":227,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["initi",{"_index":820,"title":{},"body":{"changelog.html":{}}}],["initialrectangl",{"_index":306,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["initialrectangle[edg",{"_index":122,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["input",{"_index":44,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["insid",{"_index":430,"title":{},"body":{"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["instal",{"_index":842,"title":{},"body":{"index.html":{}}}],["instanc",{"_index":356,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["instead",{"_index":663,"title":{},"body":{"changelog.html":{}}}],["interfac",{"_index":0,"title":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{}},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"changelog.html":{},"overview.html":{}}}],["interfaces/bound",{"_index":65,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["interfaces/edges.interfac",{"_index":64,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["interfaces/res",{"_index":68,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["interv",{"_index":52,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["interval(mouse_move_throttle_m",{"_index":233,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["isnumbercloseto",{"_index":77,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["isnumbercloseto(value1",{"_index":835,"title":{},"body":{"miscellaneous/functions.html":{}}}],["iswithinboundingi",{"_index":114,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["iswithinboundingx",{"_index":830,"title":{},"body":{"miscellaneous/functions.html":{}}}],["iswithinboundingx(undefin",{"_index":836,"title":{},"body":{"miscellaneous/functions.html":{}}}],["iswithinboundingy(undefin",{"_index":837,"title":{},"body":{"miscellaneous/functions.html":{}}}],["js",{"_index":700,"title":{},"body":{"changelog.html":{}}}],["keep",{"_index":657,"title":{},"body":{"changelog.html":{}}}],["key",{"_index":23,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Edges.html":{},"directives/ResizeHandleDirective.html":{}}}],["kind",{"_index":920,"title":{},"body":{"license.html":{}}}],["last",{"_index":762,"title":{},"body":{"changelog.html":{}}}],["left",{"_index":17,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["leftorright",{"_index":421,"title":{},"body":{"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["lettabl",{"_index":512,"title":{},"body":{"changelog.html":{}}}],["lewi",{"_index":890,"title":{},"body":{"license.html":{}}}],["liabil",{"_index":932,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":929,"title":{},"body":{"license.html":{}}}],["librari",{"_index":528,"title":{},"body":{"changelog.html":{}}}],["licens",{"_index":844,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["limit",{"_index":904,"title":{},"body":{"license.html":{}}}],["line",{"_index":358,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["listen",{"_index":602,"title":{},"body":{"changelog.html":{}}}],["local",{"_index":872,"title":{},"body":{"index.html":{}}}],["lock",{"_index":167,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["log",{"_index":477,"title":{},"body":{"changelog.html":{}}}],["longer",{"_index":524,"title":{},"body":{"changelog.html":{}}}],["main",{"_index":627,"title":{},"body":{"changelog.html":{}}}],["make",{"_index":136,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["map",{"_index":54,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["map(([previouscoord",{"_index":280,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["match",{"_index":33,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["math.abs(value1",{"_index":85,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["math.ceil(coords.clienti",{"_index":277,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["math.ceil(coords.clientx",{"_index":276,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["math.round(newcoords.clienti",{"_index":294,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["math.round(newcoords.clientx",{"_index":293,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["matt",{"_index":889,"title":{},"body":{"license.html":{}}}],["merchant",{"_index":923,"title":{},"body":{"license.html":{}}}],["merg",{"_index":51,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"license.html":{}}}],["mergemap",{"_index":55,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["mergemap(startcoord",{"_index":256,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["metadata",{"_index":400,"title":{},"body":{"directives/ResizableDirective.html":{},"directives/ResizeHandleDirective.html":{}}}],["method",{"_index":392,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["miscellan",{"_index":828,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["miss",{"_index":801,"title":{},"body":{"changelog.html":{}}}],["mit",{"_index":886,"title":{},"body":{"index.html":{},"license.html":{}}}],["modifi",{"_index":525,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["modul",{"_index":411,"title":{"modules/ResizableModule.html":{},"modules.html":{}},"body":{"modules/ResizableModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":850,"title":{},"body":{"index.html":{}}}],["mous",{"_index":172,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["mouse_move_throttle_m",{"_index":133,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["mousedown",{"_index":190,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["mousedrag",{"_index":253,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["mouseev",{"_index":74,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["mousemov",{"_index":191,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["mousemove.pipe(filt",{"_index":229,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["mousemove.pipe(pairwis",{"_index":279,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["mousemove.pipe(take(1)).pipe(map(coord",{"_index":278,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["mousemoveev",{"_index":457,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["mousemoveevent.clienti",{"_index":459,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["mousemoveevent.clientx",{"_index":458,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["mouseup",{"_index":189,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["move",{"_index":620,"title":{},"body":{"changelog.html":{}}}],["movecoords.clienti",{"_index":260,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["movecoords.clientx",{"_index":258,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["multipl",{"_index":807,"title":{},"body":{"changelog.html":{}}}],["mwl",{"_index":736,"title":{},"body":{"changelog.html":{}}}],["mwlresiz",{"_index":140,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{}}}],["mwlresizehandl",{"_index":432,"title":{},"body":{"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["mycompon",{"_index":858,"title":{},"body":{"index.html":{}}}],["mymodul",{"_index":862,"title":{},"body":{"index.html":{}}}],["name",{"_index":348,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{}}}],["ne",{"_index":945,"title":{},"body":{"miscellaneous/variables.html":{}}}],["need",{"_index":538,"title":{},"body":{"changelog.html":{}}}],["nest",{"_index":786,"title":{},"body":{"changelog.html":{}}}],["new",{"_index":183,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["newboundingrect",{"_index":304,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.height",{"_index":301,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.height}px",{"_index":310,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.left}px",{"_index":313,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.top}px",{"_index":312,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.width",{"_index":302,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.width}px",{"_index":311,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newcoord",{"_index":281,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newgrid",{"_index":287,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newgrid.i",{"_index":292,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newgrid.x",{"_index":290,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newrectangl",{"_index":307,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newrectangle[edg",{"_index":120,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["ng",{"_index":515,"title":{},"body":{"changelog.html":{}}}],["ng4",{"_index":594,"title":{},"body":{"changelog.html":{}}}],["ngmodul",{"_index":416,"title":{},"body":{"modules/ResizableModule.html":{},"index.html":{}}}],["ngondestroy",{"_index":340,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["ngoninit",{"_index":201,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["ngzone",{"_index":47,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["node",{"_index":562,"title":{},"body":{"changelog.html":{}}}],["node.j",{"_index":870,"title":{},"body":{"index.html":{}}}],["node_modules/angular",{"_index":694,"title":{},"body":{"changelog.html":{}}}],["node_modules/angular2",{"_index":710,"title":{},"body":{"changelog.html":{}}}],["noninfring",{"_index":926,"title":{},"body":{"license.html":{}}}],["notabl",{"_index":478,"title":{},"body":{"changelog.html":{}}}],["notic",{"_index":915,"title":{},"body":{"license.html":{}}}],["now",{"_index":501,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["npm",{"_index":847,"title":{},"body":{"index.html":{}}}],["null",{"_index":221,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["number",{"_index":25,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["nw",{"_index":944,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object",{"_index":154,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["object.assign",{"_index":241,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["object.freez",{"_index":943,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.keys(edges).length",{"_index":318,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["object.keys(this.eventlisteners).foreach(typ",{"_index":469,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["observ",{"_index":50,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["observable.merge'",{"_index":206,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["observer.next",{"_index":368,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["obtain",{"_index":897,"title":{},"body":{"license.html":{}}}],["offlin",{"_index":705,"title":{},"body":{"changelog.html":{}}}],["old",{"_index":798,"title":{},"body":{"changelog.html":{}}}],["onc",{"_index":882,"title":{},"body":{"index.html":{}}}],["ondestroy",{"_index":46,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["oninit",{"_index":42,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["onmousedown",{"_index":447,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["onmousemov",{"_index":466,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["onmouseup(clientx",{"_index":464,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["onres",{"_index":741,"title":{},"body":{"changelog.html":{}}}],["onresizeend",{"_index":742,"title":{},"body":{"changelog.html":{}}}],["onresizeend(ev",{"_index":859,"title":{},"body":{"index.html":{}}}],["onresizestart",{"_index":740,"title":{},"body":{"changelog.html":{}}}],["oper",{"_index":513,"title":{},"body":{"changelog.html":{}}}],["opt",{"_index":781,"title":{},"body":{"changelog.html":{}}}],["option",{"_index":15,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Edges.html":{},"classes/PointerEventListeners.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["ordin",{"_index":761,"title":{},"body":{"changelog.html":{}}}],["otherwis",{"_index":937,"title":{},"body":{"license.html":{}}}],["out",{"_index":853,"title":{},"body":{"index.html":{},"license.html":{}}}],["output",{"_index":43,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["outsid",{"_index":569,"title":{},"body":{"changelog.html":{}}}],["over",{"_index":176,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["overview",{"_index":941,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":503,"title":{"dependencies.html":{}},"body":{"changelog.html":{}}}],["packagr",{"_index":516,"title":{},"body":{"changelog.html":{}}}],["pairwis",{"_index":58,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["paramet",{"_index":394,"title":{},"body":{"classes/PointerEventListeners.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":436,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["particular",{"_index":924,"title":{},"body":{"license.html":{}}}],["pass",{"_index":153,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{}}}],["path",{"_index":709,"title":{},"body":{"changelog.html":{}}}],["peer",{"_index":555,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["peerdepend",{"_index":717,"title":{},"body":{"changelog.html":{}}}],["perform",{"_index":601,"title":{},"body":{"changelog.html":{}}}],["permiss",{"_index":891,"title":{},"body":{"license.html":{}}}],["permit",{"_index":910,"title":{},"body":{"license.html":{}}}],["person",{"_index":896,"title":{},"body":{"license.html":{}}}],["pipe",{"_index":255,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pipe(filt",{"_index":296,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pipe(shar",{"_index":374,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pipe(takeuntil(merge(this.mouseup",{"_index":295,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pipe(throttl",{"_index":232,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["place",{"_index":135,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["point",{"_index":531,"title":{},"body":{"changelog.html":{}}}],["pointerdown",{"_index":352,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pointereventcoordin",{"_index":70,"title":{"interfaces/PointerEventCoordinate.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pointereventlisten",{"_index":193,"title":{"classes/PointerEventListeners.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pointereventlisteners.getinst",{"_index":200,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pointereventlisteners.inst",{"_index":360,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pointereventlistenersubscript",{"_index":194,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pointermov",{"_index":353,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pointerup",{"_index":354,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pojo",{"_index":767,"title":{},"body":{"changelog.html":{}}}],["port",{"_index":878,"title":{},"body":{"index.html":{}}}],["portion",{"_index":918,"title":{},"body":{"license.html":{}}}],["posit",{"_index":179,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["post",{"_index":718,"title":{},"body":{"changelog.html":{}}}],["precis",{"_index":80,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["prefix",{"_index":729,"title":{},"body":{"changelog.html":{}}}],["prepar",{"_index":868,"title":{},"body":{"index.html":{}}}],["press",{"_index":181,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["prevent",{"_index":683,"title":{},"body":{"changelog.html":{}}}],["previou",{"_index":757,"title":{},"body":{"changelog.html":{}}}],["previouscoord",{"_index":282,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["previousgrid",{"_index":286,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["previousgrid.i",{"_index":291,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["previousgrid.x",{"_index":289,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["privat",{"_index":192,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["project",{"_index":479,"title":{},"body":{"changelog.html":{}}}],["propag",{"_index":149,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["properti",{"_index":13,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"changelog.html":{}}}],["prototyp",{"_index":523,"title":{},"body":{"changelog.html":{}}}],["provid",{"_index":790,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["public",{"_index":188,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["publish",{"_index":905,"title":{},"body":{"license.html":{}}}],["purpos",{"_index":925,"title":{},"body":{"license.html":{}}}],["px",{"_index":94,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["rc5",{"_index":719,"title":{},"body":{"changelog.html":{}}}],["rc6",{"_index":722,"title":{},"body":{"changelog.html":{}}}],["re",{"_index":793,"title":{},"body":{"changelog.html":{}}}],["readm",{"_index":737,"title":{},"body":{"changelog.html":{}}}],["rect",{"_index":115,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["rect.left",{"_index":118,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["rect.top",{"_index":117,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["rectangl",{"_index":9,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"changelog.html":{}}}],["rectangle.interfac",{"_index":66,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{}}}],["rectangle.interface.t",{"_index":6,"title":{},"body":{"interfaces/BoundingRectangle.html":{}}}],["rectangle.interface.ts:12",{"_index":29,"title":{},"body":{"interfaces/BoundingRectangle.html":{}}}],["refer",{"_index":636,"title":{},"body":{"changelog.html":{}}}],["regist",{"_index":619,"title":{},"body":{"changelog.html":{}}}],["relax",{"_index":613,"title":{},"body":{"changelog.html":{}}}],["releas",{"_index":186,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"index.html":{}}}],["releaselicens",{"_index":885,"title":{},"body":{"index.html":{}}}],["reload",{"_index":880,"title":{},"body":{"index.html":{}}}],["remov",{"_index":635,"title":{},"body":{"changelog.html":{}}}],["removeghostel",{"_index":222,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["renam",{"_index":689,"title":{},"body":{"changelog.html":{}}}],["render",{"_index":196,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["renderer.listen",{"_index":366,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["renderer2",{"_index":40,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["repo",{"_index":876,"title":{},"body":{"index.html":{}}}],["requir",{"_index":502,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["reset",{"_index":662,"title":{},"body":{"changelog.html":{}}}],["resiz",{"_index":10,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["resizable.direct",{"_index":417,"title":{},"body":{"modules/ResizableModule.html":{},"directives/ResizeHandleDirective.html":{}}}],["resizable.j",{"_index":714,"title":{},"body":{"changelog.html":{}}}],["resizable.jsaft",{"_index":712,"title":{},"body":{"changelog.html":{}}}],["resizable/angular2",{"_index":711,"title":{},"body":{"changelog.html":{}}}],["resizable/dist/umd/angular2",{"_index":713,"title":{},"body":{"changelog.html":{}}}],["resizabledirect",{"_index":142,"title":{"directives/ResizableDirective.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["resizablemodul",{"_index":412,"title":{"modules/ResizableModule.html":{}},"body":{"modules/ResizableModule.html":{},"changelog.html":{},"index.html":{},"modules.html":{}}}],["resize_active_class",{"_index":124,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["resize_bottom_hover_class",{"_index":130,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["resize_ghost_element_class",{"_index":131,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["resize_left_hover_class",{"_index":126,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["resize_right_hover_class",{"_index":128,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["resize_top_hover_class",{"_index":129,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["resizecursor",{"_index":174,"title":{"interfaces/ResizeCursors.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["resizecursorprecis",{"_index":178,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["resizeedg",{"_index":156,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["resizeedges.bottom",{"_index":252,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["resizeedges.left",{"_index":249,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["resizeedges.right",{"_index":250,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["resizeedges.top",{"_index":251,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["resizeedges]={top",{"_index":797,"title":{},"body":{"changelog.html":{}}}],["resizeend",{"_index":163,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["resizeev",{"_index":67,"title":{"interfaces/ResizeEvent.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"index.html":{}}}],["resizehandl",{"_index":541,"title":{},"body":{"changelog.html":{}}}],["resizehandledirect",{"_index":415,"title":{"directives/ResizeHandleDirective.html":{}},"body":{"modules/ResizableModule.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["resizesnapgrid",{"_index":171,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["resizestart",{"_index":162,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["resizing)=\"onresizing($ev",{"_index":696,"title":{},"body":{"changelog.html":{}}}],["restrict",{"_index":903,"title":{},"body":{"license.html":{}}}],["result",{"_index":32,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":86,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["reziz",{"_index":617,"title":{},"body":{"changelog.html":{}}}],["right",{"_index":18,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["row",{"_index":949,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":616,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["rxj",{"_index":53,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["rxjs/oper",{"_index":62,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["save",{"_index":848,"title":{},"body":{"index.html":{}}}],["scroll",{"_index":560,"title":{},"body":{"changelog.html":{}}}],["scrollleft",{"_index":19,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["scrolltop",{"_index":20,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["se",{"_index":947,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seamless",{"_index":598,"title":{},"body":{"changelog.html":{}}}],["see",{"_index":480,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["select",{"_index":686,"title":{},"body":{"changelog.html":{}}}],["selector",{"_index":139,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{}}}],["sell",{"_index":909,"title":{},"body":{"license.html":{}}}],["server",{"_index":877,"title":{},"body":{"index.html":{}}}],["set",{"_index":157,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["setelementclass(elm",{"_index":347,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["shall",{"_index":916,"title":{},"body":{"license.html":{}}}],["share",{"_index":61,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["show",{"_index":823,"title":{},"body":{"changelog.html":{}}}],["shown",{"_index":545,"title":{},"body":{"changelog.html":{}}}],["size",{"_index":855,"title":{},"body":{"index.html":{}}}],["snap",{"_index":165,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["snapgrid",{"_index":263,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["snapgrid.i",{"_index":271,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["snapgrid.x",{"_index":266,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["softwar",{"_index":899,"title":{},"body":{"license.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"index.html":{}}}],["specifi",{"_index":796,"title":{},"body":{"changelog.html":{}}}],["src/.../resizable.directive.t",{"_index":829,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/interfaces/bound",{"_index":5,"title":{},"body":{"interfaces/BoundingRectangle.html":{}}}],["src/interfaces/edges.interface.t",{"_index":389,"title":{},"body":{"interfaces/Edges.html":{}}}],["src/interfaces/edges.interface.ts:8",{"_index":391,"title":{},"body":{"interfaces/Edges.html":{}}}],["src/interfaces/res",{"_index":425,"title":{},"body":{"interfaces/ResizeEvent.html":{}}}],["src/resiz",{"_index":428,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["src/resizable.directive.t",{"_index":35,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/resizable.directive.ts:279",{"_index":407,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:284",{"_index":405,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:289",{"_index":401,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:296",{"_index":406,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:301",{"_index":404,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:306",{"_index":403,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:311",{"_index":402,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:316",{"_index":409,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:321",{"_index":410,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:326",{"_index":408,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:774",{"_index":395,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["src/resizable.directive.ts:776",{"_index":396,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["src/resizable.directive.ts:778",{"_index":397,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["src/resizable.directive.ts:782",{"_index":399,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["src/resizable.directive.ts:793",{"_index":393,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["src/resizable.module.t",{"_index":413,"title":{},"body":{"modules/ResizableModule.html":{}}}],["standard",{"_index":481,"title":{},"body":{"changelog.html":{}}}],["start",{"_index":474,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"changelog.html":{},"index.html":{}}}],["startcoords.clienti",{"_index":261,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["startcoords.clientx",{"_index":259,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["startingrect",{"_index":217,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["state",{"_index":628,"title":{},"body":{"changelog.html":{}}}],["static",{"_index":355,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["string",{"_index":24,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/variables.html":{}}}],["style",{"_index":751,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["style[properti",{"_index":87,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["subject",{"_index":49,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"license.html":{}}}],["sublicens",{"_index":907,"title":{},"body":{"license.html":{}}}],["subscrib",{"_index":234,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["subscribe((edg",{"_index":319,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["subscribe((newboundingrect",{"_index":308,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["substanti",{"_index":917,"title":{},"body":{"license.html":{}}}],["suffix",{"_index":508,"title":{},"body":{"changelog.html":{}}}],["support",{"_index":704,"title":{},"body":{"changelog.html":{}}}],["sw",{"_index":946,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sync",{"_index":813,"title":{},"body":{"changelog.html":{}}}],["system.j",{"_index":536,"title":{},"body":{"changelog.html":{}}}],["tabl",{"_index":840,"title":{},"body":{"index.html":{}}}],["take",{"_index":59,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["takeuntil",{"_index":56,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["templat",{"_index":706,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["temporari",{"_index":159,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["test",{"_index":881,"title":{},"body":{"index.html":{}}}],["test:watch",{"_index":883,"title":{},"body":{"index.html":{}}}],["text",{"_index":684,"title":{},"body":{"changelog.html":{}}}],["thick",{"_index":177,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.element.nativeel",{"_index":451,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.elm",{"_index":236,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.elm.nativeel",{"_index":325,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.elm.nativeelement.clonenode(tru",{"_index":323,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.elm.nativeelement.parentelement.appendchild",{"_index":324,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.elm.nativeelement.parentelement.removechild",{"_index":224,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.enableghostres",{"_index":322,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.eventlisteners.mousemov",{"_index":456,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.eventlisteners.touchmov",{"_index":449,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.eventlisteners[typ",{"_index":472,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.ghostelementposit",{"_index":321,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.mousedown",{"_index":254,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.mousedown.complet",{"_index":341,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.mousedown.next",{"_index":209,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.mousemove.complet",{"_index":343,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.mousemove.next",{"_index":212,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.mousemove.pipe(shar",{"_index":228,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.mouseup.complet",{"_index":342,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.mouseup.next",{"_index":215,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.mouseup.subscrib",{"_index":337,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.onmousemov",{"_index":453,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.pointerdown",{"_index":362,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointereventlisten",{"_index":199,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointereventlisteners.pointerdown.subscrib",{"_index":208,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointereventlisteners.pointermove.subscrib",{"_index":211,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointereventlisteners.pointerup.subscrib",{"_index":214,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointereventlistenersubscriptions.pointerdown",{"_index":207,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointereventlistenersubscriptions.pointerdown.unsubscrib",{"_index":344,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointereventlistenersubscriptions.pointermov",{"_index":210,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointereventlistenersubscriptions.pointermove.unsubscrib",{"_index":345,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointereventlistenersubscriptions.pointerup",{"_index":213,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointereventlistenersubscriptions.pointerup.unsubscrib",{"_index":346,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointermov",{"_index":375,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointerup",{"_index":381,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.addclass",{"_index":331,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.addclass(elm.nativeel",{"_index":350,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.listen",{"_index":450,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.renderer.removeclass(elm.nativeel",{"_index":351,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.removeclass(this.elm.nativeel",{"_index":338,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.setstyl",{"_index":309,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.setstyle(document.bodi",{"_index":245,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.setstyle(this.elm.nativeel",{"_index":225,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizable.mousedown.next",{"_index":460,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.resizable.mousemove.next",{"_index":467,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.resizable.mouseup.next",{"_index":465,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.resizecursor",{"_index":242,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizecursorprecis",{"_index":240,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizeedg",{"_index":238,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["this.resizeend.emit",{"_index":339,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizesnapgrid.bottom",{"_index":272,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizesnapgrid.left",{"_index":264,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizesnapgrid.right",{"_index":267,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizesnapgrid.top",{"_index":269,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizestart.emit",{"_index":335,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizing.emit",{"_index":315,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.setelementclass",{"_index":248,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.setelementclass(this.elm",{"_index":247,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.unsubscribeeventlisten",{"_index":444,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.validateres",{"_index":303,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.zone.run",{"_index":314,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.zone.runoutsideangular",{"_index":448,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["throttl",{"_index":60,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["through",{"_index":846,"title":{},"body":{"index.html":{}}}],["time",{"_index":808,"title":{},"body":{"changelog.html":{}}}],["todo",{"_index":203,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["top",{"_index":21,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["topleft",{"_index":422,"title":{},"body":{"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["toporbottom",{"_index":423,"title":{},"body":{"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["topright",{"_index":424,"title":{},"body":{"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["tort",{"_index":936,"title":{},"body":{"license.html":{}}}],["touch",{"_index":647,"title":{},"body":{"changelog.html":{}}}],["touchcancel",{"_index":388,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["touchend",{"_index":385,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["touchend(clientx",{"_index":439,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["touchev",{"_index":75,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["touchmov",{"_index":378,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["touchmoveev",{"_index":452,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["touchmoveevent.targettouches[0].clienti",{"_index":455,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["touchmoveevent.targettouches[0].clientx",{"_index":454,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["touchstart",{"_index":371,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["touchstart(ev",{"_index":441,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["transform",{"_index":90,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["transform.includes('transl",{"_index":91,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["transform.replace(/.*translate\\((.*)px",{"_index":93,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["translatex",{"_index":92,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["translatey",{"_index":96,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["trigger",{"_index":390,"title":{},"body":{"interfaces/Edges.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["true",{"_index":147,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["tslint:dis",{"_index":357,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["type",{"_index":30,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["typescript",{"_index":817,"title":{},"body":{"changelog.html":{}}}],["ui",{"_index":814,"title":{},"body":{"changelog.html":{}}}],["umd",{"_index":529,"title":{},"body":{"changelog.html":{}}}],["uncancel",{"_index":811,"title":{},"body":{"changelog.html":{}}}],["undefin",{"_index":27,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Edges.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{}}}],["univers",{"_index":634,"title":{},"body":{"changelog.html":{}}}],["unsubscrib",{"_index":667,"title":{},"body":{"changelog.html":{}}}],["unsubscribeeventlisten",{"_index":468,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["unsubscribemousedown",{"_index":363,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["unsubscribemousemov",{"_index":376,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["unsubscribemouseup",{"_index":382,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["unsubscribetouchcancel",{"_index":384,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["unsubscribetouchend",{"_index":383,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["unsubscribetouchmov",{"_index":377,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["unsubscribetouchstart",{"_index":364,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["up",{"_index":764,"title":{},"body":{"changelog.html":{}}}],["updat",{"_index":539,"title":{},"body":{"changelog.html":{}}}],["upgrad",{"_index":495,"title":{},"body":{"changelog.html":{}}}],["us",{"_index":204,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["user",{"_index":537,"title":{},"body":{"changelog.html":{}}}],["valid",{"_index":763,"title":{},"body":{"changelog.html":{}}}],["validateres",{"_index":152,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["valu",{"_index":89,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["value1",{"_index":78,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["value2",{"_index":79,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["variabl",{"_index":942,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":482,"title":{},"body":{"changelog.html":{}}}],["via",{"_index":681,"title":{},"body":{"changelog.html":{}}}],["view",{"_index":864,"title":{},"body":{"index.html":{}}}],["visibl",{"_index":226,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["void",{"_index":202,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"index.html":{}}}],["w",{"_index":765,"title":{},"body":{"changelog.html":{}}}],["warn",{"_index":614,"title":{},"body":{"changelog.html":{}}}],["warranti",{"_index":919,"title":{},"body":{"license.html":{}}}],["way",{"_index":791,"title":{},"body":{"changelog.html":{}}}],["webkit",{"_index":772,"title":{},"body":{"changelog.html":{}}}],["whether",{"_index":933,"title":{},"body":{"license.html":{}}}],["width",{"_index":22,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["wip",{"_index":821,"title":{},"body":{"changelog.html":{}}}],["within",{"_index":578,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["without",{"_index":902,"title":{},"body":{"license.html":{}}}],["work",{"_index":857,"title":{},"body":{"index.html":{}}}],["x",{"_index":36,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["y",{"_index":37,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["yourself",{"_index":526,"title":{},"body":{"changelog.html":{}}}],["zone",{"_index":198,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["zone.runoutsideangular",{"_index":365,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/BoundingRectangle.html":{"url":"interfaces/BoundingRectangle.html","title":"interface - BoundingRectangle","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BoundingRectangle\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interfaces/bounding-rectangle.interface.ts\n        \n\n            \n                Description\n            \n            \n                The bounding rectangle of the resized element\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        bottom\n                                \n                                \n                                            Optional\n                                        height\n                                \n                                \n                                        left\n                                \n                                \n                                        right\n                                \n                                \n                                            Optional\n                                        scrollLeft\n                                \n                                \n                                            Optional\n                                        scrollTop\n                                \n                                \n                                        top\n                                \n                                \n                                            Optional\n                                        width\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    number | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/interfaces/bounding-rectangle.interface.ts:12\n                            \n                        \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bottom\n                                    \n                                \n                                \n                                    \n                                        bottom:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                    \n                                \n                                \n                                    \n                                        height:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        left\n                                    \n                                \n                                \n                                    \n                                        left:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        right\n                                    \n                                \n                                \n                                    \n                                        right:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scrollLeft\n                                    \n                                \n                                \n                                    \n                                        scrollLeft:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scrollTop\n                                    \n                                \n                                \n                                    \n                                        scrollTop:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        top\n                                    \n                                \n                                \n                                    \n                                        top:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                    \n                                \n                                \n                                    \n                                        width:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface BoundingRectangle {\n  top: number;\n  bottom: number;\n  left: number;\n  right: number;\n  height?: number;\n  width?: number;\n  scrollTop?: number;\n  scrollLeft?: number;\n  [key: string]: number | undefined;\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Coordinate.html":{"url":"interfaces/Coordinate.html","title":"interface - Coordinate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Coordinate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resizable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  NgZone\n} from '@angular/core';\nimport { Subject, Observable, Observer, merge, interval } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  filter,\n  pairwise,\n  take,\n  throttle,\n  share\n} from 'rxjs/operators';\nimport { Edges } from './interfaces/edges.interface';\nimport { BoundingRectangle } from './interfaces/bounding-rectangle.interface';\nimport { ResizeEvent } from './interfaces/resize-event.interface';\n\ninterface PointerEventCoordinate {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\ninterface Coordinate {\n  x: number;\n  y: number;\n}\n\nfunction isNumberCloseTo(\n  value1: number,\n  value2: number,\n  precision: number = 3\n): boolean {\n  const diff: number = Math.abs(value1 - value2);\n  return diff  style[property])\n    .find(value => !!value);\n  if (transform && transform.includes('translate')) {\n    translateX = transform.replace(/.*translate\\((.*)px, (.*)px\\).*/, '$1');\n    translateY = transform.replace(/.*translate\\((.*)px, (.*)px\\).*/, '$2');\n  }\n\n  if (ghostElementPositioning === 'absolute') {\n    return {\n      height: element.nativeElement.offsetHeight,\n      width: element.nativeElement.offsetWidth,\n      top: element.nativeElement.offsetTop - translateY,\n      bottom:\n        element.nativeElement.offsetHeight +\n        element.nativeElement.offsetTop -\n        translateY,\n      left: element.nativeElement.offsetLeft - translateX,\n      right:\n        element.nativeElement.offsetWidth +\n        element.nativeElement.offsetLeft -\n        translateX\n    };\n  } else {\n    const boundingRect: BoundingRectangle = element.nativeElement.getBoundingClientRect();\n    return {\n      height: boundingRect.height,\n      width: boundingRect.width,\n      top: boundingRect.top - translateY,\n      bottom: boundingRect.bottom - translateY,\n      left: boundingRect.left - translateX,\n      right: boundingRect.right - translateX,\n      scrollTop: element.nativeElement.scrollTop,\n      scrollLeft: element.nativeElement.scrollLeft\n    };\n  }\n}\n\nfunction isWithinBoundingY({\n  clientY,\n  rect\n}: {\n  clientY: number;\n  rect: ClientRect;\n}): boolean {\n  return clientY >= rect.top && clientY = rect.left && clientX  {\n    edgesDiff[edge] = (newRectangle[edge] || 0) - (initialRectangle[edge] || 0);\n  });\n  return edgesDiff;\n}\n\nconst RESIZE_ACTIVE_CLASS: string = 'resize-active';\nconst RESIZE_LEFT_HOVER_CLASS: string = 'resize-left-hover';\nconst RESIZE_RIGHT_HOVER_CLASS: string = 'resize-right-hover';\nconst RESIZE_TOP_HOVER_CLASS: string = 'resize-top-hover';\nconst RESIZE_BOTTOM_HOVER_CLASS: string = 'resize-bottom-hover';\nconst RESIZE_GHOST_ELEMENT_CLASS: string = 'resize-ghost-element';\n\nexport const MOUSE_MOVE_THROTTLE_MS: number = 50;\n\n/**\n * Place this on an element to make it resizable. For example:\n *\n * ```html\n * \n * \n * ```\n */\n@Directive({\n  selector: '[mwlResizable]'\n})\nexport class ResizableDirective implements OnInit, OnDestroy {\n  /**\n   * A function that will be called before each resize event. Return `true` to allow the resize event to propagate or `false` to cancel it\n   */\n  @Input() validateResize: (resizeEvent: ResizeEvent) => boolean;\n\n  /**\n   * The edges that an element can be resized from. Pass an object like `{top: true, bottom: false}`. By default no edges can be resized.\n   */\n  @Input() resizeEdges: Edges = {};\n\n  /**\n   * Set to `true` to enable a temporary resizing effect of the element in between the `resizeStart` and `resizeEnd` events.\n   */\n  @Input() enableGhostResize: boolean = false;\n\n  /**\n   * A snap grid that resize events will be locked to.\n   *\n   * e.g. to only allow the element to be resized every 10px set it to `{left: 10, right: 10}`\n   */\n  @Input() resizeSnapGrid: Edges = {};\n\n  /**\n   * The mouse cursors that will be set on the resize edges\n   */\n  @Input() resizeCursors: ResizeCursors = DEFAULT_RESIZE_CURSORS;\n\n  /**\n   * Mouse over thickness to active cursor.\n   */\n  @Input() resizeCursorPrecision: number = 3;\n\n  /**\n   * Define the positioning of the ghost element (can be fixed or absolute)\n   */\n  @Input() ghostElementPositioning: 'fixed' | 'absolute' = 'fixed';\n\n  /**\n   * Called when the mouse is pressed and a resize event is about to begin. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeStart = new EventEmitter();\n\n  /**\n   * Called as the mouse is dragged after a resize event has begun. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizing = new EventEmitter();\n\n  /**\n   * Called after the mouse is released after a resize event. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  public mouseup = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousedown = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousemove = new Subject();\n\n  private pointerEventListeners: PointerEventListeners;\n\n  private pointerEventListenerSubscriptions: any = {};\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private renderer: Renderer2,\n    public elm: ElementRef,\n    private zone: NgZone\n  ) {\n    this.pointerEventListeners = PointerEventListeners.getInstance(\n      renderer,\n      zone\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    // TODO - use some fancy Observable.merge's for this\n    this.pointerEventListenerSubscriptions.pointerDown = this.pointerEventListeners.pointerDown.subscribe(\n      ({ clientX, clientY }) => {\n        this.mousedown.next({ clientX, clientY });\n      }\n    );\n\n    this.pointerEventListenerSubscriptions.pointerMove = this.pointerEventListeners.pointerMove.subscribe(\n      ({ clientX, clientY, event }) => {\n        this.mousemove.next({ clientX, clientY, event });\n      }\n    );\n\n    this.pointerEventListenerSubscriptions.pointerUp = this.pointerEventListeners.pointerUp.subscribe(\n      ({ clientX, clientY }) => {\n        this.mouseup.next({ clientX, clientY });\n      }\n    );\n\n    let currentResize: {\n      edges: Edges;\n      startingRect: BoundingRectangle;\n      currentRect: BoundingRectangle;\n      clonedNode?: HTMLElement;\n    } | null;\n\n    const removeGhostElement = () => {\n      if (currentResize && currentResize.clonedNode) {\n        this.elm.nativeElement.parentElement.removeChild(\n          currentResize.clonedNode\n        );\n        this.renderer.setStyle(this.elm.nativeElement, 'visibility', 'inherit');\n      }\n    };\n\n    const mouseMove: Observable = this.mousemove.pipe(share());\n\n    mouseMove.pipe(filter(() => !!currentResize)).subscribe(({ event }) => {\n      event.preventDefault();\n    });\n\n    mouseMove\n      .pipe(throttle(() => interval(MOUSE_MOVE_THROTTLE_MS)))\n      .subscribe(({ clientX, clientY }) => {\n        const resizeEdges: Edges = getResizeEdges({\n          clientX,\n          clientY,\n          elm: this.elm,\n          allowedEdges: this.resizeEdges,\n          cursorPrecision: this.resizeCursorPrecision\n        });\n        const resizeCursors: ResizeCursors = Object.assign(\n          {},\n          DEFAULT_RESIZE_CURSORS,\n          this.resizeCursors\n        );\n        if (currentResize) {\n          const cursor: string = getResizeCursor(\n            currentResize.edges,\n            resizeCursors\n          );\n          this.renderer.setStyle(document.body, 'cursor', cursor);\n        } else {\n          const cursor: string = getResizeCursor(resizeEdges, resizeCursors);\n          this.renderer.setStyle(this.elm.nativeElement, 'cursor', cursor);\n        }\n        this.setElementClass(this.elm, RESIZE_ACTIVE_CLASS, !!currentResize);\n        this.setElementClass(\n          this.elm,\n          RESIZE_LEFT_HOVER_CLASS,\n          resizeEdges.left === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_RIGHT_HOVER_CLASS,\n          resizeEdges.right === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_TOP_HOVER_CLASS,\n          resizeEdges.top === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_BOTTOM_HOVER_CLASS,\n          resizeEdges.bottom === true\n        );\n      });\n\n    const mousedrag: Observable = this.mousedown\n      .pipe(\n        mergeMap(startCoords => {\n          function getDiff(moveCoords: { clientX: number; clientY: number }) {\n            return {\n              clientX: moveCoords.clientX - startCoords.clientX,\n              clientY: moveCoords.clientY - startCoords.clientY\n            };\n          }\n\n          const getSnapGrid = () => {\n            const snapGrid: Coordinate = { x: 1, y: 1 };\n\n            if (currentResize) {\n              if (this.resizeSnapGrid.left && currentResize.edges.left) {\n                snapGrid.x = +this.resizeSnapGrid.left;\n              } else if (\n                this.resizeSnapGrid.right &&\n                currentResize.edges.right\n              ) {\n                snapGrid.x = +this.resizeSnapGrid.right;\n              }\n\n              if (this.resizeSnapGrid.top && currentResize.edges.top) {\n                snapGrid.y = +this.resizeSnapGrid.top;\n              } else if (\n                this.resizeSnapGrid.bottom &&\n                currentResize.edges.bottom\n              ) {\n                snapGrid.y = +this.resizeSnapGrid.bottom;\n              }\n            }\n\n            return snapGrid;\n          };\n\n          function getGrid(\n            coords: { clientX: number; clientY: number },\n            snapGrid: Coordinate\n          ) {\n            return {\n              x: Math.ceil(coords.clientX / snapGrid.x),\n              y: Math.ceil(coords.clientY / snapGrid.y)\n            };\n          }\n\n          return merge(\n            mouseMove.pipe(take(1)).pipe(map(coords => [, coords])),\n            mouseMove.pipe(pairwise())\n          )\n            .pipe(\n              map(([previousCoords, newCoords]) => {\n                return [\n                  previousCoords ? getDiff(previousCoords) : previousCoords,\n                  getDiff(newCoords)\n                ];\n              })\n            )\n            .pipe(\n              filter(([previousCoords, newCoords]) => {\n                if (!previousCoords) {\n                  return true;\n                }\n\n                const snapGrid: Coordinate = getSnapGrid();\n                const previousGrid: Coordinate = getGrid(\n                  previousCoords,\n                  snapGrid\n                );\n                const newGrid: Coordinate = getGrid(newCoords, snapGrid);\n\n                return (\n                  previousGrid.x !== newGrid.x || previousGrid.y !== newGrid.y\n                );\n              })\n            )\n            .pipe(\n              map(([, newCoords]) => {\n                const snapGrid: Coordinate = getSnapGrid();\n                return {\n                  clientX:\n                    Math.round(newCoords.clientX / snapGrid.x) * snapGrid.x,\n                  clientY:\n                    Math.round(newCoords.clientY / snapGrid.y) * snapGrid.y\n                };\n              })\n            )\n            .pipe(takeUntil(merge(this.mouseup, this.mousedown)));\n        })\n      )\n      .pipe(filter(() => !!currentResize));\n\n    mousedrag\n      .pipe(\n        map(({ clientX, clientY }) => {\n          return getNewBoundingRectangle(\n            currentResize!.startingRect,\n            currentResize!.edges,\n            clientX,\n            clientY\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return !!(\n            newBoundingRect.height &&\n            newBoundingRect.width &&\n            newBoundingRect.height > 0 &&\n            newBoundingRect.width > 0\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return this.validateResize\n            ? this.validateResize({\n                rectangle: newBoundingRect,\n                edges: getEdgesDiff({\n                  edges: currentResize!.edges,\n                  initialRectangle: currentResize!.startingRect,\n                  newRectangle: newBoundingRect\n                })\n              })\n            : true;\n        })\n      )\n      .subscribe((newBoundingRect: BoundingRectangle) => {\n        if (currentResize && currentResize.clonedNode) {\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${newBoundingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${newBoundingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${newBoundingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${newBoundingRect.left}px`\n          );\n        }\n\n        this.zone.run(() => {\n          this.resizing.emit({\n            edges: getEdgesDiff({\n              edges: currentResize!.edges,\n              initialRectangle: currentResize!.startingRect,\n              newRectangle: newBoundingRect\n            }),\n            rectangle: newBoundingRect\n          });\n        });\n\n        currentResize!.currentRect = newBoundingRect;\n      });\n\n    this.mousedown\n      .pipe(\n        map(({ clientX, clientY, edges }) => {\n          return (\n            edges ||\n            getResizeEdges({\n              clientX,\n              clientY,\n              elm: this.elm,\n              allowedEdges: this.resizeEdges,\n              cursorPrecision: this.resizeCursorPrecision\n            })\n          );\n        })\n      )\n      .pipe(\n        filter((edges: Edges) => {\n          return Object.keys(edges).length > 0;\n        })\n      )\n      .subscribe((edges: Edges) => {\n        if (currentResize) {\n          removeGhostElement();\n        }\n        const startingRect: BoundingRectangle = getElementRect(\n          this.elm,\n          this.ghostElementPositioning\n        );\n        currentResize = {\n          edges,\n          startingRect,\n          currentRect: startingRect\n        };\n        if (this.enableGhostResize) {\n          currentResize.clonedNode = this.elm.nativeElement.cloneNode(true);\n          const resizeCursors: ResizeCursors = Object.assign(\n            {},\n            DEFAULT_RESIZE_CURSORS,\n            this.resizeCursors\n          );\n          this.elm.nativeElement.parentElement.appendChild(\n            currentResize.clonedNode\n          );\n          this.renderer.setStyle(\n            this.elm.nativeElement,\n            'visibility',\n            'hidden'\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'position',\n            this.ghostElementPositioning\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${currentResize.startingRect.left}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${currentResize.startingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${currentResize.startingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${currentResize.startingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'cursor',\n            getResizeCursor(currentResize.edges, resizeCursors)\n          );\n          this.renderer.addClass(\n            currentResize.clonedNode,\n            RESIZE_GHOST_ELEMENT_CLASS\n          );\n          currentResize.clonedNode!.scrollTop = currentResize.startingRect\n            .scrollTop as number;\n          currentResize.clonedNode!.scrollLeft = currentResize.startingRect\n            .scrollLeft as number;\n        }\n        this.zone.run(() => {\n          this.resizeStart.emit({\n            edges: getEdgesDiff({\n              edges,\n              initialRectangle: startingRect,\n              newRectangle: startingRect\n            }),\n            rectangle: getNewBoundingRectangle(startingRect, {}, 0, 0)\n          });\n        });\n      });\n\n    this.mouseup.subscribe(() => {\n      if (currentResize) {\n        this.renderer.removeClass(this.elm.nativeElement, RESIZE_ACTIVE_CLASS);\n        this.renderer.setStyle(document.body, 'cursor', '');\n        this.renderer.setStyle(this.elm.nativeElement, 'cursor', '');\n        this.zone.run(() => {\n          this.resizeEnd.emit({\n            edges: getEdgesDiff({\n              edges: currentResize!.edges,\n              initialRectangle: currentResize!.startingRect,\n              newRectangle: currentResize!.currentRect\n            }),\n            rectangle: currentResize!.currentRect\n          });\n        });\n        removeGhostElement();\n        currentResize = null;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    this.mousedown.complete();\n    this.mouseup.complete();\n    this.mousemove.complete();\n    this.pointerEventListenerSubscriptions.pointerDown.unsubscribe();\n    this.pointerEventListenerSubscriptions.pointerMove.unsubscribe();\n    this.pointerEventListenerSubscriptions.pointerUp.unsubscribe();\n  }\n\n  private setElementClass(elm: ElementRef, name: string, add: boolean): void {\n    if (add) {\n      this.renderer.addClass(elm.nativeElement, name);\n    } else {\n      this.renderer.removeClass(elm.nativeElement, name);\n    }\n  }\n}\n\nclass PointerEventListeners {\n  public pointerDown: Observable;\n\n  public pointerMove: Observable;\n\n  public pointerUp: Observable;\n\n  private static instance: PointerEventListeners; // tslint:disable-line\n\n  public static getInstance(\n    renderer: Renderer2,\n    zone: NgZone\n  ): PointerEventListeners {\n    if (!PointerEventListeners.instance) {\n      PointerEventListeners.instance = new PointerEventListeners(\n        renderer,\n        zone\n      );\n    }\n    return PointerEventListeners.instance;\n  }\n\n  constructor(renderer: Renderer2, zone: NgZone) {\n    this.pointerDown = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseDown: () => void;\n        let unsubscribeTouchStart: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseDown = renderer.listen(\n            'document',\n            'mousedown',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchStart = renderer.listen(\n            'document',\n            'touchstart',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.touches[0].clientX,\n                clientY: event.touches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseDown();\n          unsubscribeTouchStart();\n        };\n      }\n    ).pipe(share());\n\n    this.pointerMove = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseMove: () => void;\n        let unsubscribeTouchMove: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseMove = renderer.listen(\n            'document',\n            'mousemove',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchMove = renderer.listen(\n            'document',\n            'touchmove',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.targetTouches[0].clientX,\n                clientY: event.targetTouches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseMove();\n          unsubscribeTouchMove();\n        };\n      }\n    ).pipe(share());\n\n    this.pointerUp = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseUp: () => void;\n        let unsubscribeTouchEnd: () => void;\n        let unsubscribeTouchCancel: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseUp = renderer.listen(\n            'document',\n            'mouseup',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchEnd = renderer.listen(\n            'document',\n            'touchend',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.changedTouches[0].clientX,\n                clientY: event.changedTouches[0].clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchCancel = renderer.listen(\n            'document',\n            'touchcancel',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.changedTouches[0].clientX,\n                clientY: event.changedTouches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseUp();\n          unsubscribeTouchEnd();\n          unsubscribeTouchCancel();\n        };\n      }\n    ).pipe(share());\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Edges.html":{"url":"interfaces/Edges.html","title":"interface - Edges","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Edges\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interfaces/edges.interface.ts\n        \n\n            \n                Description\n            \n            \n                The edges that the resize event were triggered on\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        bottom\n                                \n                                \n                                            Optional\n                                        left\n                                \n                                \n                                            Optional\n                                        right\n                                \n                                \n                                            Optional\n                                        top\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    boolean | number | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/interfaces/edges.interface.ts:8\n                            \n                        \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bottom\n                                    \n                                \n                                \n                                    \n                                        bottom:     boolean | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        left\n                                    \n                                \n                                \n                                    \n                                        left:     boolean | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        right\n                                    \n                                \n                                \n                                    \n                                        right:     boolean | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        top\n                                    \n                                \n                                \n                                    \n                                        top:     boolean | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Edges {\n  top?: boolean | number;\n  bottom?: boolean | number;\n  left?: boolean | number;\n  right?: boolean | number;\n  [key: string]: boolean | number | undefined;\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PointerEventCoordinate.html":{"url":"interfaces/PointerEventCoordinate.html","title":"interface - PointerEventCoordinate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PointerEventCoordinate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resizable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        clientX\n                                \n                                \n                                        clientY\n                                \n                                \n                                        event\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clientX\n                                    \n                                \n                                \n                                    \n                                        clientX:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        clientY\n                                    \n                                \n                                \n                                    \n                                        clientY:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        event\n                                    \n                                \n                                \n                                    \n                                        event:     MouseEvent | TouchEvent\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MouseEvent | TouchEvent\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  NgZone\n} from '@angular/core';\nimport { Subject, Observable, Observer, merge, interval } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  filter,\n  pairwise,\n  take,\n  throttle,\n  share\n} from 'rxjs/operators';\nimport { Edges } from './interfaces/edges.interface';\nimport { BoundingRectangle } from './interfaces/bounding-rectangle.interface';\nimport { ResizeEvent } from './interfaces/resize-event.interface';\n\ninterface PointerEventCoordinate {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\ninterface Coordinate {\n  x: number;\n  y: number;\n}\n\nfunction isNumberCloseTo(\n  value1: number,\n  value2: number,\n  precision: number = 3\n): boolean {\n  const diff: number = Math.abs(value1 - value2);\n  return diff  style[property])\n    .find(value => !!value);\n  if (transform && transform.includes('translate')) {\n    translateX = transform.replace(/.*translate\\((.*)px, (.*)px\\).*/, '$1');\n    translateY = transform.replace(/.*translate\\((.*)px, (.*)px\\).*/, '$2');\n  }\n\n  if (ghostElementPositioning === 'absolute') {\n    return {\n      height: element.nativeElement.offsetHeight,\n      width: element.nativeElement.offsetWidth,\n      top: element.nativeElement.offsetTop - translateY,\n      bottom:\n        element.nativeElement.offsetHeight +\n        element.nativeElement.offsetTop -\n        translateY,\n      left: element.nativeElement.offsetLeft - translateX,\n      right:\n        element.nativeElement.offsetWidth +\n        element.nativeElement.offsetLeft -\n        translateX\n    };\n  } else {\n    const boundingRect: BoundingRectangle = element.nativeElement.getBoundingClientRect();\n    return {\n      height: boundingRect.height,\n      width: boundingRect.width,\n      top: boundingRect.top - translateY,\n      bottom: boundingRect.bottom - translateY,\n      left: boundingRect.left - translateX,\n      right: boundingRect.right - translateX,\n      scrollTop: element.nativeElement.scrollTop,\n      scrollLeft: element.nativeElement.scrollLeft\n    };\n  }\n}\n\nfunction isWithinBoundingY({\n  clientY,\n  rect\n}: {\n  clientY: number;\n  rect: ClientRect;\n}): boolean {\n  return clientY >= rect.top && clientY = rect.left && clientX  {\n    edgesDiff[edge] = (newRectangle[edge] || 0) - (initialRectangle[edge] || 0);\n  });\n  return edgesDiff;\n}\n\nconst RESIZE_ACTIVE_CLASS: string = 'resize-active';\nconst RESIZE_LEFT_HOVER_CLASS: string = 'resize-left-hover';\nconst RESIZE_RIGHT_HOVER_CLASS: string = 'resize-right-hover';\nconst RESIZE_TOP_HOVER_CLASS: string = 'resize-top-hover';\nconst RESIZE_BOTTOM_HOVER_CLASS: string = 'resize-bottom-hover';\nconst RESIZE_GHOST_ELEMENT_CLASS: string = 'resize-ghost-element';\n\nexport const MOUSE_MOVE_THROTTLE_MS: number = 50;\n\n/**\n * Place this on an element to make it resizable. For example:\n *\n * ```html\n * \n * \n * ```\n */\n@Directive({\n  selector: '[mwlResizable]'\n})\nexport class ResizableDirective implements OnInit, OnDestroy {\n  /**\n   * A function that will be called before each resize event. Return `true` to allow the resize event to propagate or `false` to cancel it\n   */\n  @Input() validateResize: (resizeEvent: ResizeEvent) => boolean;\n\n  /**\n   * The edges that an element can be resized from. Pass an object like `{top: true, bottom: false}`. By default no edges can be resized.\n   */\n  @Input() resizeEdges: Edges = {};\n\n  /**\n   * Set to `true` to enable a temporary resizing effect of the element in between the `resizeStart` and `resizeEnd` events.\n   */\n  @Input() enableGhostResize: boolean = false;\n\n  /**\n   * A snap grid that resize events will be locked to.\n   *\n   * e.g. to only allow the element to be resized every 10px set it to `{left: 10, right: 10}`\n   */\n  @Input() resizeSnapGrid: Edges = {};\n\n  /**\n   * The mouse cursors that will be set on the resize edges\n   */\n  @Input() resizeCursors: ResizeCursors = DEFAULT_RESIZE_CURSORS;\n\n  /**\n   * Mouse over thickness to active cursor.\n   */\n  @Input() resizeCursorPrecision: number = 3;\n\n  /**\n   * Define the positioning of the ghost element (can be fixed or absolute)\n   */\n  @Input() ghostElementPositioning: 'fixed' | 'absolute' = 'fixed';\n\n  /**\n   * Called when the mouse is pressed and a resize event is about to begin. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeStart = new EventEmitter();\n\n  /**\n   * Called as the mouse is dragged after a resize event has begun. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizing = new EventEmitter();\n\n  /**\n   * Called after the mouse is released after a resize event. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  public mouseup = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousedown = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousemove = new Subject();\n\n  private pointerEventListeners: PointerEventListeners;\n\n  private pointerEventListenerSubscriptions: any = {};\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private renderer: Renderer2,\n    public elm: ElementRef,\n    private zone: NgZone\n  ) {\n    this.pointerEventListeners = PointerEventListeners.getInstance(\n      renderer,\n      zone\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    // TODO - use some fancy Observable.merge's for this\n    this.pointerEventListenerSubscriptions.pointerDown = this.pointerEventListeners.pointerDown.subscribe(\n      ({ clientX, clientY }) => {\n        this.mousedown.next({ clientX, clientY });\n      }\n    );\n\n    this.pointerEventListenerSubscriptions.pointerMove = this.pointerEventListeners.pointerMove.subscribe(\n      ({ clientX, clientY, event }) => {\n        this.mousemove.next({ clientX, clientY, event });\n      }\n    );\n\n    this.pointerEventListenerSubscriptions.pointerUp = this.pointerEventListeners.pointerUp.subscribe(\n      ({ clientX, clientY }) => {\n        this.mouseup.next({ clientX, clientY });\n      }\n    );\n\n    let currentResize: {\n      edges: Edges;\n      startingRect: BoundingRectangle;\n      currentRect: BoundingRectangle;\n      clonedNode?: HTMLElement;\n    } | null;\n\n    const removeGhostElement = () => {\n      if (currentResize && currentResize.clonedNode) {\n        this.elm.nativeElement.parentElement.removeChild(\n          currentResize.clonedNode\n        );\n        this.renderer.setStyle(this.elm.nativeElement, 'visibility', 'inherit');\n      }\n    };\n\n    const mouseMove: Observable = this.mousemove.pipe(share());\n\n    mouseMove.pipe(filter(() => !!currentResize)).subscribe(({ event }) => {\n      event.preventDefault();\n    });\n\n    mouseMove\n      .pipe(throttle(() => interval(MOUSE_MOVE_THROTTLE_MS)))\n      .subscribe(({ clientX, clientY }) => {\n        const resizeEdges: Edges = getResizeEdges({\n          clientX,\n          clientY,\n          elm: this.elm,\n          allowedEdges: this.resizeEdges,\n          cursorPrecision: this.resizeCursorPrecision\n        });\n        const resizeCursors: ResizeCursors = Object.assign(\n          {},\n          DEFAULT_RESIZE_CURSORS,\n          this.resizeCursors\n        );\n        if (currentResize) {\n          const cursor: string = getResizeCursor(\n            currentResize.edges,\n            resizeCursors\n          );\n          this.renderer.setStyle(document.body, 'cursor', cursor);\n        } else {\n          const cursor: string = getResizeCursor(resizeEdges, resizeCursors);\n          this.renderer.setStyle(this.elm.nativeElement, 'cursor', cursor);\n        }\n        this.setElementClass(this.elm, RESIZE_ACTIVE_CLASS, !!currentResize);\n        this.setElementClass(\n          this.elm,\n          RESIZE_LEFT_HOVER_CLASS,\n          resizeEdges.left === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_RIGHT_HOVER_CLASS,\n          resizeEdges.right === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_TOP_HOVER_CLASS,\n          resizeEdges.top === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_BOTTOM_HOVER_CLASS,\n          resizeEdges.bottom === true\n        );\n      });\n\n    const mousedrag: Observable = this.mousedown\n      .pipe(\n        mergeMap(startCoords => {\n          function getDiff(moveCoords: { clientX: number; clientY: number }) {\n            return {\n              clientX: moveCoords.clientX - startCoords.clientX,\n              clientY: moveCoords.clientY - startCoords.clientY\n            };\n          }\n\n          const getSnapGrid = () => {\n            const snapGrid: Coordinate = { x: 1, y: 1 };\n\n            if (currentResize) {\n              if (this.resizeSnapGrid.left && currentResize.edges.left) {\n                snapGrid.x = +this.resizeSnapGrid.left;\n              } else if (\n                this.resizeSnapGrid.right &&\n                currentResize.edges.right\n              ) {\n                snapGrid.x = +this.resizeSnapGrid.right;\n              }\n\n              if (this.resizeSnapGrid.top && currentResize.edges.top) {\n                snapGrid.y = +this.resizeSnapGrid.top;\n              } else if (\n                this.resizeSnapGrid.bottom &&\n                currentResize.edges.bottom\n              ) {\n                snapGrid.y = +this.resizeSnapGrid.bottom;\n              }\n            }\n\n            return snapGrid;\n          };\n\n          function getGrid(\n            coords: { clientX: number; clientY: number },\n            snapGrid: Coordinate\n          ) {\n            return {\n              x: Math.ceil(coords.clientX / snapGrid.x),\n              y: Math.ceil(coords.clientY / snapGrid.y)\n            };\n          }\n\n          return merge(\n            mouseMove.pipe(take(1)).pipe(map(coords => [, coords])),\n            mouseMove.pipe(pairwise())\n          )\n            .pipe(\n              map(([previousCoords, newCoords]) => {\n                return [\n                  previousCoords ? getDiff(previousCoords) : previousCoords,\n                  getDiff(newCoords)\n                ];\n              })\n            )\n            .pipe(\n              filter(([previousCoords, newCoords]) => {\n                if (!previousCoords) {\n                  return true;\n                }\n\n                const snapGrid: Coordinate = getSnapGrid();\n                const previousGrid: Coordinate = getGrid(\n                  previousCoords,\n                  snapGrid\n                );\n                const newGrid: Coordinate = getGrid(newCoords, snapGrid);\n\n                return (\n                  previousGrid.x !== newGrid.x || previousGrid.y !== newGrid.y\n                );\n              })\n            )\n            .pipe(\n              map(([, newCoords]) => {\n                const snapGrid: Coordinate = getSnapGrid();\n                return {\n                  clientX:\n                    Math.round(newCoords.clientX / snapGrid.x) * snapGrid.x,\n                  clientY:\n                    Math.round(newCoords.clientY / snapGrid.y) * snapGrid.y\n                };\n              })\n            )\n            .pipe(takeUntil(merge(this.mouseup, this.mousedown)));\n        })\n      )\n      .pipe(filter(() => !!currentResize));\n\n    mousedrag\n      .pipe(\n        map(({ clientX, clientY }) => {\n          return getNewBoundingRectangle(\n            currentResize!.startingRect,\n            currentResize!.edges,\n            clientX,\n            clientY\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return !!(\n            newBoundingRect.height &&\n            newBoundingRect.width &&\n            newBoundingRect.height > 0 &&\n            newBoundingRect.width > 0\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return this.validateResize\n            ? this.validateResize({\n                rectangle: newBoundingRect,\n                edges: getEdgesDiff({\n                  edges: currentResize!.edges,\n                  initialRectangle: currentResize!.startingRect,\n                  newRectangle: newBoundingRect\n                })\n              })\n            : true;\n        })\n      )\n      .subscribe((newBoundingRect: BoundingRectangle) => {\n        if (currentResize && currentResize.clonedNode) {\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${newBoundingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${newBoundingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${newBoundingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${newBoundingRect.left}px`\n          );\n        }\n\n        this.zone.run(() => {\n          this.resizing.emit({\n            edges: getEdgesDiff({\n              edges: currentResize!.edges,\n              initialRectangle: currentResize!.startingRect,\n              newRectangle: newBoundingRect\n            }),\n            rectangle: newBoundingRect\n          });\n        });\n\n        currentResize!.currentRect = newBoundingRect;\n      });\n\n    this.mousedown\n      .pipe(\n        map(({ clientX, clientY, edges }) => {\n          return (\n            edges ||\n            getResizeEdges({\n              clientX,\n              clientY,\n              elm: this.elm,\n              allowedEdges: this.resizeEdges,\n              cursorPrecision: this.resizeCursorPrecision\n            })\n          );\n        })\n      )\n      .pipe(\n        filter((edges: Edges) => {\n          return Object.keys(edges).length > 0;\n        })\n      )\n      .subscribe((edges: Edges) => {\n        if (currentResize) {\n          removeGhostElement();\n        }\n        const startingRect: BoundingRectangle = getElementRect(\n          this.elm,\n          this.ghostElementPositioning\n        );\n        currentResize = {\n          edges,\n          startingRect,\n          currentRect: startingRect\n        };\n        if (this.enableGhostResize) {\n          currentResize.clonedNode = this.elm.nativeElement.cloneNode(true);\n          const resizeCursors: ResizeCursors = Object.assign(\n            {},\n            DEFAULT_RESIZE_CURSORS,\n            this.resizeCursors\n          );\n          this.elm.nativeElement.parentElement.appendChild(\n            currentResize.clonedNode\n          );\n          this.renderer.setStyle(\n            this.elm.nativeElement,\n            'visibility',\n            'hidden'\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'position',\n            this.ghostElementPositioning\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${currentResize.startingRect.left}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${currentResize.startingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${currentResize.startingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${currentResize.startingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'cursor',\n            getResizeCursor(currentResize.edges, resizeCursors)\n          );\n          this.renderer.addClass(\n            currentResize.clonedNode,\n            RESIZE_GHOST_ELEMENT_CLASS\n          );\n          currentResize.clonedNode!.scrollTop = currentResize.startingRect\n            .scrollTop as number;\n          currentResize.clonedNode!.scrollLeft = currentResize.startingRect\n            .scrollLeft as number;\n        }\n        this.zone.run(() => {\n          this.resizeStart.emit({\n            edges: getEdgesDiff({\n              edges,\n              initialRectangle: startingRect,\n              newRectangle: startingRect\n            }),\n            rectangle: getNewBoundingRectangle(startingRect, {}, 0, 0)\n          });\n        });\n      });\n\n    this.mouseup.subscribe(() => {\n      if (currentResize) {\n        this.renderer.removeClass(this.elm.nativeElement, RESIZE_ACTIVE_CLASS);\n        this.renderer.setStyle(document.body, 'cursor', '');\n        this.renderer.setStyle(this.elm.nativeElement, 'cursor', '');\n        this.zone.run(() => {\n          this.resizeEnd.emit({\n            edges: getEdgesDiff({\n              edges: currentResize!.edges,\n              initialRectangle: currentResize!.startingRect,\n              newRectangle: currentResize!.currentRect\n            }),\n            rectangle: currentResize!.currentRect\n          });\n        });\n        removeGhostElement();\n        currentResize = null;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    this.mousedown.complete();\n    this.mouseup.complete();\n    this.mousemove.complete();\n    this.pointerEventListenerSubscriptions.pointerDown.unsubscribe();\n    this.pointerEventListenerSubscriptions.pointerMove.unsubscribe();\n    this.pointerEventListenerSubscriptions.pointerUp.unsubscribe();\n  }\n\n  private setElementClass(elm: ElementRef, name: string, add: boolean): void {\n    if (add) {\n      this.renderer.addClass(elm.nativeElement, name);\n    } else {\n      this.renderer.removeClass(elm.nativeElement, name);\n    }\n  }\n}\n\nclass PointerEventListeners {\n  public pointerDown: Observable;\n\n  public pointerMove: Observable;\n\n  public pointerUp: Observable;\n\n  private static instance: PointerEventListeners; // tslint:disable-line\n\n  public static getInstance(\n    renderer: Renderer2,\n    zone: NgZone\n  ): PointerEventListeners {\n    if (!PointerEventListeners.instance) {\n      PointerEventListeners.instance = new PointerEventListeners(\n        renderer,\n        zone\n      );\n    }\n    return PointerEventListeners.instance;\n  }\n\n  constructor(renderer: Renderer2, zone: NgZone) {\n    this.pointerDown = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseDown: () => void;\n        let unsubscribeTouchStart: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseDown = renderer.listen(\n            'document',\n            'mousedown',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchStart = renderer.listen(\n            'document',\n            'touchstart',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.touches[0].clientX,\n                clientY: event.touches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseDown();\n          unsubscribeTouchStart();\n        };\n      }\n    ).pipe(share());\n\n    this.pointerMove = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseMove: () => void;\n        let unsubscribeTouchMove: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseMove = renderer.listen(\n            'document',\n            'mousemove',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchMove = renderer.listen(\n            'document',\n            'touchmove',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.targetTouches[0].clientX,\n                clientY: event.targetTouches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseMove();\n          unsubscribeTouchMove();\n        };\n      }\n    ).pipe(share());\n\n    this.pointerUp = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseUp: () => void;\n        let unsubscribeTouchEnd: () => void;\n        let unsubscribeTouchCancel: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseUp = renderer.listen(\n            'document',\n            'mouseup',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchEnd = renderer.listen(\n            'document',\n            'touchend',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.changedTouches[0].clientX,\n                clientY: event.changedTouches[0].clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchCancel = renderer.listen(\n            'document',\n            'touchcancel',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.changedTouches[0].clientX,\n                clientY: event.changedTouches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseUp();\n          unsubscribeTouchEnd();\n          unsubscribeTouchCancel();\n        };\n      }\n    ).pipe(share());\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PointerEventListeners.html":{"url":"classes/PointerEventListeners.html","title":"class - PointerEventListeners","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  PointerEventListeners\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resizable.directive.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                pointerDown\n                            \n                            \n                                    Public\n                                pointerMove\n                            \n                            \n                                    Public\n                                pointerUp\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getInstance\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(renderer: Renderer2, zone: NgZone)\n                    \n                \n                        \n                            \n                                Defined in src/resizable.directive.ts:793\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                    Renderer2\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        zone\n                                                  \n                                                        \n                                                                    NgZone\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            pointerDown\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        pointerDown:     Observable\n\n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/resizable.directive.ts:774\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            pointerMove\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        pointerMove:     Observable\n\n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/resizable.directive.ts:776\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            pointerUp\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        pointerUp:     Observable\n\n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/resizable.directive.ts:778\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            getInstance\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getInstance(renderer: Renderer2, zone: NgZone)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/resizable.directive.ts:782\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        renderer\n                                                        \n                                                                    Renderer2\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        zone\n                                                        \n                                                                    NgZone\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     PointerEventListeners\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  NgZone\n} from '@angular/core';\nimport { Subject, Observable, Observer, merge, interval } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  filter,\n  pairwise,\n  take,\n  throttle,\n  share\n} from 'rxjs/operators';\nimport { Edges } from './interfaces/edges.interface';\nimport { BoundingRectangle } from './interfaces/bounding-rectangle.interface';\nimport { ResizeEvent } from './interfaces/resize-event.interface';\n\ninterface PointerEventCoordinate {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\ninterface Coordinate {\n  x: number;\n  y: number;\n}\n\nfunction isNumberCloseTo(\n  value1: number,\n  value2: number,\n  precision: number = 3\n): boolean {\n  const diff: number = Math.abs(value1 - value2);\n  return diff  style[property])\n    .find(value => !!value);\n  if (transform && transform.includes('translate')) {\n    translateX = transform.replace(/.*translate\\((.*)px, (.*)px\\).*/, '$1');\n    translateY = transform.replace(/.*translate\\((.*)px, (.*)px\\).*/, '$2');\n  }\n\n  if (ghostElementPositioning === 'absolute') {\n    return {\n      height: element.nativeElement.offsetHeight,\n      width: element.nativeElement.offsetWidth,\n      top: element.nativeElement.offsetTop - translateY,\n      bottom:\n        element.nativeElement.offsetHeight +\n        element.nativeElement.offsetTop -\n        translateY,\n      left: element.nativeElement.offsetLeft - translateX,\n      right:\n        element.nativeElement.offsetWidth +\n        element.nativeElement.offsetLeft -\n        translateX\n    };\n  } else {\n    const boundingRect: BoundingRectangle = element.nativeElement.getBoundingClientRect();\n    return {\n      height: boundingRect.height,\n      width: boundingRect.width,\n      top: boundingRect.top - translateY,\n      bottom: boundingRect.bottom - translateY,\n      left: boundingRect.left - translateX,\n      right: boundingRect.right - translateX,\n      scrollTop: element.nativeElement.scrollTop,\n      scrollLeft: element.nativeElement.scrollLeft\n    };\n  }\n}\n\nfunction isWithinBoundingY({\n  clientY,\n  rect\n}: {\n  clientY: number;\n  rect: ClientRect;\n}): boolean {\n  return clientY >= rect.top && clientY = rect.left && clientX  {\n    edgesDiff[edge] = (newRectangle[edge] || 0) - (initialRectangle[edge] || 0);\n  });\n  return edgesDiff;\n}\n\nconst RESIZE_ACTIVE_CLASS: string = 'resize-active';\nconst RESIZE_LEFT_HOVER_CLASS: string = 'resize-left-hover';\nconst RESIZE_RIGHT_HOVER_CLASS: string = 'resize-right-hover';\nconst RESIZE_TOP_HOVER_CLASS: string = 'resize-top-hover';\nconst RESIZE_BOTTOM_HOVER_CLASS: string = 'resize-bottom-hover';\nconst RESIZE_GHOST_ELEMENT_CLASS: string = 'resize-ghost-element';\n\nexport const MOUSE_MOVE_THROTTLE_MS: number = 50;\n\n/**\n * Place this on an element to make it resizable. For example:\n *\n * ```html\n * \n * \n * ```\n */\n@Directive({\n  selector: '[mwlResizable]'\n})\nexport class ResizableDirective implements OnInit, OnDestroy {\n  /**\n   * A function that will be called before each resize event. Return `true` to allow the resize event to propagate or `false` to cancel it\n   */\n  @Input() validateResize: (resizeEvent: ResizeEvent) => boolean;\n\n  /**\n   * The edges that an element can be resized from. Pass an object like `{top: true, bottom: false}`. By default no edges can be resized.\n   */\n  @Input() resizeEdges: Edges = {};\n\n  /**\n   * Set to `true` to enable a temporary resizing effect of the element in between the `resizeStart` and `resizeEnd` events.\n   */\n  @Input() enableGhostResize: boolean = false;\n\n  /**\n   * A snap grid that resize events will be locked to.\n   *\n   * e.g. to only allow the element to be resized every 10px set it to `{left: 10, right: 10}`\n   */\n  @Input() resizeSnapGrid: Edges = {};\n\n  /**\n   * The mouse cursors that will be set on the resize edges\n   */\n  @Input() resizeCursors: ResizeCursors = DEFAULT_RESIZE_CURSORS;\n\n  /**\n   * Mouse over thickness to active cursor.\n   */\n  @Input() resizeCursorPrecision: number = 3;\n\n  /**\n   * Define the positioning of the ghost element (can be fixed or absolute)\n   */\n  @Input() ghostElementPositioning: 'fixed' | 'absolute' = 'fixed';\n\n  /**\n   * Called when the mouse is pressed and a resize event is about to begin. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeStart = new EventEmitter();\n\n  /**\n   * Called as the mouse is dragged after a resize event has begun. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizing = new EventEmitter();\n\n  /**\n   * Called after the mouse is released after a resize event. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  public mouseup = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousedown = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousemove = new Subject();\n\n  private pointerEventListeners: PointerEventListeners;\n\n  private pointerEventListenerSubscriptions: any = {};\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private renderer: Renderer2,\n    public elm: ElementRef,\n    private zone: NgZone\n  ) {\n    this.pointerEventListeners = PointerEventListeners.getInstance(\n      renderer,\n      zone\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    // TODO - use some fancy Observable.merge's for this\n    this.pointerEventListenerSubscriptions.pointerDown = this.pointerEventListeners.pointerDown.subscribe(\n      ({ clientX, clientY }) => {\n        this.mousedown.next({ clientX, clientY });\n      }\n    );\n\n    this.pointerEventListenerSubscriptions.pointerMove = this.pointerEventListeners.pointerMove.subscribe(\n      ({ clientX, clientY, event }) => {\n        this.mousemove.next({ clientX, clientY, event });\n      }\n    );\n\n    this.pointerEventListenerSubscriptions.pointerUp = this.pointerEventListeners.pointerUp.subscribe(\n      ({ clientX, clientY }) => {\n        this.mouseup.next({ clientX, clientY });\n      }\n    );\n\n    let currentResize: {\n      edges: Edges;\n      startingRect: BoundingRectangle;\n      currentRect: BoundingRectangle;\n      clonedNode?: HTMLElement;\n    } | null;\n\n    const removeGhostElement = () => {\n      if (currentResize && currentResize.clonedNode) {\n        this.elm.nativeElement.parentElement.removeChild(\n          currentResize.clonedNode\n        );\n        this.renderer.setStyle(this.elm.nativeElement, 'visibility', 'inherit');\n      }\n    };\n\n    const mouseMove: Observable = this.mousemove.pipe(share());\n\n    mouseMove.pipe(filter(() => !!currentResize)).subscribe(({ event }) => {\n      event.preventDefault();\n    });\n\n    mouseMove\n      .pipe(throttle(() => interval(MOUSE_MOVE_THROTTLE_MS)))\n      .subscribe(({ clientX, clientY }) => {\n        const resizeEdges: Edges = getResizeEdges({\n          clientX,\n          clientY,\n          elm: this.elm,\n          allowedEdges: this.resizeEdges,\n          cursorPrecision: this.resizeCursorPrecision\n        });\n        const resizeCursors: ResizeCursors = Object.assign(\n          {},\n          DEFAULT_RESIZE_CURSORS,\n          this.resizeCursors\n        );\n        if (currentResize) {\n          const cursor: string = getResizeCursor(\n            currentResize.edges,\n            resizeCursors\n          );\n          this.renderer.setStyle(document.body, 'cursor', cursor);\n        } else {\n          const cursor: string = getResizeCursor(resizeEdges, resizeCursors);\n          this.renderer.setStyle(this.elm.nativeElement, 'cursor', cursor);\n        }\n        this.setElementClass(this.elm, RESIZE_ACTIVE_CLASS, !!currentResize);\n        this.setElementClass(\n          this.elm,\n          RESIZE_LEFT_HOVER_CLASS,\n          resizeEdges.left === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_RIGHT_HOVER_CLASS,\n          resizeEdges.right === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_TOP_HOVER_CLASS,\n          resizeEdges.top === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_BOTTOM_HOVER_CLASS,\n          resizeEdges.bottom === true\n        );\n      });\n\n    const mousedrag: Observable = this.mousedown\n      .pipe(\n        mergeMap(startCoords => {\n          function getDiff(moveCoords: { clientX: number; clientY: number }) {\n            return {\n              clientX: moveCoords.clientX - startCoords.clientX,\n              clientY: moveCoords.clientY - startCoords.clientY\n            };\n          }\n\n          const getSnapGrid = () => {\n            const snapGrid: Coordinate = { x: 1, y: 1 };\n\n            if (currentResize) {\n              if (this.resizeSnapGrid.left && currentResize.edges.left) {\n                snapGrid.x = +this.resizeSnapGrid.left;\n              } else if (\n                this.resizeSnapGrid.right &&\n                currentResize.edges.right\n              ) {\n                snapGrid.x = +this.resizeSnapGrid.right;\n              }\n\n              if (this.resizeSnapGrid.top && currentResize.edges.top) {\n                snapGrid.y = +this.resizeSnapGrid.top;\n              } else if (\n                this.resizeSnapGrid.bottom &&\n                currentResize.edges.bottom\n              ) {\n                snapGrid.y = +this.resizeSnapGrid.bottom;\n              }\n            }\n\n            return snapGrid;\n          };\n\n          function getGrid(\n            coords: { clientX: number; clientY: number },\n            snapGrid: Coordinate\n          ) {\n            return {\n              x: Math.ceil(coords.clientX / snapGrid.x),\n              y: Math.ceil(coords.clientY / snapGrid.y)\n            };\n          }\n\n          return merge(\n            mouseMove.pipe(take(1)).pipe(map(coords => [, coords])),\n            mouseMove.pipe(pairwise())\n          )\n            .pipe(\n              map(([previousCoords, newCoords]) => {\n                return [\n                  previousCoords ? getDiff(previousCoords) : previousCoords,\n                  getDiff(newCoords)\n                ];\n              })\n            )\n            .pipe(\n              filter(([previousCoords, newCoords]) => {\n                if (!previousCoords) {\n                  return true;\n                }\n\n                const snapGrid: Coordinate = getSnapGrid();\n                const previousGrid: Coordinate = getGrid(\n                  previousCoords,\n                  snapGrid\n                );\n                const newGrid: Coordinate = getGrid(newCoords, snapGrid);\n\n                return (\n                  previousGrid.x !== newGrid.x || previousGrid.y !== newGrid.y\n                );\n              })\n            )\n            .pipe(\n              map(([, newCoords]) => {\n                const snapGrid: Coordinate = getSnapGrid();\n                return {\n                  clientX:\n                    Math.round(newCoords.clientX / snapGrid.x) * snapGrid.x,\n                  clientY:\n                    Math.round(newCoords.clientY / snapGrid.y) * snapGrid.y\n                };\n              })\n            )\n            .pipe(takeUntil(merge(this.mouseup, this.mousedown)));\n        })\n      )\n      .pipe(filter(() => !!currentResize));\n\n    mousedrag\n      .pipe(\n        map(({ clientX, clientY }) => {\n          return getNewBoundingRectangle(\n            currentResize!.startingRect,\n            currentResize!.edges,\n            clientX,\n            clientY\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return !!(\n            newBoundingRect.height &&\n            newBoundingRect.width &&\n            newBoundingRect.height > 0 &&\n            newBoundingRect.width > 0\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return this.validateResize\n            ? this.validateResize({\n                rectangle: newBoundingRect,\n                edges: getEdgesDiff({\n                  edges: currentResize!.edges,\n                  initialRectangle: currentResize!.startingRect,\n                  newRectangle: newBoundingRect\n                })\n              })\n            : true;\n        })\n      )\n      .subscribe((newBoundingRect: BoundingRectangle) => {\n        if (currentResize && currentResize.clonedNode) {\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${newBoundingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${newBoundingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${newBoundingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${newBoundingRect.left}px`\n          );\n        }\n\n        this.zone.run(() => {\n          this.resizing.emit({\n            edges: getEdgesDiff({\n              edges: currentResize!.edges,\n              initialRectangle: currentResize!.startingRect,\n              newRectangle: newBoundingRect\n            }),\n            rectangle: newBoundingRect\n          });\n        });\n\n        currentResize!.currentRect = newBoundingRect;\n      });\n\n    this.mousedown\n      .pipe(\n        map(({ clientX, clientY, edges }) => {\n          return (\n            edges ||\n            getResizeEdges({\n              clientX,\n              clientY,\n              elm: this.elm,\n              allowedEdges: this.resizeEdges,\n              cursorPrecision: this.resizeCursorPrecision\n            })\n          );\n        })\n      )\n      .pipe(\n        filter((edges: Edges) => {\n          return Object.keys(edges).length > 0;\n        })\n      )\n      .subscribe((edges: Edges) => {\n        if (currentResize) {\n          removeGhostElement();\n        }\n        const startingRect: BoundingRectangle = getElementRect(\n          this.elm,\n          this.ghostElementPositioning\n        );\n        currentResize = {\n          edges,\n          startingRect,\n          currentRect: startingRect\n        };\n        if (this.enableGhostResize) {\n          currentResize.clonedNode = this.elm.nativeElement.cloneNode(true);\n          const resizeCursors: ResizeCursors = Object.assign(\n            {},\n            DEFAULT_RESIZE_CURSORS,\n            this.resizeCursors\n          );\n          this.elm.nativeElement.parentElement.appendChild(\n            currentResize.clonedNode\n          );\n          this.renderer.setStyle(\n            this.elm.nativeElement,\n            'visibility',\n            'hidden'\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'position',\n            this.ghostElementPositioning\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${currentResize.startingRect.left}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${currentResize.startingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${currentResize.startingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${currentResize.startingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'cursor',\n            getResizeCursor(currentResize.edges, resizeCursors)\n          );\n          this.renderer.addClass(\n            currentResize.clonedNode,\n            RESIZE_GHOST_ELEMENT_CLASS\n          );\n          currentResize.clonedNode!.scrollTop = currentResize.startingRect\n            .scrollTop as number;\n          currentResize.clonedNode!.scrollLeft = currentResize.startingRect\n            .scrollLeft as number;\n        }\n        this.zone.run(() => {\n          this.resizeStart.emit({\n            edges: getEdgesDiff({\n              edges,\n              initialRectangle: startingRect,\n              newRectangle: startingRect\n            }),\n            rectangle: getNewBoundingRectangle(startingRect, {}, 0, 0)\n          });\n        });\n      });\n\n    this.mouseup.subscribe(() => {\n      if (currentResize) {\n        this.renderer.removeClass(this.elm.nativeElement, RESIZE_ACTIVE_CLASS);\n        this.renderer.setStyle(document.body, 'cursor', '');\n        this.renderer.setStyle(this.elm.nativeElement, 'cursor', '');\n        this.zone.run(() => {\n          this.resizeEnd.emit({\n            edges: getEdgesDiff({\n              edges: currentResize!.edges,\n              initialRectangle: currentResize!.startingRect,\n              newRectangle: currentResize!.currentRect\n            }),\n            rectangle: currentResize!.currentRect\n          });\n        });\n        removeGhostElement();\n        currentResize = null;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    this.mousedown.complete();\n    this.mouseup.complete();\n    this.mousemove.complete();\n    this.pointerEventListenerSubscriptions.pointerDown.unsubscribe();\n    this.pointerEventListenerSubscriptions.pointerMove.unsubscribe();\n    this.pointerEventListenerSubscriptions.pointerUp.unsubscribe();\n  }\n\n  private setElementClass(elm: ElementRef, name: string, add: boolean): void {\n    if (add) {\n      this.renderer.addClass(elm.nativeElement, name);\n    } else {\n      this.renderer.removeClass(elm.nativeElement, name);\n    }\n  }\n}\n\nclass PointerEventListeners {\n  public pointerDown: Observable;\n\n  public pointerMove: Observable;\n\n  public pointerUp: Observable;\n\n  private static instance: PointerEventListeners; // tslint:disable-line\n\n  public static getInstance(\n    renderer: Renderer2,\n    zone: NgZone\n  ): PointerEventListeners {\n    if (!PointerEventListeners.instance) {\n      PointerEventListeners.instance = new PointerEventListeners(\n        renderer,\n        zone\n      );\n    }\n    return PointerEventListeners.instance;\n  }\n\n  constructor(renderer: Renderer2, zone: NgZone) {\n    this.pointerDown = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseDown: () => void;\n        let unsubscribeTouchStart: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseDown = renderer.listen(\n            'document',\n            'mousedown',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchStart = renderer.listen(\n            'document',\n            'touchstart',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.touches[0].clientX,\n                clientY: event.touches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseDown();\n          unsubscribeTouchStart();\n        };\n      }\n    ).pipe(share());\n\n    this.pointerMove = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseMove: () => void;\n        let unsubscribeTouchMove: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseMove = renderer.listen(\n            'document',\n            'mousemove',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchMove = renderer.listen(\n            'document',\n            'touchmove',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.targetTouches[0].clientX,\n                clientY: event.targetTouches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseMove();\n          unsubscribeTouchMove();\n        };\n      }\n    ).pipe(share());\n\n    this.pointerUp = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseUp: () => void;\n        let unsubscribeTouchEnd: () => void;\n        let unsubscribeTouchCancel: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseUp = renderer.listen(\n            'document',\n            'mouseup',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchEnd = renderer.listen(\n            'document',\n            'touchend',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.changedTouches[0].clientX,\n                clientY: event.changedTouches[0].clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchCancel = renderer.listen(\n            'document',\n            'touchcancel',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.changedTouches[0].clientX,\n                clientY: event.changedTouches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseUp();\n          unsubscribeTouchEnd();\n          unsubscribeTouchCancel();\n        };\n      }\n    ).pipe(share());\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/ResizableDirective.html":{"url":"directives/ResizableDirective.html","title":"directive - ResizableDirective","body":"\n                   \n\n\n\n\n\n\n  Directives\n  ResizableDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resizable.directive.ts\n        \n\n            \n                Description\n            \n            \n                Place this on an element to make it resizable. For example:\n\n\n            \n\n            \n                Implements\n            \n            \n                        OnInit\n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        selector\n                        [mwlResizable]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                enableGhostResize\n                            \n                            \n                                ghostElementPositioning\n                            \n                            \n                                resizeCursorPrecision\n                            \n                            \n                                resizeCursors\n                            \n                            \n                                resizeEdges\n                            \n                            \n                                resizeSnapGrid\n                            \n                            \n                                validateResize\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                resizeEnd\n                            \n                            \n                                resizeStart\n                            \n                            \n                                resizing\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        enableGhostResize\n                    \n                    \n                        Set to true to enable a temporary resizing effect of the element in between the resizeStart and resizeEnd events.\n\n                            \n                            Type:    boolean\n\n                            \n                        \n                            Default value: false\n                        \n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:289\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ghostElementPositioning\n                    \n                    \n                        Define the positioning of the ghost element (can be fixed or absolute)\n\n                            \n                            Type:    \"fixed\" | \"absolute\"\n\n                            \n                        \n                            Default value: 'fixed'\n                        \n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:311\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        resizeCursorPrecision\n                    \n                    \n                        Mouse over thickness to active cursor.\n\n                            \n                            Type:    number\n\n                            \n                        \n                            Default value: 3\n                        \n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:306\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        resizeCursors\n                    \n                    \n                        The mouse cursors that will be set on the resize edges\n\n                            \n                            Type:    ResizeCursors\n\n                            \n                        \n                            Default value: DEFAULT_RESIZE_CURSORS\n                        \n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:301\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        resizeEdges\n                    \n                    \n                        The edges that an element can be resized from. Pass an object like {top: true, bottom: false}. By default no edges can be resized.\n\n                            \n                            Type:    Edges\n\n                            \n                        \n                            Default value: {}\n                        \n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:284\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        resizeSnapGrid\n                    \n                    \n                        A snap grid that resize events will be locked to.\ne.g. to only allow the element to be resized every 10px set it to {left: 10, right: 10}\n\n                            \n                            Type:    Edges\n\n                            \n                        \n                            Default value: {}\n                        \n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:296\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        validateResize\n                    \n                    \n                        A function that will be called before each resize event. Return true to allow the resize event to propagate or false to cancel it\n\n                            \n                            Type:    function\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:279\n                            \n                        \n            \n        \n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        resizeEnd\n                    \n                    \n                        Called after the mouse is released after a resize event. $event is a ResizeEvent object.\n\n                        $event type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:326\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        resizeStart\n                    \n                    \n                        Called when the mouse is pressed and a resize event is about to begin. $event is a ResizeEvent object.\n\n                        $event type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:316\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        resizing\n                    \n                    \n                        Called as the mouse is dragged after a resize event has begun. $event is a ResizeEvent object.\n\n                        $event type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:321\n                            \n                        \n            \n        \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  NgZone\n} from '@angular/core';\nimport { Subject, Observable, Observer, merge, interval } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  filter,\n  pairwise,\n  take,\n  throttle,\n  share\n} from 'rxjs/operators';\nimport { Edges } from './interfaces/edges.interface';\nimport { BoundingRectangle } from './interfaces/bounding-rectangle.interface';\nimport { ResizeEvent } from './interfaces/resize-event.interface';\n\ninterface PointerEventCoordinate {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\ninterface Coordinate {\n  x: number;\n  y: number;\n}\n\nfunction isNumberCloseTo(\n  value1: number,\n  value2: number,\n  precision: number = 3\n): boolean {\n  const diff: number = Math.abs(value1 - value2);\n  return diff  style[property])\n    .find(value => !!value);\n  if (transform && transform.includes('translate')) {\n    translateX = transform.replace(/.*translate\\((.*)px, (.*)px\\).*/, '$1');\n    translateY = transform.replace(/.*translate\\((.*)px, (.*)px\\).*/, '$2');\n  }\n\n  if (ghostElementPositioning === 'absolute') {\n    return {\n      height: element.nativeElement.offsetHeight,\n      width: element.nativeElement.offsetWidth,\n      top: element.nativeElement.offsetTop - translateY,\n      bottom:\n        element.nativeElement.offsetHeight +\n        element.nativeElement.offsetTop -\n        translateY,\n      left: element.nativeElement.offsetLeft - translateX,\n      right:\n        element.nativeElement.offsetWidth +\n        element.nativeElement.offsetLeft -\n        translateX\n    };\n  } else {\n    const boundingRect: BoundingRectangle = element.nativeElement.getBoundingClientRect();\n    return {\n      height: boundingRect.height,\n      width: boundingRect.width,\n      top: boundingRect.top - translateY,\n      bottom: boundingRect.bottom - translateY,\n      left: boundingRect.left - translateX,\n      right: boundingRect.right - translateX,\n      scrollTop: element.nativeElement.scrollTop,\n      scrollLeft: element.nativeElement.scrollLeft\n    };\n  }\n}\n\nfunction isWithinBoundingY({\n  clientY,\n  rect\n}: {\n  clientY: number;\n  rect: ClientRect;\n}): boolean {\n  return clientY >= rect.top && clientY = rect.left && clientX  {\n    edgesDiff[edge] = (newRectangle[edge] || 0) - (initialRectangle[edge] || 0);\n  });\n  return edgesDiff;\n}\n\nconst RESIZE_ACTIVE_CLASS: string = 'resize-active';\nconst RESIZE_LEFT_HOVER_CLASS: string = 'resize-left-hover';\nconst RESIZE_RIGHT_HOVER_CLASS: string = 'resize-right-hover';\nconst RESIZE_TOP_HOVER_CLASS: string = 'resize-top-hover';\nconst RESIZE_BOTTOM_HOVER_CLASS: string = 'resize-bottom-hover';\nconst RESIZE_GHOST_ELEMENT_CLASS: string = 'resize-ghost-element';\n\nexport const MOUSE_MOVE_THROTTLE_MS: number = 50;\n\n/**\n * Place this on an element to make it resizable. For example:\n *\n * ```html\n * \n * \n * ```\n */\n@Directive({\n  selector: '[mwlResizable]'\n})\nexport class ResizableDirective implements OnInit, OnDestroy {\n  /**\n   * A function that will be called before each resize event. Return `true` to allow the resize event to propagate or `false` to cancel it\n   */\n  @Input() validateResize: (resizeEvent: ResizeEvent) => boolean;\n\n  /**\n   * The edges that an element can be resized from. Pass an object like `{top: true, bottom: false}`. By default no edges can be resized.\n   */\n  @Input() resizeEdges: Edges = {};\n\n  /**\n   * Set to `true` to enable a temporary resizing effect of the element in between the `resizeStart` and `resizeEnd` events.\n   */\n  @Input() enableGhostResize: boolean = false;\n\n  /**\n   * A snap grid that resize events will be locked to.\n   *\n   * e.g. to only allow the element to be resized every 10px set it to `{left: 10, right: 10}`\n   */\n  @Input() resizeSnapGrid: Edges = {};\n\n  /**\n   * The mouse cursors that will be set on the resize edges\n   */\n  @Input() resizeCursors: ResizeCursors = DEFAULT_RESIZE_CURSORS;\n\n  /**\n   * Mouse over thickness to active cursor.\n   */\n  @Input() resizeCursorPrecision: number = 3;\n\n  /**\n   * Define the positioning of the ghost element (can be fixed or absolute)\n   */\n  @Input() ghostElementPositioning: 'fixed' | 'absolute' = 'fixed';\n\n  /**\n   * Called when the mouse is pressed and a resize event is about to begin. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeStart = new EventEmitter();\n\n  /**\n   * Called as the mouse is dragged after a resize event has begun. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizing = new EventEmitter();\n\n  /**\n   * Called after the mouse is released after a resize event. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  public mouseup = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousedown = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousemove = new Subject();\n\n  private pointerEventListeners: PointerEventListeners;\n\n  private pointerEventListenerSubscriptions: any = {};\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private renderer: Renderer2,\n    public elm: ElementRef,\n    private zone: NgZone\n  ) {\n    this.pointerEventListeners = PointerEventListeners.getInstance(\n      renderer,\n      zone\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    // TODO - use some fancy Observable.merge's for this\n    this.pointerEventListenerSubscriptions.pointerDown = this.pointerEventListeners.pointerDown.subscribe(\n      ({ clientX, clientY }) => {\n        this.mousedown.next({ clientX, clientY });\n      }\n    );\n\n    this.pointerEventListenerSubscriptions.pointerMove = this.pointerEventListeners.pointerMove.subscribe(\n      ({ clientX, clientY, event }) => {\n        this.mousemove.next({ clientX, clientY, event });\n      }\n    );\n\n    this.pointerEventListenerSubscriptions.pointerUp = this.pointerEventListeners.pointerUp.subscribe(\n      ({ clientX, clientY }) => {\n        this.mouseup.next({ clientX, clientY });\n      }\n    );\n\n    let currentResize: {\n      edges: Edges;\n      startingRect: BoundingRectangle;\n      currentRect: BoundingRectangle;\n      clonedNode?: HTMLElement;\n    } | null;\n\n    const removeGhostElement = () => {\n      if (currentResize && currentResize.clonedNode) {\n        this.elm.nativeElement.parentElement.removeChild(\n          currentResize.clonedNode\n        );\n        this.renderer.setStyle(this.elm.nativeElement, 'visibility', 'inherit');\n      }\n    };\n\n    const mouseMove: Observable = this.mousemove.pipe(share());\n\n    mouseMove.pipe(filter(() => !!currentResize)).subscribe(({ event }) => {\n      event.preventDefault();\n    });\n\n    mouseMove\n      .pipe(throttle(() => interval(MOUSE_MOVE_THROTTLE_MS)))\n      .subscribe(({ clientX, clientY }) => {\n        const resizeEdges: Edges = getResizeEdges({\n          clientX,\n          clientY,\n          elm: this.elm,\n          allowedEdges: this.resizeEdges,\n          cursorPrecision: this.resizeCursorPrecision\n        });\n        const resizeCursors: ResizeCursors = Object.assign(\n          {},\n          DEFAULT_RESIZE_CURSORS,\n          this.resizeCursors\n        );\n        if (currentResize) {\n          const cursor: string = getResizeCursor(\n            currentResize.edges,\n            resizeCursors\n          );\n          this.renderer.setStyle(document.body, 'cursor', cursor);\n        } else {\n          const cursor: string = getResizeCursor(resizeEdges, resizeCursors);\n          this.renderer.setStyle(this.elm.nativeElement, 'cursor', cursor);\n        }\n        this.setElementClass(this.elm, RESIZE_ACTIVE_CLASS, !!currentResize);\n        this.setElementClass(\n          this.elm,\n          RESIZE_LEFT_HOVER_CLASS,\n          resizeEdges.left === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_RIGHT_HOVER_CLASS,\n          resizeEdges.right === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_TOP_HOVER_CLASS,\n          resizeEdges.top === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_BOTTOM_HOVER_CLASS,\n          resizeEdges.bottom === true\n        );\n      });\n\n    const mousedrag: Observable = this.mousedown\n      .pipe(\n        mergeMap(startCoords => {\n          function getDiff(moveCoords: { clientX: number; clientY: number }) {\n            return {\n              clientX: moveCoords.clientX - startCoords.clientX,\n              clientY: moveCoords.clientY - startCoords.clientY\n            };\n          }\n\n          const getSnapGrid = () => {\n            const snapGrid: Coordinate = { x: 1, y: 1 };\n\n            if (currentResize) {\n              if (this.resizeSnapGrid.left && currentResize.edges.left) {\n                snapGrid.x = +this.resizeSnapGrid.left;\n              } else if (\n                this.resizeSnapGrid.right &&\n                currentResize.edges.right\n              ) {\n                snapGrid.x = +this.resizeSnapGrid.right;\n              }\n\n              if (this.resizeSnapGrid.top && currentResize.edges.top) {\n                snapGrid.y = +this.resizeSnapGrid.top;\n              } else if (\n                this.resizeSnapGrid.bottom &&\n                currentResize.edges.bottom\n              ) {\n                snapGrid.y = +this.resizeSnapGrid.bottom;\n              }\n            }\n\n            return snapGrid;\n          };\n\n          function getGrid(\n            coords: { clientX: number; clientY: number },\n            snapGrid: Coordinate\n          ) {\n            return {\n              x: Math.ceil(coords.clientX / snapGrid.x),\n              y: Math.ceil(coords.clientY / snapGrid.y)\n            };\n          }\n\n          return merge(\n            mouseMove.pipe(take(1)).pipe(map(coords => [, coords])),\n            mouseMove.pipe(pairwise())\n          )\n            .pipe(\n              map(([previousCoords, newCoords]) => {\n                return [\n                  previousCoords ? getDiff(previousCoords) : previousCoords,\n                  getDiff(newCoords)\n                ];\n              })\n            )\n            .pipe(\n              filter(([previousCoords, newCoords]) => {\n                if (!previousCoords) {\n                  return true;\n                }\n\n                const snapGrid: Coordinate = getSnapGrid();\n                const previousGrid: Coordinate = getGrid(\n                  previousCoords,\n                  snapGrid\n                );\n                const newGrid: Coordinate = getGrid(newCoords, snapGrid);\n\n                return (\n                  previousGrid.x !== newGrid.x || previousGrid.y !== newGrid.y\n                );\n              })\n            )\n            .pipe(\n              map(([, newCoords]) => {\n                const snapGrid: Coordinate = getSnapGrid();\n                return {\n                  clientX:\n                    Math.round(newCoords.clientX / snapGrid.x) * snapGrid.x,\n                  clientY:\n                    Math.round(newCoords.clientY / snapGrid.y) * snapGrid.y\n                };\n              })\n            )\n            .pipe(takeUntil(merge(this.mouseup, this.mousedown)));\n        })\n      )\n      .pipe(filter(() => !!currentResize));\n\n    mousedrag\n      .pipe(\n        map(({ clientX, clientY }) => {\n          return getNewBoundingRectangle(\n            currentResize!.startingRect,\n            currentResize!.edges,\n            clientX,\n            clientY\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return !!(\n            newBoundingRect.height &&\n            newBoundingRect.width &&\n            newBoundingRect.height > 0 &&\n            newBoundingRect.width > 0\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return this.validateResize\n            ? this.validateResize({\n                rectangle: newBoundingRect,\n                edges: getEdgesDiff({\n                  edges: currentResize!.edges,\n                  initialRectangle: currentResize!.startingRect,\n                  newRectangle: newBoundingRect\n                })\n              })\n            : true;\n        })\n      )\n      .subscribe((newBoundingRect: BoundingRectangle) => {\n        if (currentResize && currentResize.clonedNode) {\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${newBoundingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${newBoundingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${newBoundingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${newBoundingRect.left}px`\n          );\n        }\n\n        this.zone.run(() => {\n          this.resizing.emit({\n            edges: getEdgesDiff({\n              edges: currentResize!.edges,\n              initialRectangle: currentResize!.startingRect,\n              newRectangle: newBoundingRect\n            }),\n            rectangle: newBoundingRect\n          });\n        });\n\n        currentResize!.currentRect = newBoundingRect;\n      });\n\n    this.mousedown\n      .pipe(\n        map(({ clientX, clientY, edges }) => {\n          return (\n            edges ||\n            getResizeEdges({\n              clientX,\n              clientY,\n              elm: this.elm,\n              allowedEdges: this.resizeEdges,\n              cursorPrecision: this.resizeCursorPrecision\n            })\n          );\n        })\n      )\n      .pipe(\n        filter((edges: Edges) => {\n          return Object.keys(edges).length > 0;\n        })\n      )\n      .subscribe((edges: Edges) => {\n        if (currentResize) {\n          removeGhostElement();\n        }\n        const startingRect: BoundingRectangle = getElementRect(\n          this.elm,\n          this.ghostElementPositioning\n        );\n        currentResize = {\n          edges,\n          startingRect,\n          currentRect: startingRect\n        };\n        if (this.enableGhostResize) {\n          currentResize.clonedNode = this.elm.nativeElement.cloneNode(true);\n          const resizeCursors: ResizeCursors = Object.assign(\n            {},\n            DEFAULT_RESIZE_CURSORS,\n            this.resizeCursors\n          );\n          this.elm.nativeElement.parentElement.appendChild(\n            currentResize.clonedNode\n          );\n          this.renderer.setStyle(\n            this.elm.nativeElement,\n            'visibility',\n            'hidden'\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'position',\n            this.ghostElementPositioning\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${currentResize.startingRect.left}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${currentResize.startingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${currentResize.startingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${currentResize.startingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'cursor',\n            getResizeCursor(currentResize.edges, resizeCursors)\n          );\n          this.renderer.addClass(\n            currentResize.clonedNode,\n            RESIZE_GHOST_ELEMENT_CLASS\n          );\n          currentResize.clonedNode!.scrollTop = currentResize.startingRect\n            .scrollTop as number;\n          currentResize.clonedNode!.scrollLeft = currentResize.startingRect\n            .scrollLeft as number;\n        }\n        this.zone.run(() => {\n          this.resizeStart.emit({\n            edges: getEdgesDiff({\n              edges,\n              initialRectangle: startingRect,\n              newRectangle: startingRect\n            }),\n            rectangle: getNewBoundingRectangle(startingRect, {}, 0, 0)\n          });\n        });\n      });\n\n    this.mouseup.subscribe(() => {\n      if (currentResize) {\n        this.renderer.removeClass(this.elm.nativeElement, RESIZE_ACTIVE_CLASS);\n        this.renderer.setStyle(document.body, 'cursor', '');\n        this.renderer.setStyle(this.elm.nativeElement, 'cursor', '');\n        this.zone.run(() => {\n          this.resizeEnd.emit({\n            edges: getEdgesDiff({\n              edges: currentResize!.edges,\n              initialRectangle: currentResize!.startingRect,\n              newRectangle: currentResize!.currentRect\n            }),\n            rectangle: currentResize!.currentRect\n          });\n        });\n        removeGhostElement();\n        currentResize = null;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    this.mousedown.complete();\n    this.mouseup.complete();\n    this.mousemove.complete();\n    this.pointerEventListenerSubscriptions.pointerDown.unsubscribe();\n    this.pointerEventListenerSubscriptions.pointerMove.unsubscribe();\n    this.pointerEventListenerSubscriptions.pointerUp.unsubscribe();\n  }\n\n  private setElementClass(elm: ElementRef, name: string, add: boolean): void {\n    if (add) {\n      this.renderer.addClass(elm.nativeElement, name);\n    } else {\n      this.renderer.removeClass(elm.nativeElement, name);\n    }\n  }\n}\n\nclass PointerEventListeners {\n  public pointerDown: Observable;\n\n  public pointerMove: Observable;\n\n  public pointerUp: Observable;\n\n  private static instance: PointerEventListeners; // tslint:disable-line\n\n  public static getInstance(\n    renderer: Renderer2,\n    zone: NgZone\n  ): PointerEventListeners {\n    if (!PointerEventListeners.instance) {\n      PointerEventListeners.instance = new PointerEventListeners(\n        renderer,\n        zone\n      );\n    }\n    return PointerEventListeners.instance;\n  }\n\n  constructor(renderer: Renderer2, zone: NgZone) {\n    this.pointerDown = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseDown: () => void;\n        let unsubscribeTouchStart: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseDown = renderer.listen(\n            'document',\n            'mousedown',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchStart = renderer.listen(\n            'document',\n            'touchstart',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.touches[0].clientX,\n                clientY: event.touches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseDown();\n          unsubscribeTouchStart();\n        };\n      }\n    ).pipe(share());\n\n    this.pointerMove = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseMove: () => void;\n        let unsubscribeTouchMove: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseMove = renderer.listen(\n            'document',\n            'mousemove',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchMove = renderer.listen(\n            'document',\n            'touchmove',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.targetTouches[0].clientX,\n                clientY: event.targetTouches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseMove();\n          unsubscribeTouchMove();\n        };\n      }\n    ).pipe(share());\n\n    this.pointerUp = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseUp: () => void;\n        let unsubscribeTouchEnd: () => void;\n        let unsubscribeTouchCancel: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseUp = renderer.listen(\n            'document',\n            'mouseup',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchEnd = renderer.listen(\n            'document',\n            'touchend',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.changedTouches[0].clientX,\n                clientY: event.changedTouches[0].clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchCancel = renderer.listen(\n            'document',\n            'touchcancel',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.changedTouches[0].clientX,\n                clientY: event.changedTouches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseUp();\n          unsubscribeTouchEnd();\n          unsubscribeTouchCancel();\n        };\n      }\n    ).pipe(share());\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ResizableModule.html":{"url":"modules/ResizableModule.html","title":"module - ResizableModule","body":"\n                   \n\n\n\n\n  Modules\n  ResizableModule\n\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/resizable.module.ts\n        \n\n\n        \n\n        \n            \n                \n                    Declarations\n                    \n                            \n                                ResizableDirective\n                            \n                            \n                                ResizeHandleDirective\n                            \n                    \n                \n                \n                    Exports\n                    \n                            \n                                    ResizableDirective\n                            \n                            \n                                    ResizeHandleDirective\n                            \n                    \n                \n            \n        \n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { ResizableDirective } from './resizable.directive';\nimport { ResizeHandleDirective } from './resize-handle.directive';\n\n@NgModule({\n  declarations: [ResizableDirective, ResizeHandleDirective],\n  exports: [ResizableDirective, ResizeHandleDirective]\n})\nexport class ResizableModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResizeCursors.html":{"url":"interfaces/ResizeCursors.html","title":"interface - ResizeCursors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ResizeCursors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resizable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        bottomLeft\n                                \n                                \n                                        bottomRight\n                                \n                                \n                                        leftOrRight\n                                \n                                \n                                        topLeft\n                                \n                                \n                                        topOrBottom\n                                \n                                \n                                        topRight\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bottomLeft\n                                    \n                                \n                                \n                                    \n                                        bottomLeft:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        bottomRight\n                                    \n                                \n                                \n                                    \n                                        bottomRight:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        leftOrRight\n                                    \n                                \n                                \n                                    \n                                        leftOrRight:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        topLeft\n                                    \n                                \n                                \n                                    \n                                        topLeft:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        topOrBottom\n                                    \n                                \n                                \n                                    \n                                        topOrBottom:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        topRight\n                                    \n                                \n                                \n                                    \n                                        topRight:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  NgZone\n} from '@angular/core';\nimport { Subject, Observable, Observer, merge, interval } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  filter,\n  pairwise,\n  take,\n  throttle,\n  share\n} from 'rxjs/operators';\nimport { Edges } from './interfaces/edges.interface';\nimport { BoundingRectangle } from './interfaces/bounding-rectangle.interface';\nimport { ResizeEvent } from './interfaces/resize-event.interface';\n\ninterface PointerEventCoordinate {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\ninterface Coordinate {\n  x: number;\n  y: number;\n}\n\nfunction isNumberCloseTo(\n  value1: number,\n  value2: number,\n  precision: number = 3\n): boolean {\n  const diff: number = Math.abs(value1 - value2);\n  return diff  style[property])\n    .find(value => !!value);\n  if (transform && transform.includes('translate')) {\n    translateX = transform.replace(/.*translate\\((.*)px, (.*)px\\).*/, '$1');\n    translateY = transform.replace(/.*translate\\((.*)px, (.*)px\\).*/, '$2');\n  }\n\n  if (ghostElementPositioning === 'absolute') {\n    return {\n      height: element.nativeElement.offsetHeight,\n      width: element.nativeElement.offsetWidth,\n      top: element.nativeElement.offsetTop - translateY,\n      bottom:\n        element.nativeElement.offsetHeight +\n        element.nativeElement.offsetTop -\n        translateY,\n      left: element.nativeElement.offsetLeft - translateX,\n      right:\n        element.nativeElement.offsetWidth +\n        element.nativeElement.offsetLeft -\n        translateX\n    };\n  } else {\n    const boundingRect: BoundingRectangle = element.nativeElement.getBoundingClientRect();\n    return {\n      height: boundingRect.height,\n      width: boundingRect.width,\n      top: boundingRect.top - translateY,\n      bottom: boundingRect.bottom - translateY,\n      left: boundingRect.left - translateX,\n      right: boundingRect.right - translateX,\n      scrollTop: element.nativeElement.scrollTop,\n      scrollLeft: element.nativeElement.scrollLeft\n    };\n  }\n}\n\nfunction isWithinBoundingY({\n  clientY,\n  rect\n}: {\n  clientY: number;\n  rect: ClientRect;\n}): boolean {\n  return clientY >= rect.top && clientY = rect.left && clientX  {\n    edgesDiff[edge] = (newRectangle[edge] || 0) - (initialRectangle[edge] || 0);\n  });\n  return edgesDiff;\n}\n\nconst RESIZE_ACTIVE_CLASS: string = 'resize-active';\nconst RESIZE_LEFT_HOVER_CLASS: string = 'resize-left-hover';\nconst RESIZE_RIGHT_HOVER_CLASS: string = 'resize-right-hover';\nconst RESIZE_TOP_HOVER_CLASS: string = 'resize-top-hover';\nconst RESIZE_BOTTOM_HOVER_CLASS: string = 'resize-bottom-hover';\nconst RESIZE_GHOST_ELEMENT_CLASS: string = 'resize-ghost-element';\n\nexport const MOUSE_MOVE_THROTTLE_MS: number = 50;\n\n/**\n * Place this on an element to make it resizable. For example:\n *\n * ```html\n * \n * \n * ```\n */\n@Directive({\n  selector: '[mwlResizable]'\n})\nexport class ResizableDirective implements OnInit, OnDestroy {\n  /**\n   * A function that will be called before each resize event. Return `true` to allow the resize event to propagate or `false` to cancel it\n   */\n  @Input() validateResize: (resizeEvent: ResizeEvent) => boolean;\n\n  /**\n   * The edges that an element can be resized from. Pass an object like `{top: true, bottom: false}`. By default no edges can be resized.\n   */\n  @Input() resizeEdges: Edges = {};\n\n  /**\n   * Set to `true` to enable a temporary resizing effect of the element in between the `resizeStart` and `resizeEnd` events.\n   */\n  @Input() enableGhostResize: boolean = false;\n\n  /**\n   * A snap grid that resize events will be locked to.\n   *\n   * e.g. to only allow the element to be resized every 10px set it to `{left: 10, right: 10}`\n   */\n  @Input() resizeSnapGrid: Edges = {};\n\n  /**\n   * The mouse cursors that will be set on the resize edges\n   */\n  @Input() resizeCursors: ResizeCursors = DEFAULT_RESIZE_CURSORS;\n\n  /**\n   * Mouse over thickness to active cursor.\n   */\n  @Input() resizeCursorPrecision: number = 3;\n\n  /**\n   * Define the positioning of the ghost element (can be fixed or absolute)\n   */\n  @Input() ghostElementPositioning: 'fixed' | 'absolute' = 'fixed';\n\n  /**\n   * Called when the mouse is pressed and a resize event is about to begin. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeStart = new EventEmitter();\n\n  /**\n   * Called as the mouse is dragged after a resize event has begun. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizing = new EventEmitter();\n\n  /**\n   * Called after the mouse is released after a resize event. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  public mouseup = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousedown = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousemove = new Subject();\n\n  private pointerEventListeners: PointerEventListeners;\n\n  private pointerEventListenerSubscriptions: any = {};\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private renderer: Renderer2,\n    public elm: ElementRef,\n    private zone: NgZone\n  ) {\n    this.pointerEventListeners = PointerEventListeners.getInstance(\n      renderer,\n      zone\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    // TODO - use some fancy Observable.merge's for this\n    this.pointerEventListenerSubscriptions.pointerDown = this.pointerEventListeners.pointerDown.subscribe(\n      ({ clientX, clientY }) => {\n        this.mousedown.next({ clientX, clientY });\n      }\n    );\n\n    this.pointerEventListenerSubscriptions.pointerMove = this.pointerEventListeners.pointerMove.subscribe(\n      ({ clientX, clientY, event }) => {\n        this.mousemove.next({ clientX, clientY, event });\n      }\n    );\n\n    this.pointerEventListenerSubscriptions.pointerUp = this.pointerEventListeners.pointerUp.subscribe(\n      ({ clientX, clientY }) => {\n        this.mouseup.next({ clientX, clientY });\n      }\n    );\n\n    let currentResize: {\n      edges: Edges;\n      startingRect: BoundingRectangle;\n      currentRect: BoundingRectangle;\n      clonedNode?: HTMLElement;\n    } | null;\n\n    const removeGhostElement = () => {\n      if (currentResize && currentResize.clonedNode) {\n        this.elm.nativeElement.parentElement.removeChild(\n          currentResize.clonedNode\n        );\n        this.renderer.setStyle(this.elm.nativeElement, 'visibility', 'inherit');\n      }\n    };\n\n    const mouseMove: Observable = this.mousemove.pipe(share());\n\n    mouseMove.pipe(filter(() => !!currentResize)).subscribe(({ event }) => {\n      event.preventDefault();\n    });\n\n    mouseMove\n      .pipe(throttle(() => interval(MOUSE_MOVE_THROTTLE_MS)))\n      .subscribe(({ clientX, clientY }) => {\n        const resizeEdges: Edges = getResizeEdges({\n          clientX,\n          clientY,\n          elm: this.elm,\n          allowedEdges: this.resizeEdges,\n          cursorPrecision: this.resizeCursorPrecision\n        });\n        const resizeCursors: ResizeCursors = Object.assign(\n          {},\n          DEFAULT_RESIZE_CURSORS,\n          this.resizeCursors\n        );\n        if (currentResize) {\n          const cursor: string = getResizeCursor(\n            currentResize.edges,\n            resizeCursors\n          );\n          this.renderer.setStyle(document.body, 'cursor', cursor);\n        } else {\n          const cursor: string = getResizeCursor(resizeEdges, resizeCursors);\n          this.renderer.setStyle(this.elm.nativeElement, 'cursor', cursor);\n        }\n        this.setElementClass(this.elm, RESIZE_ACTIVE_CLASS, !!currentResize);\n        this.setElementClass(\n          this.elm,\n          RESIZE_LEFT_HOVER_CLASS,\n          resizeEdges.left === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_RIGHT_HOVER_CLASS,\n          resizeEdges.right === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_TOP_HOVER_CLASS,\n          resizeEdges.top === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_BOTTOM_HOVER_CLASS,\n          resizeEdges.bottom === true\n        );\n      });\n\n    const mousedrag: Observable = this.mousedown\n      .pipe(\n        mergeMap(startCoords => {\n          function getDiff(moveCoords: { clientX: number; clientY: number }) {\n            return {\n              clientX: moveCoords.clientX - startCoords.clientX,\n              clientY: moveCoords.clientY - startCoords.clientY\n            };\n          }\n\n          const getSnapGrid = () => {\n            const snapGrid: Coordinate = { x: 1, y: 1 };\n\n            if (currentResize) {\n              if (this.resizeSnapGrid.left && currentResize.edges.left) {\n                snapGrid.x = +this.resizeSnapGrid.left;\n              } else if (\n                this.resizeSnapGrid.right &&\n                currentResize.edges.right\n              ) {\n                snapGrid.x = +this.resizeSnapGrid.right;\n              }\n\n              if (this.resizeSnapGrid.top && currentResize.edges.top) {\n                snapGrid.y = +this.resizeSnapGrid.top;\n              } else if (\n                this.resizeSnapGrid.bottom &&\n                currentResize.edges.bottom\n              ) {\n                snapGrid.y = +this.resizeSnapGrid.bottom;\n              }\n            }\n\n            return snapGrid;\n          };\n\n          function getGrid(\n            coords: { clientX: number; clientY: number },\n            snapGrid: Coordinate\n          ) {\n            return {\n              x: Math.ceil(coords.clientX / snapGrid.x),\n              y: Math.ceil(coords.clientY / snapGrid.y)\n            };\n          }\n\n          return merge(\n            mouseMove.pipe(take(1)).pipe(map(coords => [, coords])),\n            mouseMove.pipe(pairwise())\n          )\n            .pipe(\n              map(([previousCoords, newCoords]) => {\n                return [\n                  previousCoords ? getDiff(previousCoords) : previousCoords,\n                  getDiff(newCoords)\n                ];\n              })\n            )\n            .pipe(\n              filter(([previousCoords, newCoords]) => {\n                if (!previousCoords) {\n                  return true;\n                }\n\n                const snapGrid: Coordinate = getSnapGrid();\n                const previousGrid: Coordinate = getGrid(\n                  previousCoords,\n                  snapGrid\n                );\n                const newGrid: Coordinate = getGrid(newCoords, snapGrid);\n\n                return (\n                  previousGrid.x !== newGrid.x || previousGrid.y !== newGrid.y\n                );\n              })\n            )\n            .pipe(\n              map(([, newCoords]) => {\n                const snapGrid: Coordinate = getSnapGrid();\n                return {\n                  clientX:\n                    Math.round(newCoords.clientX / snapGrid.x) * snapGrid.x,\n                  clientY:\n                    Math.round(newCoords.clientY / snapGrid.y) * snapGrid.y\n                };\n              })\n            )\n            .pipe(takeUntil(merge(this.mouseup, this.mousedown)));\n        })\n      )\n      .pipe(filter(() => !!currentResize));\n\n    mousedrag\n      .pipe(\n        map(({ clientX, clientY }) => {\n          return getNewBoundingRectangle(\n            currentResize!.startingRect,\n            currentResize!.edges,\n            clientX,\n            clientY\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return !!(\n            newBoundingRect.height &&\n            newBoundingRect.width &&\n            newBoundingRect.height > 0 &&\n            newBoundingRect.width > 0\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return this.validateResize\n            ? this.validateResize({\n                rectangle: newBoundingRect,\n                edges: getEdgesDiff({\n                  edges: currentResize!.edges,\n                  initialRectangle: currentResize!.startingRect,\n                  newRectangle: newBoundingRect\n                })\n              })\n            : true;\n        })\n      )\n      .subscribe((newBoundingRect: BoundingRectangle) => {\n        if (currentResize && currentResize.clonedNode) {\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${newBoundingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${newBoundingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${newBoundingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${newBoundingRect.left}px`\n          );\n        }\n\n        this.zone.run(() => {\n          this.resizing.emit({\n            edges: getEdgesDiff({\n              edges: currentResize!.edges,\n              initialRectangle: currentResize!.startingRect,\n              newRectangle: newBoundingRect\n            }),\n            rectangle: newBoundingRect\n          });\n        });\n\n        currentResize!.currentRect = newBoundingRect;\n      });\n\n    this.mousedown\n      .pipe(\n        map(({ clientX, clientY, edges }) => {\n          return (\n            edges ||\n            getResizeEdges({\n              clientX,\n              clientY,\n              elm: this.elm,\n              allowedEdges: this.resizeEdges,\n              cursorPrecision: this.resizeCursorPrecision\n            })\n          );\n        })\n      )\n      .pipe(\n        filter((edges: Edges) => {\n          return Object.keys(edges).length > 0;\n        })\n      )\n      .subscribe((edges: Edges) => {\n        if (currentResize) {\n          removeGhostElement();\n        }\n        const startingRect: BoundingRectangle = getElementRect(\n          this.elm,\n          this.ghostElementPositioning\n        );\n        currentResize = {\n          edges,\n          startingRect,\n          currentRect: startingRect\n        };\n        if (this.enableGhostResize) {\n          currentResize.clonedNode = this.elm.nativeElement.cloneNode(true);\n          const resizeCursors: ResizeCursors = Object.assign(\n            {},\n            DEFAULT_RESIZE_CURSORS,\n            this.resizeCursors\n          );\n          this.elm.nativeElement.parentElement.appendChild(\n            currentResize.clonedNode\n          );\n          this.renderer.setStyle(\n            this.elm.nativeElement,\n            'visibility',\n            'hidden'\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'position',\n            this.ghostElementPositioning\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${currentResize.startingRect.left}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${currentResize.startingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${currentResize.startingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${currentResize.startingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'cursor',\n            getResizeCursor(currentResize.edges, resizeCursors)\n          );\n          this.renderer.addClass(\n            currentResize.clonedNode,\n            RESIZE_GHOST_ELEMENT_CLASS\n          );\n          currentResize.clonedNode!.scrollTop = currentResize.startingRect\n            .scrollTop as number;\n          currentResize.clonedNode!.scrollLeft = currentResize.startingRect\n            .scrollLeft as number;\n        }\n        this.zone.run(() => {\n          this.resizeStart.emit({\n            edges: getEdgesDiff({\n              edges,\n              initialRectangle: startingRect,\n              newRectangle: startingRect\n            }),\n            rectangle: getNewBoundingRectangle(startingRect, {}, 0, 0)\n          });\n        });\n      });\n\n    this.mouseup.subscribe(() => {\n      if (currentResize) {\n        this.renderer.removeClass(this.elm.nativeElement, RESIZE_ACTIVE_CLASS);\n        this.renderer.setStyle(document.body, 'cursor', '');\n        this.renderer.setStyle(this.elm.nativeElement, 'cursor', '');\n        this.zone.run(() => {\n          this.resizeEnd.emit({\n            edges: getEdgesDiff({\n              edges: currentResize!.edges,\n              initialRectangle: currentResize!.startingRect,\n              newRectangle: currentResize!.currentRect\n            }),\n            rectangle: currentResize!.currentRect\n          });\n        });\n        removeGhostElement();\n        currentResize = null;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    this.mousedown.complete();\n    this.mouseup.complete();\n    this.mousemove.complete();\n    this.pointerEventListenerSubscriptions.pointerDown.unsubscribe();\n    this.pointerEventListenerSubscriptions.pointerMove.unsubscribe();\n    this.pointerEventListenerSubscriptions.pointerUp.unsubscribe();\n  }\n\n  private setElementClass(elm: ElementRef, name: string, add: boolean): void {\n    if (add) {\n      this.renderer.addClass(elm.nativeElement, name);\n    } else {\n      this.renderer.removeClass(elm.nativeElement, name);\n    }\n  }\n}\n\nclass PointerEventListeners {\n  public pointerDown: Observable;\n\n  public pointerMove: Observable;\n\n  public pointerUp: Observable;\n\n  private static instance: PointerEventListeners; // tslint:disable-line\n\n  public static getInstance(\n    renderer: Renderer2,\n    zone: NgZone\n  ): PointerEventListeners {\n    if (!PointerEventListeners.instance) {\n      PointerEventListeners.instance = new PointerEventListeners(\n        renderer,\n        zone\n      );\n    }\n    return PointerEventListeners.instance;\n  }\n\n  constructor(renderer: Renderer2, zone: NgZone) {\n    this.pointerDown = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseDown: () => void;\n        let unsubscribeTouchStart: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseDown = renderer.listen(\n            'document',\n            'mousedown',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchStart = renderer.listen(\n            'document',\n            'touchstart',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.touches[0].clientX,\n                clientY: event.touches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseDown();\n          unsubscribeTouchStart();\n        };\n      }\n    ).pipe(share());\n\n    this.pointerMove = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseMove: () => void;\n        let unsubscribeTouchMove: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseMove = renderer.listen(\n            'document',\n            'mousemove',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchMove = renderer.listen(\n            'document',\n            'touchmove',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.targetTouches[0].clientX,\n                clientY: event.targetTouches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseMove();\n          unsubscribeTouchMove();\n        };\n      }\n    ).pipe(share());\n\n    this.pointerUp = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseUp: () => void;\n        let unsubscribeTouchEnd: () => void;\n        let unsubscribeTouchCancel: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseUp = renderer.listen(\n            'document',\n            'mouseup',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchEnd = renderer.listen(\n            'document',\n            'touchend',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.changedTouches[0].clientX,\n                clientY: event.changedTouches[0].clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchCancel = renderer.listen(\n            'document',\n            'touchcancel',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.changedTouches[0].clientX,\n                clientY: event.changedTouches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseUp();\n          unsubscribeTouchEnd();\n          unsubscribeTouchCancel();\n        };\n      }\n    ).pipe(share());\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResizeEvent.html":{"url":"interfaces/ResizeEvent.html","title":"interface - ResizeEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ResizeEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interfaces/resize-event.interface.ts\n        \n\n            \n                Description\n            \n            \n                The $event object that is passed to the resize events\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        edges\n                                \n                                \n                                        rectangle\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        edges\n                                    \n                                \n                                \n                                    \n                                        edges:     Edges\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Edges\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rectangle\n                                    \n                                \n                                \n                                    \n                                        rectangle:     BoundingRectangle\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     BoundingRectangle\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BoundingRectangle } from './bounding-rectangle.interface';\nimport { Edges } from './edges.interface';\n\n/**\n * The `$event` object that is passed to the resize events\n */\nexport interface ResizeEvent {\n  rectangle: BoundingRectangle;\n  edges: Edges;\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/ResizeHandleDirective.html":{"url":"directives/ResizeHandleDirective.html","title":"directive - ResizeHandleDirective","body":"\n                   \n\n\n\n\n\n\n  Directives\n  ResizeHandleDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resize-handle.directive.ts\n        \n\n            \n                Description\n            \n            \n                An element placed inside a mwlResizable directive to be used as a drag and resize handle\nFor example\n\n   \n\n            \n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        selector\n                        [mwlResizeHandle]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                resizeEdges\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                touchend\n                            \n                            \n                                touchstart\n                            \n                        \n                    \n                \n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(renderer: Renderer2, element: ElementRef, zone: NgZone, resizable: ResizableDirective)\n                    \n                \n                        \n                            \n                                Defined in src/resize-handle.directive.ts:37\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                    Renderer2\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        element\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        zone\n                                                  \n                                                        \n                                                                    NgZone\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        resizable\n                                                  \n                                                        \n                                                                    ResizableDirective\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        resizeEdges\n                    \n                    \n                        The Edges object that contains the edges of the parent element that dragging the handle will trigger a resize on\n\n                            \n                            Type:    Edges\n\n                            \n                        \n                            Default value: {}\n                        \n                    \n                \n                        \n                            \n                                    Defined in src/resize-handle.directive.ts:31\n                            \n                        \n            \n        \n\n\n\n            \n    HostListeners        \n            \n                \n                    \n                        \n                        \n                            \n                            touchend\n                            \n                            \n                        \n                    \n                \n                    \n                        \n                            Arguments : '$event.changedTouches[0].clientX' '$event.changedTouches[0].clientY' \n                        \n                    \n                \n                    \ntouchend(clientX: number, clientY: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/resize-handle.directive.ts:112\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            touchstart\n                            \n                            \n                        \n                    \n                \n                    \n                        \n                            Arguments : '$event' '$event.touches[0].clientX' '$event.touches[0].clientY' \n                        \n                    \n                \n                    \ntouchstart(event: MouseEvent | TouchEvent, clientX: number, clientY: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/resize-handle.directive.ts:59\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  Input,\n  HostListener,\n  Renderer2,\n  ElementRef,\n  OnDestroy,\n  NgZone\n} from '@angular/core';\nimport { ResizableDirective } from './resizable.directive';\nimport { Edges } from './interfaces/edges.interface';\n\n/**\n * An element placed inside a `mwlResizable` directive to be used as a drag and resize handle\n *\n * For example\n *\n * ```html\n * \n *   \n * \n * ```\n */\n@Directive({\n  selector: '[mwlResizeHandle]'\n})\nexport class ResizeHandleDirective implements OnDestroy {\n  /**\n   * The `Edges` object that contains the edges of the parent element that dragging the handle will trigger a resize on\n   */\n  @Input() resizeEdges: Edges = {};\n\n  private eventListeners: {\n    touchmove?: () => void;\n    mousemove?: () => void;\n    [key: string]: (() => void) | undefined;\n  } = {};\n\n  constructor(\n    private renderer: Renderer2,\n    private element: ElementRef,\n    private zone: NgZone,\n    private resizable: ResizableDirective\n  ) {}\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n  }\n\n  /**\n   * @hidden\n   */\n  @HostListener('touchstart', [\n    '$event',\n    '$event.touches[0].clientX',\n    '$event.touches[0].clientY'\n  ])\n  @HostListener('mousedown', ['$event', '$event.clientX', '$event.clientY'])\n  onMousedown(\n    event: MouseEvent | TouchEvent,\n    clientX: number,\n    clientY: number\n  ): void {\n    event.preventDefault();\n    this.zone.runOutsideAngular(() => {\n      if (!this.eventListeners.touchmove) {\n        this.eventListeners.touchmove = this.renderer.listen(\n          this.element.nativeElement,\n          'touchmove',\n          (touchMoveEvent: TouchEvent) => {\n            this.onMousemove(\n              touchMoveEvent,\n              touchMoveEvent.targetTouches[0].clientX,\n              touchMoveEvent.targetTouches[0].clientY\n            );\n          }\n        );\n      }\n      if (!this.eventListeners.mousemove) {\n        this.eventListeners.mousemove = this.renderer.listen(\n          this.element.nativeElement,\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.onMousemove(\n              mouseMoveEvent,\n              mouseMoveEvent.clientX,\n              mouseMoveEvent.clientY\n            );\n          }\n        );\n      }\n      this.resizable.mousedown.next({\n        clientX,\n        clientY,\n        edges: this.resizeEdges\n      });\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  @HostListener('touchend', [\n    '$event.changedTouches[0].clientX',\n    '$event.changedTouches[0].clientY'\n  ])\n  @HostListener('touchcancel', [\n    '$event.changedTouches[0].clientX',\n    '$event.changedTouches[0].clientY'\n  ])\n  @HostListener('mouseup', ['$event.clientX', '$event.clientY'])\n  onMouseup(clientX: number, clientY: number): void {\n    this.zone.runOutsideAngular(() => {\n      this.unsubscribeEventListeners();\n      this.resizable.mouseup.next({\n        clientX,\n        clientY,\n        edges: this.resizeEdges\n      });\n    });\n  }\n\n  private onMousemove(\n    event: MouseEvent | TouchEvent,\n    clientX: number,\n    clientY: number\n  ): void {\n    this.resizable.mousemove.next({\n      clientX,\n      clientY,\n      edges: this.resizeEdges,\n      event\n    });\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListeners).forEach(type => {\n      (this as any).eventListeners[type]();\n      delete this.eventListeners[type];\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChange Log\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n\n3.1.0 (2018-06-19)\nFeatures\n\nimprove default resize cursors (37fc88e)\n\n\n3.0.0 (2018-05-09)\nFeatures\n\nupgrade to angular 6 (c7e3de6)\n\nBREAKING CHANGES\n\nangular 6 and rxjs 6 or higher are now required to use this package\n\n\n2.0.0 (2017-12-26)\nFeatures\n\nexport directives with Directive suffix (0440bbd)\nupgrade to angular 5 (5d6a576)\nuse lettable rxjs operators (af7abf7)\nuse ng-packagr for bundling the package (c4519a1), closes #79 #80\n\nBREAKING CHANGES\n\nthe global observable prototype is now no longer modified by this package, you must\nimport rxjs operators yourself. Also rxjs 5.5 or higher is now required to use this library\nThe UMD entry point has changed from angular-resizable-element/dist/umd/angular-resizable-element.js to angular-resizable-element/bundles/angular-resizable-element.umd.js\n\nSystem.js users will need to update their configs\n\nangular 5 or higher is now required to use this package\nThe Resizable import is now ResizableDirective and ResizeHandle is now\nResizeHandleDirective\n\n\n1.2.5 (2017-12-26)\nBug Fixes\n\nresizeHandle: allow handles to be dynamically shown (34342aa), closes #68\nresize elements that have css transforms (f24a746), closes #72\nset the resize cursor globally when resizing (71d5a05), closes #70\n\n\n1.2.4 (2017-10-21)\nBug Fixes\n\nallow angular 5 peer dependency (25cfe50)\n\n\n1.2.3 (2017-09-28)\nBug Fixes\n\nAdd startingRect scroll position to cloned node. (#66) (a056154)\n\n\n1.2.2 (2017-08-28)\nBug Fixes\n\nensure mouse event handlers are triggers outside of the angular zone (23fc6e5), closes #65\n\n\n1.2.1 (2017-08-06)\nBug Fixes\n\ncursor: change the cursor back to default on IE11 (a0323e9), closes #62\n\n\n1.2.0 (2017-06-12)\nFeatures\n\nexport Edges and BoundingRectangle interfaces for use within applications (10051cd)\n\n\n1.1.2 (2017-06-10)\nBug Fixes\n\ndragHandle: fix drag handles on firefox (1d15bb4), closes #54\n\n\n1.1.1 (2017-05-21)\nBug Fixes\n\nset ghost element width and height on resize start (be5d727), closes #53\n\n\n1.1.0 (2017-05-12)\nFeatures\n\nadd a class to the ghost element (54be6b7)\n\n\n1.0.0 (2017-03-24)\nFeatures\n\nng4: upgrade to angular 4 (4c665d2)\n\nBREAKING CHANGES\n\nng4: angular 4.0 or higher is now required to use this library. The\nupgrade should be seamless\nfor most users.\n\n\n0.8.1 (2017-03-23)\nPerformance Improvements\n\nthrottle mousemove listener events (05f7f7e)\nuse shared mouse event listeners across all resizable instances (2a4b102)\n\n\n0.8.0 (2017-03-16)\nFeatures\n\nghostElementPositioning: allow ghost element positioning to be configured (b77c9fc)\nexpose Resizable and ResizeHandle directives (3633040)\n\n\n0.7.2 (2017-03-04)\nBug Fixes\n\nrelax peer dependency warning to allow angular 4 (8232e66)\n\nPerformance Improvements\n\nrun all rezize events outside the angular zone (820612e)\nresizable: only register mouse move events when a rezize is active (a74f9e2)\nresizeHandle: dynamically register mouse move event listener (4b20cde)\n\n\n0.7.0 (2017-02-28)\nFeatures\n\ncssClasses: Gives classes to main element depend on state (8e3f108)\ncursorPrecision: allow cursor precision value to be edited (3ce508d)\n\n\n0.6.1 (2017-02-11)\nBug Fixes\n\nuniversal: remove MouseEvent reference (520abce), closes #41\n\n\n0.6.0 (2017-02-04)\nFeatures\n\nresizeCursors: allow resize cursors to be customised (99d2f66), closes #40\n\n\n0.5.7 (2017-01-30)\nBug Fixes\n\nuse correct touch event properties (0ab7d40), closes #39\n\n\n0.5.6 (2017-01-25)\nBug Fixes\n\nelement should resize on touch events (aa169c7), closes #36\n\n\n0.5.5 (2017-01-11)\nBug Fixes\n\nadd width and height to cloned node (75ce122), closes #31\nkeep cursor while resizing (93a5c4e), closes #33\n\n\n0.5.4 (2016-12-11)\nBug Fixes\n\ncursor: reset the cursor instead of changing it to auto (514851f)\n\n\n0.5.3 (2016-11-19)\nBug Fixes\n\nunsubscribe all observables when the component is destroyed (d5ea756), closes #27\n\n\n0.5.2 (2016-11-05)\nBug Fixes\n\naot: aot compatibility (9236e02)\n\n\n0.5.1 (2016-11-03)\nBug Fixes\n\ndont change the cursor when resizing an element (697c52c), closes #24\n\n\n0.5.0 (2016-10-29)\nBug Fixes\n\nfix resizing via a drag handle (5f7f468)\nprevent text from being selected when resizing an element (5571069), closes #22\n\nFeatures\n\nrename the library from angular2-resizable to angular-resizable-element (927235e), closes #21\nrename the resize output to resizing (9597986), closes #20\n\nBREAKING CHANGES\n\nThe library has been renamed to angular-resizable-element.\n\nThe UMD entry point has changed to\nnode_modules/angular-resizable-element/dist/umd/angular-resizable-element.js\nBefore(resize)=\"onResize($event)\"\n\nAfter:\n(resizing)=\"onResizing($event)\"\n0.4.1 (2016-09-28)\nBug Fixes\n\ntypings: dont include reference to core-js (68dc84f)\n\n\n0.4.0 (2016-09-25)\nFeatures\n\nbuild: support offline template compilation (f3fe12a)\n\nBREAKING CHANGES\n\nbuild: For System.js users the path to the UMD files has changed:\n\nBefore:\nnode_modules/angular2-resizable/angular2-resizable.jsAfter:\nnode_modules/angular2-resizable/dist/umd/angular2-resizable.js\n0.3.3 (2016-09-13)\nBug Fixes\n\npeerDependencies: allow any versions of angular post RC5 (cbe088f)\n\n\n0.3.2 (2016-09-03)\nFeatures\n\nangular: support RC6 (d5b18cc)\n\n\n0.3.1 (2016-08-25)\nBug Fixes\n\nrxjs: use correct rxjs operator imports in dist (858b3f8), closes #16\n\n\n0.3.0 (2016-08-12)\nFeatures\n\nevents: rename all outputs to drop the on prefix (9c76aac)\ndirective selectors are now camel case instead of dash case (ffad2ca)\nupgrade to angular RC5 (9557c0a)\n\nBREAKING CHANGES\n\nmwl-resizable is now mwlResizable and mwl-resize-handle is now mwlResizeHandle\nAngular RC5 is now required\n\nThe Resizable and ResizeHandle directives are now no longer exported. Instead you must use the ResizableModule. See the readme or the demo app for an example of how to do this.\n\nevents: The onResizeStart output has been renamed to resizeStart\n\nThe onResize output has been renamed to resize\nThe onResizeEnd output has been renamed to resizeEnd\n\n0.2.1 (2016-07-15)\nBug Fixes\n\ndemo: fix broken demo (0a5bf11)\n\n\n0.2.0 (2016-07-15)\nBug Fixes\n\ncreate a clone of the ghost element instead of applying styling to the host (fa73345), closes #15\nonly resize when the cursor is within the bounding rectangle (dedc3bb)\n\nBREAKING CHANGES\n\nenableResizeStyling has been renamed to enableGhostResize\n\n\n0.1.0 (2016-06-26)\nBug Fixes\n\nmousedrag: cancel the previous mousedrag observable when starting a new drag (149c1a4), closes #9\nonResizeEnd: call with co-ordinates of last valid resize rather than where the mouse up event w (eb314fd)\nonResizeStart: ensure the starting rectangle is a POJO rather than a bounding rectangle (81fe0b4)\ncancel mousedrag event when either a mouseup or mousedown event fires (c76be59)\ndisable dragging effects on resizable elements on webkit browsers (59078e2)\nrenamed directive selector from mwl-resizeable to mwl-resizable (c60b3f5)\n\nFeatures\n\ndisableResize: support completely disabling resizing an element (9f9c54a), closes #13\nexpose the amount each edge was resized on resize events (d664038), closes #11\nenableResizeStyling: make temporary resizing of the element opt-in by default so users can con (4c59b05), closes #5\nresizeEdges: allow the resize edges to be customised (60c2e08), closes #8\nresizeHandles: add support for nesting resize handles inside the element (1af705a), closes #10\nresizeSnapGrid: allow resizing to fit to a snap grid (74424ba), closes #3\nvalidate: provide a way for resize events to be validated (4da938d), closes #12\n\nBREAKING CHANGES\n\nenableResizeStyling: the element will no longer have its styles changed by default when dragging and\nresizing. You can now re-enable it by setting [enableResizeStyling]=\"true\" on the element.\nthe $event.edges object values now contain numbers instead of booleans\n\nrename the directive from mwl-resizeable to mwl-resizable\n\n\nresizeEdges: by default the element is no longer resizable.\n\nYou must specify [resizeEdges]={top: true, bottom: true, left: true, right: true} to get the old behaviour back\n\n0.0.3 (2016-06-13)\nBug Fixes\n\nimport missing rxjs operators (300ac10)\n\n\n0.0.2 (2016-06-13)\nBug Fixes\n\ntypes: export Edges and BoundingRectangle types (fe49114)\ndont bundle rxjs with the library (7b1280e)\n\n\n0.0.1 (2016-06-13)\nBug Fixes\n\nallow the element to be resized multiple times (bf497d2)\ndrag: disable user dragging (053fb0e)\nreset element styles on mousedown if there was a previous uncancelled resize (a8e5cd3)\noutputs: make outputs sync to prevent ui flicker (032ea5a)\ntypescript: add missing types (e722a86)\n\nFeatures\n\nimprove transforms, add resize events (0959a12)\ninitial WIP resizable implementation (22af52f)\nshow the cursor when mousing over the edge of the element (f440c87)\nsupport resizing from corners (bac87e3), closes #4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Peer Dependencies\n    \n    \n        \n            @angular/core : >=6.0.0 \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            getEdgesDiff   (src/.../resizable.directive.ts)\n                        \n                        \n                            getElementRect   (src/.../resizable.directive.ts)\n                        \n                        \n                            getNewBoundingRectangle   (src/.../resizable.directive.ts)\n                        \n                        \n                            getResizeCursor   (src/.../resizable.directive.ts)\n                        \n                        \n                            getResizeEdges   (src/.../resizable.directive.ts)\n                        \n                        \n                            isNumberCloseTo   (src/.../resizable.directive.ts)\n                        \n                        \n                            isWithinBoundingX   (src/.../resizable.directive.ts)\n                        \n                        \n                            isWithinBoundingY   (src/.../resizable.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/resizable.directive.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getEdgesDiff\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetEdgesDiff(undefined: undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getElementRect\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetElementRect(element: undefined, ghostElementPositioning: undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        element\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        ghostElementPositioning\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getNewBoundingRectangle\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetNewBoundingRectangle(startingRect: undefined, edges: undefined, clientX: undefined, clientY: undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        startingRect\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        edges\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        clientX\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        clientY\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getResizeCursor\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetResizeCursor(edges: undefined, cursors: undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        edges\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        cursors\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getResizeEdges\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetResizeEdges(undefined: undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isNumberCloseTo\n                            \n                            \n                        \n                    \n                \n                \n                    \nisNumberCloseTo(value1: undefined, value2: undefined, precision: undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value1\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        value2\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        precision\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isWithinBoundingX\n                            \n                            \n                        \n                    \n                \n                \n                    \nisWithinBoundingX(undefined: undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isWithinBoundingY\n                            \n                            \n                        \n                    \n                \n                \n                    \nisWithinBoundingY(undefined: undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nangular resizable element\n\n\n\n\n\n\n\nDemo\nhttps://mattlewis92.github.io/angular-resizable-element/demo/\nTable of contents\n\nAbout\nInstallation\nDocumentation\nDevelopment\nLicense\n\nAbout\nAn angular 6.0+ directive that allows an element to be dragged and resized\nInstallation\nInstall through npm:\nnpm install --save angular-resizable-elementThen use it in your app like so:\nimport { Component } from '@angular/core';\nimport { ResizeEvent } from 'angular-resizable-element';\n\n@Component({\n  selector: 'demo-app',\n  // you should add some more styles to the element. See the demo folder for a more fleshed out example\n  styles: [\n    `\n    mwlResizable {\n      box-sizing: border-box; // required for the enableGhostResize option to work\n    }\n  `\n  ],\n  template: `\n    \n    \n  `\n})\nexport class MyComponent {\n  onResizeEnd(event: ResizeEvent): void {\n    console.log('Element was resized', event);\n  }\n}\n\n// now use within your apps module\nimport { NgModule } from '@angular/core';\nimport { ResizableModule } from 'angular-resizable-element';\n\n@NgModule({\n  declarations: [MyComponent],\n  imports: [ResizableModule],\n  bootstrap: [MyComponent]\n})\nclass MyModule {}You may also find it useful to view the demo source.\nDocumentation\nAll documentation is auto-generated from the source and can be viewed here:\nhttps://mattlewis92.github.io/angular-resizable-element/docs/\nDevelopment\nPrepare your environment\n\nInstall Node.js and NPM (should come with)\nInstall local dev dependencies: npm install while current directory is this repo\n\nDevelopment server\nRun npm start to start a development server on port 8000 with auto reload + tests.\nTesting\nRun npm test to run tests once or npm run test:watch to continually run tests.\nRelease\nnpm run releaseLicense\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright (c) 2016 Matt Lewis\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ResizableModule\n                    \n                    \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n    \n            \n                \n                    \n                        \n                        \n                            1 module\n                        \n                    \n                \n            \n            \n                \n                    \n                        \n                        2 directives\n                    \n                \n            \n            \n                \n                    \n                        \n                        1 class\n                    \n                \n            \n            \n                \n                    \n                        \n                        6 interfaces\n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DEFAULT_RESIZE_CURSORS   (src/.../resizable.directive.ts)\n                        \n                        \n                            MOUSE_MOVE_THROTTLE_MS   (src/.../resizable.directive.ts)\n                        \n                        \n                            RESIZE_ACTIVE_CLASS   (src/.../resizable.directive.ts)\n                        \n                        \n                            RESIZE_BOTTOM_HOVER_CLASS   (src/.../resizable.directive.ts)\n                        \n                        \n                            RESIZE_GHOST_ELEMENT_CLASS   (src/.../resizable.directive.ts)\n                        \n                        \n                            RESIZE_LEFT_HOVER_CLASS   (src/.../resizable.directive.ts)\n                        \n                        \n                            RESIZE_RIGHT_HOVER_CLASS   (src/.../resizable.directive.ts)\n                        \n                        \n                            RESIZE_TOP_HOVER_CLASS   (src/.../resizable.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/resizable.directive.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_RESIZE_CURSORS\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        DEFAULT_RESIZE_CURSORS:     ResizeCursors\n\n                    \n                \n                    \n                        \n                            Type :     ResizeCursors\n\n                        \n                    \n                    \n                        \n                            Default value : Object.freeze({\n  topLeft: 'nw-resize',\n  topRight: 'ne-resize',\n  bottomLeft: 'sw-resize',\n  bottomRight: 'se-resize',\n  leftOrRight: 'col-resize',\n  topOrBottom: 'row-resize'\n})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MOUSE_MOVE_THROTTLE_MS\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        MOUSE_MOVE_THROTTLE_MS:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 50\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RESIZE_ACTIVE_CLASS\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        RESIZE_ACTIVE_CLASS:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'resize-active'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RESIZE_BOTTOM_HOVER_CLASS\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        RESIZE_BOTTOM_HOVER_CLASS:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'resize-bottom-hover'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RESIZE_GHOST_ELEMENT_CLASS\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        RESIZE_GHOST_ELEMENT_CLASS:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'resize-ghost-element'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RESIZE_LEFT_HOVER_CLASS\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        RESIZE_LEFT_HOVER_CLASS:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'resize-left-hover'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RESIZE_RIGHT_HOVER_CLASS\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        RESIZE_RIGHT_HOVER_CLASS:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'resize-right-hover'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RESIZE_TOP_HOVER_CLASS\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        RESIZE_TOP_HOVER_CLASS:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'resize-top-hover'\n                        \n                    \n\n\n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
