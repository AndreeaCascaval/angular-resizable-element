var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.2.0","fields":["title","body"],"fieldVectors":[["title/interfaces/BoundingRectangle.html",[0,0.15,1,0.736]],["body/interfaces/BoundingRectangle.html",[0,0.25,1,1.226,2,0.878,3,0.743,4,0.62,5,4.493,6,3.757,7,1.835,8,2.503,9,1.19,10,0.506,11,0.743,12,0.741,13,1.423,14,1.36,15,2.224,16,1.823,17,1.36,18,1.163,19,2.104,20,2.104,21,1.578,22,1.823,23,2.993,24,1.226,25,1.281,26,0.057,27,2.549,28,1.19,29,3.757,30,1.041,31,0.62,32,0.047,33,0.047]],["title/interfaces/Coordinate.html",[0,0.15,34,1.139]],["body/interfaces/Coordinate.html",[0,0.163,1,1.137,2,0.35,3,0.296,4,0.247,9,1.052,10,0.662,11,0.795,12,0.247,13,0.748,14,0.906,16,1.216,17,1.048,18,0.776,19,0.998,20,0.998,21,1.216,22,1.216,24,1.17,25,1.155,26,0.058,28,0.475,30,0.467,31,0.39,32,0.025,33,0.025,34,1.76,35,0.548,36,1.875,37,1.875,38,0.897,39,0.467,40,1.403,41,1.236,42,1.153,43,1.403,44,1.811,45,1.621,46,0.998,47,1.403,48,0.409,49,1.403,50,2.016,51,0.998,52,0.633,53,1.621,54,0.731,55,0.731,56,0.731,57,0.731,58,0.731,59,0.633,60,0.731,61,0.731,62,0.983,63,0.633,64,0.731,65,0.633,66,1.216,67,0.731,68,0.731,69,0.633,70,1.844,71,1.863,72,1.006,73,1.216,74,1.527,75,1.323,76,0.633,77,0.633,78,0.998,79,0.548,80,0.998,81,1.406,82,2.449,83,1.153,84,0.731,85,2.438,86,0.731,87,0.731,88,0.475,89,0.633,90,0.731,91,1.764,92,1.153,93,1.153,94,1.236,95,1.764,96,0.633,97,0.865,98,1.428,99,1.153,100,1.153,101,1.153,102,1.153,103,0.731,104,0.731,105,0.731,106,0.731,107,0.731,108,0.731,109,0.731,110,0.731,111,0.731,112,0.731,113,0.633,114,1.153,115,0.731,116,0.731,117,0.731,118,0.731,119,0.731,120,1.962,121,0.731,122,0.731,123,1.236,124,0.865,125,0.998,126,1.403,127,0.998,128,0.998,129,0.998,130,0.998,131,0.865,132,0.633,133,0.633,134,0.633,135,0.633,136,0.475,137,0.633,138,0.475,139,0.475,140,0.467,141,0.409,142,0.548,143,1.403,144,0.633,145,0.633,146,1.811,147,1.071,148,0.731,149,1.621,150,0.633,151,0.731,152,0.633,153,1.052,154,0.475,155,0.865,156,1.236,157,0.633,158,0.633,159,0.633,160,0.731,161,0.998,162,0.998,163,0.548,164,0.633,165,0.633,166,0.731,167,0.731,168,0.731,169,0.998,170,0.633,171,1.527,172,1.638,173,1.358,174,1.236,175,0.633,176,0.731,177,0.731,178,0.998,179,1.236,180,0.633,181,0.731,182,0.731,183,0.731,184,0.731,185,1.854,186,0.475,187,0.731,188,0.633,189,1.698,190,2.034,191,0.998,192,0.998,193,1.216,194,1.622,195,1.622,196,0.731,197,0.633,198,1.403,199,1.428,200,1.323,201,0.731,202,0.731,203,0.731,204,1.607,205,0.731,206,0.409,207,0.731,208,0.731,209,0.731,210,0.731,211,0.731,212,0.731,213,0.731,214,0.731,215,0.731,216,0.731,217,0.731,218,2.185,219,1.406,220,1.153,221,0.731,222,0.731,223,1.153,224,1.428,225,2.33,226,0.731,227,1.428,228,1.153,229,0.731,230,0.731,231,0.731,232,0.731,233,0.633,234,0.731,235,0.731,236,0.998,237,1.962,238,1.153,239,0.998,240,0.998,241,1.153,242,1.153,243,1.153,244,0.633,245,0.731,246,1.153,247,0.731,248,0.731,249,1.621,250,0.731,251,0.731,252,0.731,253,0.731,254,0.998,255,1.428,256,2.093,257,0.731,258,0.731,259,0.731,260,0.731,261,0.731,262,0.731,263,1.428,264,1.962,265,1.153,266,0.731,267,1.764,268,1.153,269,0.731,270,1.153,271,0.731,272,1.764,273,1.153,274,0.731,275,1.153,276,1.153,277,0.731,278,0.731,279,0.731,280,0.731,281,0.731,282,1.428,283,1.621,284,0.731,285,0.731,286,0.731,287,0.731,288,0.731,289,0.731,290,0.731,291,0.731,292,0.731,293,0.731,294,0.731,295,0.731,296,0.731,297,0.731,298,0.633,299,1.621,300,1.621,301,1.153,302,0.731,303,1.153,304,1.153,305,1.153,306,1.764,307,1.403,308,1.621,309,1.621,310,0.731,311,2.185,312,0.731,313,0.731,314,0.731,315,0.731,316,1.428,317,0.731,318,1.428,319,0.731,320,0.731,321,0.731,322,0.633,323,1.153,324,0.731,325,0.731,326,0.731,327,0.731,328,0.731,329,0.731,330,0.731,331,0.731,332,0.731,333,0.731,334,0.731,335,1.153,336,0.731,337,0.731,338,0.633,339,0.731,340,0.731,341,0.731,342,0.633,343,0.731,344,0.731,345,0.731,346,0.731,347,0.731,348,0.731,349,0.731,350,1.071,351,0.865,352,0.731,353,0.731,354,0.731,355,0.731,356,0.731,357,1.153,358,0.633,359,0.731,360,0.731,361,0.731,362,1.428,363,0.633,364,0.731,365,1.428,366,1.428,367,1.428,368,1.962,369,1.273,370,1.962,371,1.236,372,1.236,373,0.633,374,0.633,375,0.633,376,1.428,377,0.731,378,1.428,379,1.428,380,0.633,381,0.731,382,0.731,383,0.731,384,1.428,385,1.428,386,1.428,387,0.633,388,0.998,389,0.998,390,0.731]],["title/interfaces/Edges.html",[0,0.15,62,0.533]],["body/interfaces/Edges.html",[0,0.251,2,0.887,3,0.751,4,0.626,7,1.854,10,0.511,12,0.746,13,1.432,14,1.364,15,2.229,17,1.364,18,1.167,21,1.583,23,3.012,24,1.234,25,1.262,26,0.058,27,2.565,28,1.203,30,0.988,31,0.626,32,0.047,33,0.047,62,0.955,72,0.751,81,1.978,391,3.797,392,2.53,393,3.797]],["title/interfaces/PointerEventCoordinate.html",[0,0.15,69,1.139]],["body/interfaces/PointerEventCoordinate.html",[0,0.162,1,1.135,2,0.348,3,0.295,4,0.246,9,1.049,10,0.661,11,0.793,12,0.246,13,0.746,14,0.904,16,1.212,17,1.046,18,0.774,19,0.994,20,0.994,21,1.214,22,1.212,24,1.168,25,1.154,26,0.058,28,0.472,30,0.577,31,0.388,32,0.025,33,0.025,34,1.695,35,0.546,36,1.424,37,1.424,38,0.895,39,0.465,40,1.399,41,1.232,42,1.149,43,1.399,44,1.808,45,1.617,46,0.994,47,1.399,48,0.407,49,1.399,50,2.014,51,0.994,52,0.63,53,1.617,54,0.728,55,0.728,56,0.728,57,0.728,58,0.728,59,0.63,60,0.728,61,0.728,62,0.982,63,0.63,64,0.728,65,0.63,66,1.214,67,0.728,68,0.728,69,0.994,70,1.862,71,1.879,72,1.015,73,1.403,74,1.695,75,1.32,76,0.63,77,0.63,78,0.994,79,0.546,80,0.994,81,1.403,82,2.447,83,1.149,84,0.728,85,2.436,86,0.728,87,0.728,88,0.472,89,0.63,90,0.728,91,1.76,92,1.149,93,1.149,94,1.232,95,1.76,96,0.63,97,0.862,98,1.424,99,1.149,100,1.149,101,1.149,102,1.149,103,0.728,104,0.728,105,0.728,106,0.728,107,0.728,108,0.728,109,0.728,110,0.728,111,0.728,112,0.728,113,0.63,114,1.149,115,0.728,116,0.728,117,0.728,118,0.728,119,0.728,120,1.959,121,0.728,122,0.728,123,1.232,124,0.862,125,0.994,126,1.399,127,0.994,128,0.994,129,0.994,130,0.994,131,0.862,132,0.63,133,0.63,134,0.63,135,0.63,136,0.472,137,0.63,138,0.472,139,0.472,140,0.465,141,0.407,142,0.546,143,1.399,144,0.63,145,0.63,146,1.808,147,1.068,148,0.728,149,1.617,150,0.63,151,0.728,152,0.63,153,1.049,154,0.472,155,0.862,156,1.232,157,0.63,158,0.63,159,0.63,160,0.728,161,0.994,162,0.994,163,0.546,164,0.63,165,0.63,166,0.728,167,0.728,168,0.728,169,0.994,170,0.63,171,1.523,172,1.636,173,1.356,174,1.232,175,0.63,176,0.728,177,0.728,178,0.994,179,1.232,180,0.63,181,0.728,182,0.728,183,0.728,184,0.728,185,1.851,186,0.472,187,0.728,188,0.63,189,1.695,190,2.03,191,0.994,192,0.994,193,1.212,194,1.619,195,1.619,196,0.728,197,0.63,198,1.399,199,1.424,200,1.32,201,0.728,202,0.728,203,0.728,204,1.604,205,0.728,206,0.407,207,0.728,208,0.728,209,0.728,210,0.728,211,0.728,212,0.728,213,0.728,214,0.728,215,0.728,216,0.728,217,0.728,218,2.182,219,1.403,220,1.149,221,0.728,222,0.728,223,1.149,224,1.424,225,2.328,226,0.728,227,1.424,228,1.149,229,0.728,230,0.728,231,0.728,232,0.728,233,0.63,234,0.728,235,0.728,236,0.994,237,1.959,238,1.149,239,0.994,240,0.994,241,1.149,242,1.149,243,1.149,244,0.63,245,0.728,246,1.149,247,0.728,248,0.728,249,1.617,250,0.728,251,0.728,252,0.728,253,0.728,254,0.994,255,1.424,256,2.09,257,0.728,258,0.728,259,0.728,260,0.728,261,0.728,262,0.728,263,1.424,264,1.959,265,1.149,266,0.728,267,1.76,268,1.149,269,0.728,270,1.149,271,0.728,272,1.76,273,1.149,274,0.728,275,1.149,276,1.149,277,0.728,278,0.728,279,0.728,280,0.728,281,0.728,282,1.424,283,1.617,284,0.728,285,0.728,286,0.728,287,0.728,288,0.728,289,0.728,290,0.728,291,0.728,292,0.728,293,0.728,294,0.728,295,0.728,296,0.728,297,0.728,298,0.63,299,1.617,300,1.617,301,1.149,302,0.728,303,1.149,304,1.149,305,1.149,306,1.76,307,1.399,308,1.617,309,1.617,310,0.728,311,2.182,312,0.728,313,0.728,314,0.728,315,0.728,316,1.424,317,0.728,318,1.424,319,0.728,320,0.728,321,0.728,322,0.63,323,1.149,324,0.728,325,0.728,326,0.728,327,0.728,328,0.728,329,0.728,330,0.728,331,0.728,332,0.728,333,0.728,334,0.728,335,1.149,336,0.728,337,0.728,338,0.63,339,0.728,340,0.728,341,0.728,342,0.63,343,0.728,344,0.728,345,0.728,346,0.728,347,0.728,348,0.728,349,0.728,350,1.068,351,0.862,352,0.728,353,0.728,354,0.728,355,0.728,356,0.728,357,1.149,358,0.63,359,0.728,360,0.728,361,0.728,362,1.424,363,0.63,364,0.728,365,1.424,366,1.424,367,1.424,368,1.959,369,1.271,370,1.959,371,1.232,372,1.232,373,0.63,374,0.63,375,0.63,376,1.424,377,0.728,378,1.424,379,1.424,380,0.63,381,0.728,382,0.728,383,0.728,384,1.424,385,1.424,386,1.424,387,0.63,388,0.994,389,0.994,390,0.728]],["title/classes/PointerEventListeners.html",[140,0.533,195,1.139]],["body/classes/PointerEventListeners.html",[0,0.129,1,1.127,2,0.341,3,0.289,4,0.241,9,1.038,10,0.659,11,0.787,12,0.241,13,0.734,14,0.894,15,0.979,16,1.199,17,1.037,18,0.765,19,0.979,20,0.979,21,1.204,22,1.199,24,1.161,25,1.119,26,0.058,28,1.204,30,0.706,31,0.382,32,0.024,33,0.024,34,1.682,35,0.535,36,1.406,37,1.406,38,0.887,39,0.458,40,1.745,41,1.216,42,1.131,43,1.384,44,1.797,45,1.599,46,0.979,47,1.745,48,0.399,49,1.384,50,2.092,51,0.979,52,0.618,53,1.599,54,0.714,55,0.714,56,0.714,57,0.714,58,0.714,59,0.618,60,0.714,61,0.714,62,0.979,63,0.618,64,0.714,65,0.618,66,1.204,67,0.714,68,0.714,69,0.618,70,1.838,71,1.858,72,1.003,73,1.199,74,1.509,75,1.307,76,0.618,77,0.618,78,0.979,79,0.535,80,0.979,81,1.391,82,2.44,83,1.131,84,0.714,85,2.44,86,0.714,87,0.714,88,0.463,89,0.618,90,0.714,91,1.744,92,1.131,93,1.131,94,1.216,95,1.744,96,0.618,97,0.848,98,1.406,99,1.131,100,1.131,101,1.131,102,1.131,103,0.714,104,0.714,105,0.714,106,0.714,107,0.714,108,0.714,109,0.714,110,0.714,111,0.714,112,0.714,113,0.618,114,1.131,115,0.714,116,0.714,117,0.714,118,0.714,119,0.714,120,1.944,121,0.714,122,0.714,123,1.216,124,0.848,125,0.979,126,1.384,127,0.979,128,0.979,129,0.979,130,0.979,131,0.848,132,0.618,133,0.618,134,0.618,135,0.618,136,0.463,137,0.618,138,0.463,139,0.463,140,0.569,141,0.399,142,0.535,143,1.384,144,0.618,145,0.618,146,1.797,147,1.054,148,0.714,149,1.599,150,0.618,151,0.714,152,0.618,153,1.038,154,0.463,155,0.848,156,1.216,157,0.618,158,0.618,159,0.618,160,0.714,161,0.979,162,0.979,163,0.535,164,0.618,165,0.618,166,0.714,167,0.714,168,0.714,169,0.979,170,0.618,171,1.509,172,1.628,173,1.347,174,1.216,175,0.618,176,0.714,177,0.714,178,0.979,179,1.216,180,0.618,181,0.714,182,0.714,183,0.714,184,0.714,185,1.841,186,0.463,187,0.714,188,0.618,189,1.682,190,2.27,191,0.979,192,0.979,193,1.199,194,1.605,195,1.745,196,0.714,197,0.979,198,1.605,199,1.406,200,1.557,201,0.714,202,0.714,203,0.714,204,1.595,205,0.714,206,0.399,207,0.714,208,0.714,209,0.714,210,0.714,211,0.714,212,0.714,213,0.714,214,0.714,215,0.714,216,0.714,217,0.714,218,2.171,219,1.391,220,1.131,221,0.714,222,0.714,223,1.131,224,1.406,225,2.319,226,0.714,227,1.406,228,1.131,229,0.714,230,0.714,231,0.714,232,0.714,233,0.618,234,0.714,235,0.714,236,0.979,237,1.944,238,1.131,239,0.979,240,0.979,241,1.131,242,1.131,243,1.131,244,0.618,245,0.714,246,1.131,247,0.714,248,0.714,249,1.599,250,0.714,251,0.714,252,0.714,253,0.714,254,0.979,255,1.406,256,2.076,257,0.714,258,0.714,259,0.714,260,0.714,261,0.714,262,0.714,263,1.406,264,1.944,265,1.131,266,0.714,267,1.744,268,1.131,269,0.714,270,1.131,271,0.714,272,1.744,273,1.131,274,0.714,275,1.131,276,1.131,277,0.714,278,0.714,279,0.714,280,0.714,281,0.714,282,1.406,283,1.599,284,0.714,285,0.714,286,0.714,287,0.714,288,0.714,289,0.714,290,0.714,291,0.714,292,0.714,293,0.714,294,0.714,295,0.714,296,0.714,297,0.714,298,0.618,299,1.599,300,1.599,301,1.131,302,0.714,303,1.131,304,1.131,305,1.131,306,1.744,307,1.384,308,1.599,309,1.599,310,0.714,311,2.171,312,0.714,313,0.714,314,0.714,315,0.714,316,1.406,317,0.714,318,1.406,319,0.714,320,0.714,321,0.714,322,0.618,323,1.131,324,0.714,325,0.714,326,0.714,327,0.714,328,0.714,329,0.714,330,0.714,331,0.714,332,0.714,333,0.714,334,0.714,335,1.131,336,0.714,337,0.714,338,0.618,339,0.714,340,0.714,341,0.714,342,0.618,343,0.714,344,0.714,345,0.714,346,0.714,347,0.714,348,0.714,349,0.714,350,1.307,351,0.848,352,0.714,353,0.714,354,1.599,355,1.599,356,1.599,357,1.599,358,0.618,359,0.714,360,0.714,361,1.406,362,1.406,363,0.979,364,0.714,365,1.406,366,1.406,367,1.406,368,1.944,369,1.261,370,1.944,371,1.216,372,1.216,373,0.618,374,0.618,375,0.618,376,1.406,377,0.714,378,1.406,379,1.406,380,0.618,381,0.714,382,0.714,383,0.714,384,1.406,385,1.406,386,1.406,387,0.618,388,0.979,389,0.979,390,0.714,394,2.317,395,1.462,396,1.544,397,1.462,398,1.462,399,1.462,400,1.462,401,1.462]],["title/directives/ResizableDirective.html",[39,0.533,141,0.736]],["body/directives/ResizableDirective.html",[0,0.123,1,1.106,2,0.324,3,0.274,4,0.229,7,0.677,9,1.007,10,0.692,11,0.896,12,0.229,14,0.95,16,1.164,17,1.065,18,0.813,19,0.939,20,0.939,21,1.235,22,1.164,24,1.141,25,1.117,26,0.058,28,1.435,30,0.866,31,0.367,32,0.023,33,0.023,34,1.648,35,0.508,36,1.358,37,1.358,38,0.867,39,0.55,40,1.343,41,1.175,42,1.358,43,1.569,44,1.851,45,1.904,46,1.175,47,1.343,48,0.379,49,1.343,50,1.984,51,0.939,52,0.586,53,1.553,54,0.677,55,0.677,56,0.677,57,0.677,58,0.677,59,0.586,60,0.677,61,0.677,62,0.993,63,0.586,64,0.677,65,0.586,66,1.324,67,0.677,68,0.677,69,0.586,70,1.824,71,1.846,72,1.029,73,1.164,74,1.47,75,1.428,76,0.586,77,0.586,78,0.939,79,0.508,80,1.175,81,1.484,82,2.422,83,1.085,84,0.677,85,2.422,86,0.677,87,0.677,88,1.284,89,0.586,90,0.677,91,1.699,92,1.085,93,1.085,94,1.175,95,1.699,96,0.586,97,1.164,98,1.699,99,1.085,100,1.085,101,1.085,102,1.085,103,0.677,104,0.677,105,0.677,106,0.677,107,0.677,108,0.677,109,0.677,110,0.677,111,0.677,112,0.677,113,0.586,114,1.085,115,0.677,116,0.677,117,0.677,118,0.677,119,0.677,120,1.904,121,0.677,122,0.677,123,1.175,124,1.018,125,0.939,126,1.343,127,0.939,128,0.939,129,0.939,130,0.939,131,1.018,132,0.586,133,0.586,134,0.939,135,0.939,136,0.704,137,0.586,138,0.704,139,0.704,140,0.44,141,0.607,142,0.814,143,1.712,144,0.939,145,0.939,146,1.885,147,1.359,148,1.085,149,1.979,150,0.939,151,1.358,152,0.939,153,1.284,154,1.324,155,1.164,156,1.569,157,0.939,158,0.939,159,0.939,160,1.085,161,1.47,162,1.47,163,1.018,164,0.939,165,0.939,166,1.085,167,1.085,168,1.085,169,1.343,170,1.175,171,1.812,172,1.659,173,1.413,174,1.343,175,0.939,176,1.085,177,1.358,178,1.175,179,1.569,180,0.939,181,1.085,182,1.358,183,1.085,184,1.085,185,1.812,186,0.704,187,1.085,188,0.939,189,1.648,190,1.979,191,0.939,192,0.939,193,1.164,194,1.569,195,1.569,196,0.677,197,0.586,198,1.343,199,1.358,200,1.274,201,0.677,202,0.677,203,0.677,204,1.57,205,0.677,206,0.379,207,0.677,208,0.677,209,0.677,210,0.677,211,0.677,212,0.677,213,0.677,214,0.677,215,0.677,216,0.677,217,0.677,218,2.139,219,1.359,220,1.085,221,0.677,222,0.677,223,1.085,224,1.358,225,2.293,226,0.677,227,1.358,228,1.085,229,0.677,230,0.677,231,0.677,232,0.677,233,0.586,234,0.677,235,0.677,236,0.939,237,1.904,238,1.085,239,0.939,240,0.939,241,1.085,242,1.085,243,1.085,244,0.586,245,0.677,246,1.085,247,0.677,248,0.677,249,1.553,250,0.677,251,0.677,252,0.677,253,0.677,254,0.939,255,1.358,256,2.041,257,0.677,258,0.677,259,0.677,260,0.677,261,0.677,262,0.677,263,1.358,264,1.904,265,1.085,266,0.677,267,1.699,268,1.085,269,0.677,270,1.085,271,0.677,272,1.699,273,1.085,274,0.677,275,1.085,276,1.085,277,0.677,278,0.677,279,0.677,280,0.677,281,0.677,282,1.358,283,1.553,284,0.677,285,0.677,286,0.677,287,0.677,288,0.677,289,0.677,290,0.677,291,0.677,292,0.677,293,0.677,294,0.677,295,0.677,296,0.677,297,0.677,298,0.586,299,1.553,300,1.553,301,1.085,302,0.677,303,1.085,304,1.085,305,1.085,306,1.699,307,1.343,308,1.553,309,1.553,310,0.677,311,2.139,312,0.677,313,0.677,314,0.677,315,0.677,316,1.358,317,0.677,318,1.358,319,0.677,320,0.677,321,0.677,322,0.586,323,1.085,324,0.677,325,0.677,326,0.677,327,0.677,328,0.677,329,0.677,330,0.677,331,0.677,332,0.677,333,0.677,334,0.677,335,1.085,336,0.677,337,0.677,338,0.586,339,0.677,340,0.677,341,0.677,342,0.586,343,0.677,344,0.677,345,0.677,346,0.677,347,0.677,348,0.677,349,0.677,350,1.018,351,0.814,352,0.677,353,0.677,354,0.677,355,0.677,356,0.677,357,1.085,358,0.586,359,0.677,360,0.677,361,0.677,362,1.358,363,0.586,364,0.677,365,1.358,366,1.358,367,1.358,368,1.904,369,1.235,370,1.904,371,1.175,372,1.175,373,0.586,374,0.586,375,0.586,376,1.358,377,0.677,378,1.358,379,1.358,380,0.586,381,0.677,382,0.677,383,0.677,384,1.358,385,1.358,386,1.358,387,0.586,388,0.939,389,0.939,390,0.677,402,1.108,403,1.387,404,1.387,405,1.387,406,1.387,407,1.387,408,1.387,409,1.387,410,1.387,411,1.387,412,1.387,413,1.387]],["title/modules/ResizableModule.html",[414,1.139,415,1.317]],["body/modules/ResizableModule.html",[2,0.951,3,0.805,4,0.672,10,0.548,26,0.057,31,0.82,32,0.049,33,0.049,38,1.161,48,1.112,140,0.805,141,1.419,414,1.721,415,2.3,416,4.073,417,3.763,418,2.95,419,3.763,420,3.253,421,4.073]],["title/interfaces/ResizeCursors.html",[0,0.15,173,0.854]],["body/interfaces/ResizeCursors.html",[0,0.161,1,1.132,2,0.346,3,0.293,4,0.244,9,1.045,10,0.66,11,0.791,12,0.244,13,0.742,14,0.901,16,1.208,17,1.043,18,0.771,19,0.989,20,0.989,21,1.21,22,1.208,24,1.347,25,1.122,26,0.058,28,0.469,30,0.755,31,0.386,32,0.025,33,0.025,34,1.69,35,0.542,36,1.417,37,1.417,38,0.892,39,0.463,40,1.394,41,1.226,42,1.143,43,1.394,44,1.804,45,1.611,46,0.989,47,1.394,48,0.404,49,1.394,50,2.011,51,0.989,52,0.625,53,1.611,54,0.723,55,0.723,56,0.723,57,0.723,58,0.723,59,0.625,60,0.723,61,0.723,62,0.981,63,0.625,64,0.723,65,0.625,66,1.21,67,0.723,68,0.723,69,0.625,70,1.841,71,1.861,72,1.005,73,1.208,74,1.518,75,1.315,76,0.625,77,0.625,78,0.989,79,0.542,80,0.989,81,1.399,82,2.445,83,1.143,84,0.723,85,2.434,86,0.723,87,0.723,88,0.469,89,0.625,90,0.723,91,1.754,92,1.143,93,1.143,94,1.226,95,1.754,96,0.625,97,0.857,98,1.417,99,1.143,100,1.143,101,1.143,102,1.143,103,0.723,104,0.723,105,0.723,106,0.723,107,0.723,108,0.723,109,0.723,110,0.723,111,0.723,112,0.723,113,0.625,114,1.143,115,0.723,116,0.723,117,0.723,118,0.723,119,0.723,120,1.953,121,0.723,122,0.723,123,1.226,124,0.857,125,0.989,126,1.394,127,0.989,128,0.989,129,0.989,130,0.989,131,0.857,132,0.625,133,0.625,134,0.625,135,0.625,136,0.469,137,0.625,138,0.469,139,0.469,140,0.463,141,0.404,142,0.542,143,1.394,144,0.625,145,0.625,146,1.804,147,1.063,148,0.723,149,1.611,150,0.625,151,0.723,152,0.625,153,1.045,154,0.469,155,0.857,156,1.226,157,0.625,158,0.625,159,0.625,160,0.723,161,0.989,162,0.989,163,0.542,164,0.625,165,0.625,166,0.723,167,0.723,168,0.723,169,0.989,170,0.625,171,1.518,172,1.633,173,1.385,174,1.226,175,0.625,176,0.723,177,0.723,178,0.989,179,1.226,180,0.625,181,0.723,182,0.723,183,0.723,184,0.723,185,1.848,186,0.469,187,0.723,188,0.625,189,1.69,190,2.025,191,0.989,192,0.989,193,1.208,194,1.614,195,1.614,196,0.723,197,0.625,198,1.394,199,1.417,200,1.315,201,0.723,202,0.723,203,0.723,204,1.601,205,0.723,206,0.404,207,0.723,208,0.723,209,0.723,210,0.723,211,0.723,212,0.723,213,0.723,214,0.723,215,0.723,216,0.723,217,0.723,218,2.178,219,1.399,220,1.143,221,0.723,222,0.723,223,1.143,224,1.417,225,2.324,226,0.723,227,1.417,228,1.143,229,0.723,230,0.723,231,0.723,232,0.723,233,0.625,234,0.723,235,0.723,236,0.989,237,1.953,238,1.143,239,0.989,240,0.989,241,1.143,242,1.143,243,1.143,244,0.625,245,0.723,246,1.143,247,0.723,248,0.723,249,1.611,250,0.723,251,0.723,252,0.723,253,0.723,254,0.989,255,1.417,256,2.085,257,0.723,258,0.723,259,0.723,260,0.723,261,0.723,262,0.723,263,1.417,264,1.953,265,1.143,266,0.723,267,1.754,268,1.143,269,0.723,270,1.143,271,0.723,272,1.754,273,1.143,274,0.723,275,1.143,276,1.143,277,0.723,278,0.723,279,0.723,280,0.723,281,0.723,282,1.417,283,1.611,284,0.723,285,0.723,286,0.723,287,0.723,288,0.723,289,0.723,290,0.723,291,0.723,292,0.723,293,0.723,294,0.723,295,0.723,296,0.723,297,0.723,298,0.625,299,1.611,300,1.611,301,1.143,302,0.723,303,1.143,304,1.143,305,1.143,306,1.754,307,1.394,308,1.611,309,1.611,310,0.723,311,2.178,312,0.723,313,0.723,314,0.723,315,0.723,316,1.417,317,0.723,318,1.417,319,0.723,320,0.723,321,0.723,322,0.625,323,1.143,324,0.723,325,0.723,326,0.723,327,0.723,328,0.723,329,0.723,330,0.723,331,0.723,332,0.723,333,0.723,334,0.723,335,1.143,336,0.723,337,0.723,338,0.625,339,0.723,340,0.723,341,0.723,342,0.625,343,0.723,344,0.723,345,0.723,346,0.723,347,0.723,348,0.723,349,0.723,350,1.063,351,0.857,352,0.723,353,0.723,354,0.723,355,0.723,356,0.723,357,1.143,358,0.625,359,0.723,360,0.723,361,0.723,362,1.417,363,0.625,364,0.723,365,1.417,366,1.417,367,1.417,368,1.953,369,1.268,370,1.953,371,1.226,372,1.226,373,0.625,374,0.625,375,0.625,376,1.417,377,0.723,378,1.417,379,1.417,380,0.625,381,0.723,382,0.723,383,0.723,384,1.417,385,1.417,386,1.417,387,0.625,388,0.989,389,0.989,390,0.723,422,2.319,423,2.319,424,2.319,425,2.319,426,2.319,427,2.319]],["title/interfaces/ResizeEvent.html",[0,0.15,66,0.854]],["body/interfaces/ResizeEvent.html",[0,0.259,1,1.386,2,0.932,3,0.789,4,0.658,7,1.949,8,2.659,9,1.609,10,0.627,12,0.658,13,1.475,26,0.057,30,0.921,31,0.658,32,0.049,33,0.049,38,1.087,62,1.052,65,1.686,66,1.475,72,1.004,152,1.967,153,1.475,428,3.991,429,3.991,430,3.991]],["title/directives/ResizeHandleDirective.html",[39,0.533,418,1.53]],["body/directives/ResizeHandleDirective.html",[2,0.697,3,0.59,4,0.492,7,1.457,10,0.669,11,0.982,12,0.492,15,1.26,23,1.988,24,0.814,25,1.2,26,0.058,27,1.692,28,1.453,30,0.769,31,0.492,32,0.041,33,0.041,38,1.011,39,0.941,40,1.937,41,1.937,44,1.937,46,1.828,47,1.937,48,0.814,62,1.016,63,1.26,70,1.785,71,1.844,72,0.964,73,1.679,74,1.937,88,0.945,134,1.643,136,1.232,137,1.26,138,1.232,139,1.232,140,0.59,141,1.252,142,1.424,153,1.232,154,0.945,155,1.584,186,1.453,189,1.643,193,1.424,194,2.098,197,1.643,198,1.643,200,1.584,204,1.844,206,1.062,233,1.26,239,1.828,342,1.26,350,1.092,363,1.26,371,1.643,372,1.643,373,1.643,374,1.643,375,1.643,380,1.643,387,1.643,388,1.828,389,1.828,392,2.591,396,1.988,402,2.383,418,2.206,420,2.383,431,4.756,432,2.983,433,3.107,434,3.663,435,3.107,436,4.327,437,2.983,438,3.107,439,3.889,440,2.983,441,3.889,442,2.983,443,2.983,444,2.983,445,2.983,446,2.983,447,3.889,448,2.983,449,2.983,450,2.983,451,3.889,452,3.889,453,3.889,454,3.889,455,3.889,456,3.889,457,2.983,458,2.983,459,3.889,460,3.889,461,2.983,462,2.983,463,2.983,464,2.983,465,2.983,466,2.983,467,2.983,468,2.983,469,2.983,470,2.983,471,2.983,472,2.983,473,2.983,474,2.983,475,2.983]],["title/changelog.html",[476,1.515,477,1.11,478,2.273]],["body/changelog.html",[0,0.106,1,0.779,4,0.47,8,1.9,9,1.08,10,0.726,11,1.016,13,0.607,14,0.523,16,1.044,17,0.523,18,0.447,22,1.044,25,0.447,26,0.03,30,0.747,31,0.623,32,0.03,33,0.03,38,0.882,39,0.867,43,1.852,50,1.44,52,1.904,59,0.809,62,0.798,72,0.993,73,0.701,79,0.701,80,0.809,81,0.701,88,0.903,89,1.205,97,0.701,124,0.701,131,1.382,135,1.205,136,0.607,138,0.903,139,0.607,140,0.564,141,0.523,142,0.701,143,0.809,144,0.809,145,0.809,146,1.595,147,1.741,150,1.205,153,0.607,154,1.279,155,1.044,156,1.44,157,0.809,158,0.809,159,0.809,161,0.809,162,0.809,163,0.701,164,0.809,165,0.809,169,1.595,170,0.809,171,1.788,172,1.763,173,0.607,175,0.809,178,1.205,179,2.218,180,0.809,185,0.809,186,1.389,191,0.809,192,1.205,193,0.701,200,1.044,206,1.299,219,0.701,240,0.809,254,1.44,351,1.55,358,0.809,369,0.607,392,1.276,415,0.935,418,1.086,433,1.529,434,3.225,435,1.529,438,1.529,477,1.664,479,5.02,480,1.915,481,1.915,482,1.915,483,2.278,484,1.915,485,2.852,486,1.915,487,1.915,488,1.915,489,3.776,490,4.037,491,4.385,492,5.215,493,3.408,494,1.915,495,1.915,496,1.915,497,1.915,498,3.408,499,2.852,500,4.988,501,1.915,502,1.915,503,4.506,504,2.852,505,3.776,506,1.915,507,1.915,508,3.776,509,4.233,510,4.037,511,4.032,512,2.722,513,1.915,514,4.506,515,3.776,516,3.924,517,3.225,518,3.016,519,1.915,520,5.097,521,4.385,522,3.408,523,1.915,524,1.915,525,3.776,526,1.915,527,1.915,528,3.776,529,1.915,530,1.915,531,1.915,532,2.852,533,1.915,534,5.25,535,1.915,536,1.915,537,2.852,538,1.915,539,3.776,540,1.529,541,1.915,542,1.915,543,4.037,544,3.408,545,2.852,546,2.852,547,2.852,548,2.852,549,1.915,550,1.915,551,2.852,552,4.037,553,1.915,554,1.915,555,1.915,556,4.233,557,1.915,558,2.852,559,1.915,560,1.915,561,1.915,562,1.915,563,1.915,564,1.915,565,1.915,566,1.915,567,1.915,568,3.408,569,2.278,570,1.933,571,1.915,572,1.915,573,3.776,574,1.915,575,3.408,576,2.852,577,1.915,578,1.915,579,1.915,580,1.915,581,2.852,582,1.915,583,1.915,584,1.915,585,2.852,586,1.915,587,1.915,588,1.915,589,1.915,590,2.278,591,1.915,592,1.915,593,1.915,594,1.915,595,1.915,596,1.915,597,1.915,598,1.915,599,1.915,600,1.915,601,1.915,602,1.915,603,1.915,604,2.852,605,2.852,606,3.408,607,1.915,608,1.915,609,1.915,610,1.915,611,2.852,612,1.915,613,3.408,614,1.915,615,1.915,616,1.915,617,2.852,618,1.915,619,1.915,620,2.852,621,1.915,622,1.915,623,2.852,624,1.915,625,1.915,626,1.915,627,1.529,628,2.852,629,1.915,630,2.852,631,2.852,632,1.915,633,1.915,634,1.915,635,3.408,636,1.915,637,1.915,638,1.915,639,1.915,640,1.915,641,1.915,642,1.915,643,1.915,644,4.385,645,1.915,646,1.915,647,2.852,648,1.915,649,1.915,650,1.915,651,2.852,652,1.915,653,1.915,654,1.915,655,3.408,656,1.915,657,2.852,658,2.852,659,1.915,660,1.915,661,1.915,662,3.408,663,1.915,664,1.915,665,1.915,666,1.915,667,1.915,668,1.915,669,1.915,670,1.915,671,1.915,672,4.01,673,2.852,674,4.037,675,1.529,676,1.915,677,1.915,678,1.915,679,1.529,680,1.915,681,1.915,682,1.915,683,1.915,684,2.852,685,1.915,686,1.915,687,1.915,688,3.408,689,1.915,690,1.915,691,1.915,692,1.915,693,1.915,694,2.852,695,1.915,696,1.915,697,1.915,698,1.915,699,1.915,700,4.687,701,1.915,702,1.915,703,1.915,704,1.915,705,1.915,706,1.915,707,1.915,708,1.915,709,1.529,710,1.915,711,1.915,712,1.915,713,1.915,714,2.852,715,4.037,716,1.915,717,1.529,718,1.915,719,1.915,720,1.915,721,2.852,722,1.915,723,1.915,724,1.915,725,1.915,726,1.915,727,4.037,728,1.915,729,1.915,730,3.408,731,1.915,732,1.915,733,1.915,734,1.915,735,1.915,736,1.915,737,1.915,738,1.915,739,1.915,740,1.915,741,1.915,742,1.915,743,2.852,744,1.915,745,1.915,746,1.915,747,4.233,748,1.915,749,2.722,750,1.529,751,2.852,752,1.915,753,2.852,754,1.915,755,3.408,756,1.915,757,1.915,758,1.915,759,1.915,760,1.915,761,2.722,762,1.915,763,1.915,764,1.915,765,3.408,766,1.915,767,2.852,768,1.915,769,1.915,770,1.915,771,1.915,772,1.915,773,3.408,774,1.915,775,1.915,776,1.915,777,1.915,778,1.915,779,1.915,780,1.915,781,3.408,782,1.915,783,1.915,784,1.915,785,1.915,786,1.915,787,1.915,788,1.915,789,1.915,790,1.915,791,1.915,792,1.915,793,1.915,794,1.915,795,1.915,796,1.915,797,1.915,798,1.529,799,1.915,800,1.529,801,1.915,802,1.915,803,1.915,804,1.915,805,1.915,806,1.915,807,1.915,808,1.915,809,1.915,810,1.915,811,2.852,812,1.915,813,1.915,814,1.915,815,1.915,816,1.915,817,1.915,818,1.915,819,1.915,820,1.915,821,1.915,822,1.915,823,1.915,824,1.915,825,1.915,826,1.915,827,1.915,828,1.915,829,1.915,830,1.915,831,1.915,832,1.915,833,1.915,834,1.915,835,1.915,836,1.915]],["title/dependencies.html",[518,1.816,570,1.833]],["body/dependencies.html",[26,0.053,32,0.051,33,0.051,48,1.158,569,3.388,570,2.406,837,4.241]],["title/miscellaneous/functions.html",[75,1.183,838,1.29]],["body/miscellaneous/functions.html",[11,0.753,12,0.628,15,2.23,26,0.056,27,3.073,32,0.048,33,0.048,35,1.395,62,0.956,70,1.658,71,1.658,75,1.395,76,1.914,77,1.609,78,1.914,79,1.658,97,1.658,113,1.914,172,1.658,219,1.395,236,1.914,244,1.914,298,1.914,307,1.914,322,1.914,338,1.609,350,1.932,396,3.517,838,2.161,839,4.216,840,4.529,841,3.809,842,3.809,843,3.809,844,3.809,845,3.809,846,3.809,847,3.809]],["title/index.html",[12,0.375,476,1.515,477,1.11]],["body/index.html",[3,0.851,10,0.7,11,0.987,15,1.478,26,0.057,31,0.577,32,0.045,33,0.045,38,1.166,39,0.692,48,1.174,66,1.363,72,0.692,136,1.108,138,1.108,139,1.108,140,0.851,147,1.28,163,1.28,186,1.108,188,1.478,204,1.28,206,1.272,351,1.28,369,1.476,414,1.478,415,2.1,417,2.794,419,3.436,477,2.1,483,2.794,511,3.986,516,2.794,517,2.794,570,1.984,590,2.794,627,4.058,675,3.436,679,3.436,717,2.794,749,3.882,750,3.721,761,3.436,848,4.302,849,3.498,850,3.498,851,3.498,852,5.147,853,4.86,854,2.33,855,3.498,856,3.498,857,5.198,858,3.498,859,3.498,860,4.302,861,3.498,862,3.498,863,2.794,864,4.302,865,3.498,866,3.498,867,3.498,868,4.659,869,3.498,870,3.498,871,3.498,872,3.498,873,3.498,874,4.302,875,3.498,876,3.498,877,3.498,878,3.498,879,3.498,880,3.498,881,3.498,882,3.498,883,3.498,884,3.498,885,3.498,886,3.498,887,4.302,888,3.498,889,3.498,890,3.498,891,4.99,892,3.498,893,3.498,894,3.498,895,3.498,896,2.794]],["title/license.html",[476,1.515,477,1.11,854,1.515]],["body/license.html",[4,0.633,18,0.896,26,0.048,32,0.048,33,0.048,49,1.621,51,1.621,72,0.759,206,1.242,369,1.216,540,3.065,672,3.065,709,3.874,798,3.065,800,3.065,854,2.557,863,3.065,896,3.634,897,4.849,898,3.838,899,3.838,900,3.838,901,4.55,902,3.838,903,3.838,904,3.838,905,3.838,906,4.55,907,3.838,908,5.015,909,5.317,910,3.838,911,4.55,912,4.849,913,3.838,914,4.55,915,3.838,916,3.838,917,3.838,918,3.838,919,3.838,920,3.838,921,3.838,922,3.838,923,3.838,924,3.838,925,4.55,926,4.55,927,3.838,928,3.838,929,4.55,930,3.838,931,3.838,932,3.838,933,3.838,934,3.838,935,3.838,936,3.838,937,3.838,938,3.838,939,3.838,940,3.838,941,3.838,942,3.838,943,3.838,944,3.838,945,3.838,946,3.838,947,3.838,948,3.838,949,3.838]],["title/modules.html",[414,1.537]],["body/modules.html",[26,0.051,32,0.051,33,0.051,414,1.796,415,2.076,950,4.251]],["title/overview.html",[951,2.905]],["body/overview.html",[0,0.235,26,0.051,32,0.051,33,0.051,39,0.835,94,2.031,96,1.783,140,0.835,414,1.783,512,3.372,951,3.372]],["title/miscellaneous/variables.html",[838,1.29,952,2.581]],["body/miscellaneous/variables.html",[10,0.721,11,0.731,12,0.609,14,1.009,17,1.009,18,0.863,21,1.171,24,1.463,25,1.039,26,0.057,30,1.038,32,0.047,33,0.047,35,1.353,88,1.663,123,2.016,124,1.353,125,2.016,126,2.092,127,2.016,128,2.016,129,2.016,130,2.016,131,1.353,132,2.016,133,1.561,154,1.663,173,1.409,174,2.016,422,2.952,423,2.952,424,2.952,425,2.952,426,2.952,427,2.952,838,2.096,839,4.194,952,2.952,953,3.695,954,3.695,955,3.695,956,3.695,957,3.695,958,3.695,959,3.695]]],"invertedIndex":[["",{"_index":26,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":120,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["0.0.1",{"_index":816,"title":{},"body":{"changelog.html":{}}}],["0.0.2",{"_index":813,"title":{},"body":{"changelog.html":{}}}],["0.0.3",{"_index":810,"title":{},"body":{"changelog.html":{}}}],["0.1.0",{"_index":766,"title":{},"body":{"changelog.html":{}}}],["0.2.0",{"_index":758,"title":{},"body":{"changelog.html":{}}}],["0.2.1",{"_index":754,"title":{},"body":{"changelog.html":{}}}],["0.3.0",{"_index":738,"title":{},"body":{"changelog.html":{}}}],["0.3.1",{"_index":735,"title":{},"body":{"changelog.html":{}}}],["0.3.2",{"_index":732,"title":{},"body":{"changelog.html":{}}}],["0.3.3",{"_index":726,"title":{},"body":{"changelog.html":{}}}],["0.4.0",{"_index":713,"title":{},"body":{"changelog.html":{}}}],["0.4.1",{"_index":708,"title":{},"body":{"changelog.html":{}}}],["0.5.0",{"_index":690,"title":{},"body":{"changelog.html":{}}}],["0.5.1",{"_index":687,"title":{},"body":{"changelog.html":{}}}],["0.5.2",{"_index":683,"title":{},"body":{"changelog.html":{}}}],["0.5.3",{"_index":677,"title":{},"body":{"changelog.html":{}}}],["0.5.4",{"_index":671,"title":{},"body":{"changelog.html":{}}}],["0.5.5",{"_index":665,"title":{},"body":{"changelog.html":{}}}],["0.5.6",{"_index":661,"title":{},"body":{"changelog.html":{}}}],["0.5.7",{"_index":654,"title":{},"body":{"changelog.html":{}}}],["0.6.0",{"_index":650,"title":{},"body":{"changelog.html":{}}}],["0.6.1",{"_index":643,"title":{},"body":{"changelog.html":{}}}],["0.7.0",{"_index":634,"title":{},"body":{"changelog.html":{}}}],["0.7.2",{"_index":622,"title":{},"body":{"changelog.html":{}}}],["0.8.0",{"_index":616,"title":{},"body":{"changelog.html":{}}}],["0.8.1",{"_index":610,"title":{},"body":{"changelog.html":{}}}],["01",{"_index":655,"title":{},"body":{"changelog.html":{}}}],["02",{"_index":635,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":491,"title":{},"body":{"changelog.html":{}}}],["032ea5a",{"_index":826,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":623,"title":{},"body":{"changelog.html":{}}}],["0440bbd",{"_index":524,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":508,"title":{},"body":{"changelog.html":{}}}],["053fb0e",{"_index":820,"title":{},"body":{"changelog.html":{}}}],["05f7f7e",{"_index":614,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":503,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":498,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":490,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":509,"title":{},"body":{"changelog.html":{}}}],["0959a12",{"_index":829,"title":{},"body":{"changelog.html":{}}}],["0a5bf11",{"_index":757,"title":{},"body":{"changelog.html":{}}}],["0ab7d40",{"_index":659,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":94,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"overview.html":{}}}],["1.0.0",{"_index":603,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":601,"title":{},"body":{"changelog.html":{}}}],["1.1.1",{"_index":598,"title":{},"body":{"changelog.html":{}}}],["1.1.2",{"_index":593,"title":{},"body":{"changelog.html":{}}}],["1.2.0",{"_index":589,"title":{},"body":{"changelog.html":{}}}],["1.2.1",{"_index":584,"title":{},"body":{"changelog.html":{}}}],["1.2.2",{"_index":579,"title":{},"body":{"changelog.html":{}}}],["1.2.3",{"_index":572,"title":{},"body":{"changelog.html":{}}}],["1.2.4",{"_index":567,"title":{},"body":{"changelog.html":{}}}],["1.2.5",{"_index":557,"title":{},"body":{"changelog.html":{}}}],["10",{"_index":169,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["10051cd",{"_index":592,"title":{},"body":{"changelog.html":{}}}],["10px",{"_index":168,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["11",{"_index":644,"title":{},"body":{"changelog.html":{}}}],["12",{"_index":521,"title":{},"body":{"changelog.html":{}}}],["13",{"_index":727,"title":{},"body":{"changelog.html":{}}}],["149c1a4",{"_index":768,"title":{},"body":{"changelog.html":{}}}],["15",{"_index":755,"title":{},"body":{"changelog.html":{}}}],["16",{"_index":617,"title":{},"body":{"changelog.html":{}}}],["19",{"_index":504,"title":{},"body":{"changelog.html":{}}}],["1af705a",{"_index":797,"title":{},"body":{"changelog.html":{}}}],["1d15bb4",{"_index":596,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":96,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"overview.html":{}}}],["2.0.0",{"_index":519,"title":{},"body":{"changelog.html":{}}}],["20",{"_index":704,"title":{},"body":{"changelog.html":{}}}],["2016",{"_index":672,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["2017",{"_index":520,"title":{},"body":{"changelog.html":{}}}],["2018",{"_index":489,"title":{},"body":{"changelog.html":{}}}],["21",{"_index":568,"title":{},"body":{"changelog.html":{}}}],["22",{"_index":699,"title":{},"body":{"changelog.html":{}}}],["22af52f",{"_index":832,"title":{},"body":{"changelog.html":{}}}],["23",{"_index":499,"title":{},"body":{"changelog.html":{}}}],["23fc6e5",{"_index":582,"title":{},"body":{"changelog.html":{}}}],["24",{"_index":604,"title":{},"body":{"changelog.html":{}}}],["25",{"_index":662,"title":{},"body":{"changelog.html":{}}}],["25cfe50",{"_index":571,"title":{},"body":{"changelog.html":{}}}],["25d6fa3",{"_index":496,"title":{},"body":{"changelog.html":{}}}],["26",{"_index":522,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":682,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":573,"title":{},"body":{"changelog.html":{}}}],["29",{"_index":691,"title":{},"body":{"changelog.html":{}}}],["2a4b102",{"_index":615,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":80,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["3.0.0",{"_index":507,"title":{},"body":{"changelog.html":{}}}],["3.1.0",{"_index":502,"title":{},"body":{"changelog.html":{}}}],["3.2.0",{"_index":497,"title":{},"body":{"changelog.html":{}}}],["3.2.1",{"_index":488,"title":{},"body":{"changelog.html":{}}}],["30",{"_index":656,"title":{},"body":{"changelog.html":{}}}],["300ac10",{"_index":812,"title":{},"body":{"changelog.html":{}}}],["31",{"_index":667,"title":{},"body":{"changelog.html":{}}}],["33",{"_index":670,"title":{},"body":{"changelog.html":{}}}],["34342aa",{"_index":560,"title":{},"body":{"changelog.html":{}}}],["36",{"_index":664,"title":{},"body":{"changelog.html":{}}}],["3633040",{"_index":621,"title":{},"body":{"changelog.html":{}}}],["37fc88e",{"_index":506,"title":{},"body":{"changelog.html":{}}}],["39",{"_index":660,"title":{},"body":{"changelog.html":{}}}],["3ce508d",{"_index":642,"title":{},"body":{"changelog.html":{}}}],["4",{"_index":606,"title":{},"body":{"changelog.html":{}}}],["4.0",{"_index":608,"title":{},"body":{"changelog.html":{}}}],["40",{"_index":653,"title":{},"body":{"changelog.html":{}}}],["41",{"_index":649,"title":{},"body":{"changelog.html":{}}}],["4b20cde",{"_index":633,"title":{},"body":{"changelog.html":{}}}],["4c59b05",{"_index":793,"title":{},"body":{"changelog.html":{}}}],["4c665d2",{"_index":607,"title":{},"body":{"changelog.html":{}}}],["4da938d",{"_index":802,"title":{},"body":{"changelog.html":{}}}],["5",{"_index":525,"title":{},"body":{"changelog.html":{}}}],["5.5",{"_index":542,"title":{},"body":{"changelog.html":{}}}],["50",{"_index":133,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["514851f",{"_index":676,"title":{},"body":{"changelog.html":{}}}],["520abc",{"_index":648,"title":{},"body":{"changelog.html":{}}}],["53",{"_index":600,"title":{},"body":{"changelog.html":{}}}],["54",{"_index":597,"title":{},"body":{"changelog.html":{}}}],["54be6b7",{"_index":602,"title":{},"body":{"changelog.html":{}}}],["5571069",{"_index":698,"title":{},"body":{"changelog.html":{}}}],["560bcb1",{"_index":501,"title":{},"body":{"changelog.html":{}}}],["59078e2",{"_index":784,"title":{},"body":{"changelog.html":{}}}],["5d6a576",{"_index":526,"title":{},"body":{"changelog.html":{}}}],["5f7f468",{"_index":693,"title":{},"body":{"changelog.html":{}}}],["6",{"_index":512,"title":{},"body":{"changelog.html":{},"overview.html":{}}}],["6.0",{"_index":855,"title":{},"body":{"index.html":{}}}],["6.0.0",{"_index":837,"title":{},"body":{"dependencies.html":{}}}],["60c2e08",{"_index":794,"title":{},"body":{"changelog.html":{}}}],["62",{"_index":588,"title":{},"body":{"changelog.html":{}}}],["65",{"_index":583,"title":{},"body":{"changelog.html":{}}}],["66",{"_index":577,"title":{},"body":{"changelog.html":{}}}],["68",{"_index":561,"title":{},"body":{"changelog.html":{}}}],["68dc84f",{"_index":712,"title":{},"body":{"changelog.html":{}}}],["697c52c",{"_index":689,"title":{},"body":{"changelog.html":{}}}],["70",{"_index":566,"title":{},"body":{"changelog.html":{}}}],["71d5a05",{"_index":565,"title":{},"body":{"changelog.html":{}}}],["72",{"_index":564,"title":{},"body":{"changelog.html":{}}}],["74424ba",{"_index":799,"title":{},"body":{"changelog.html":{}}}],["75ce122",{"_index":666,"title":{},"body":{"changelog.html":{}}}],["79",{"_index":535,"title":{},"body":{"changelog.html":{}}}],["7b1280e",{"_index":815,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":795,"title":{},"body":{"changelog.html":{}}}],["80",{"_index":536,"title":{},"body":{"changelog.html":{}}}],["8000",{"_index":889,"title":{},"body":{"index.html":{}}}],["81fe0b4",{"_index":778,"title":{},"body":{"changelog.html":{}}}],["820612e",{"_index":629,"title":{},"body":{"changelog.html":{}}}],["8232e66",{"_index":626,"title":{},"body":{"changelog.html":{}}}],["858b3f8",{"_index":737,"title":{},"body":{"changelog.html":{}}}],["8e3f108",{"_index":640,"title":{},"body":{"changelog.html":{}}}],["9",{"_index":769,"title":{},"body":{"changelog.html":{}}}],["9236e02",{"_index":686,"title":{},"body":{"changelog.html":{}}}],["927235e",{"_index":702,"title":{},"body":{"changelog.html":{}}}],["93a5c4",{"_index":669,"title":{},"body":{"changelog.html":{}}}],["9557c0a",{"_index":746,"title":{},"body":{"changelog.html":{}}}],["9597986",{"_index":703,"title":{},"body":{"changelog.html":{}}}],["99d2f66",{"_index":652,"title":{},"body":{"changelog.html":{}}}],["9c76aac",{"_index":741,"title":{},"body":{"changelog.html":{}}}],["9f9c54a",{"_index":788,"title":{},"body":{"changelog.html":{}}}],["a0323e9",{"_index":587,"title":{},"body":{"changelog.html":{}}}],["a056154",{"_index":578,"title":{},"body":{"changelog.html":{}}}],["a74f9e2",{"_index":632,"title":{},"body":{"changelog.html":{}}}],["a8e5cd3",{"_index":822,"title":{},"body":{"changelog.html":{}}}],["aa169c7",{"_index":663,"title":{},"body":{"changelog.html":{}}}],["abov",{"_index":924,"title":{},"body":{"license.html":{}}}],["absolut",{"_index":98,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["action",{"_index":944,"title":{},"body":{"license.html":{}}}],["activ",{"_index":124,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["add",{"_index":351,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{}}}],["af7abf7",{"_index":529,"title":{},"body":{"changelog.html":{}}}],["allow",{"_index":147,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{}}}],["allowededg",{"_index":238,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["allownegativeres",{"_index":182,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["alway",{"_index":494,"title":{},"body":{"changelog.html":{}}}],["amount",{"_index":789,"title":{},"body":{"changelog.html":{}}}],["and/or",{"_index":918,"title":{},"body":{"license.html":{}}}],["angular",{"_index":511,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["angular/cor",{"_index":48,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"dependencies.html":{},"index.html":{}}}],["angular2",{"_index":701,"title":{},"body":{"changelog.html":{}}}],["any).eventlisteners[typ",{"_index":473,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["aot",{"_index":684,"title":{},"body":{"changelog.html":{}}}],["app",{"_index":750,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["appli",{"_index":760,"title":{},"body":{"changelog.html":{}}}],["applic",{"_index":591,"title":{},"body":{"changelog.html":{}}}],["argument",{"_index":441,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["aris",{"_index":948,"title":{},"body":{"license.html":{}}}],["associ",{"_index":910,"title":{},"body":{"license.html":{}}}],["audittim",{"_index":60,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["author",{"_index":937,"title":{},"body":{"license.html":{}}}],["auto",{"_index":675,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["b77c9fc",{"_index":619,"title":{},"body":{"changelog.html":{}}}],["bac87e3",{"_index":836,"title":{},"body":{"changelog.html":{}}}],["back",{"_index":585,"title":{},"body":{"changelog.html":{}}}],["be",{"_index":696,"title":{},"body":{"changelog.html":{}}}],["be5d727",{"_index":599,"title":{},"body":{"changelog.html":{}}}],["befor",{"_index":144,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["before(resize)=\"onresize($ev",{"_index":706,"title":{},"body":{"changelog.html":{}}}],["begin",{"_index":184,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["begun",{"_index":187,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["behaviour",{"_index":809,"title":{},"body":{"changelog.html":{}}}],["between",{"_index":160,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["bf497d2",{"_index":819,"title":{},"body":{"changelog.html":{}}}],["boolean",{"_index":81,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["bootstrap",{"_index":871,"title":{},"body":{"index.html":{}}}],["border",{"_index":866,"title":{},"body":{"index.html":{}}}],["bottom",{"_index":14,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["bottomleft",{"_index":422,"title":{},"body":{"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["bottomright",{"_index":423,"title":{},"body":{"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["bound",{"_index":8,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/ResizeEvent.html":{},"changelog.html":{}}}],["boundingrect",{"_index":103,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrect.bottom",{"_index":108,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrect.height",{"_index":105,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrect.left",{"_index":109,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrect.right",{"_index":110,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrect.top",{"_index":107,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrect.width",{"_index":106,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["boundingrectangl",{"_index":1,"title":{"interfaces/BoundingRectangle.html":{}},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"changelog.html":{}}}],["box",{"_index":864,"title":{},"body":{"index.html":{}}}],["break",{"_index":514,"title":{},"body":{"changelog.html":{}}}],["broken",{"_index":756,"title":{},"body":{"changelog.html":{}}}],["brows",{"_index":950,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":783,"title":{},"body":{"changelog.html":{}}}],["bug",{"_index":492,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":714,"title":{},"body":{"changelog.html":{}}}],["bundl",{"_index":532,"title":{},"body":{"changelog.html":{}}}],["c",{"_index":898,"title":{},"body":{"license.html":{}}}],["c4519a1",{"_index":533,"title":{},"body":{"changelog.html":{}}}],["c60b3f5",{"_index":785,"title":{},"body":{"changelog.html":{}}}],["c76be59",{"_index":780,"title":{},"body":{"changelog.html":{}}}],["c7e3de6",{"_index":513,"title":{},"body":{"changelog.html":{}}}],["call",{"_index":143,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["camel",{"_index":742,"title":{},"body":{"changelog.html":{}}}],["cancel",{"_index":150,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["case",{"_index":743,"title":{},"body":{"changelog.html":{}}}],["cbe088f",{"_index":731,"title":{},"body":{"changelog.html":{}}}],["chang",{"_index":479,"title":{},"body":{"changelog.html":{}}}],["changelog",{"_index":478,"title":{"changelog.html":{}},"body":{}}],["charg",{"_index":905,"title":{},"body":{"license.html":{}}}],["claim",{"_index":940,"title":{},"body":{"license.html":{}}}],["class",{"_index":140,"title":{"classes/PointerEventListeners.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{},"overview.html":{}}}],["clienti",{"_index":71,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{}}}],["clientrect",{"_index":115,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["clientx",{"_index":70,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{}}}],["clone",{"_index":575,"title":{},"body":{"changelog.html":{}}}],["clonednod",{"_index":221,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["close",{"_index":534,"title":{},"body":{"changelog.html":{}}}],["co",{"_index":770,"title":{},"body":{"changelog.html":{}}}],["col",{"_index":958,"title":{},"body":{"miscellaneous/variables.html":{}}}],["come",{"_index":881,"title":{},"body":{"index.html":{}}}],["commit",{"_index":486,"title":{},"body":{"changelog.html":{}}}],["compat",{"_index":685,"title":{},"body":{"changelog.html":{}}}],["compil",{"_index":718,"title":{},"body":{"changelog.html":{}}}],["complet",{"_index":787,"title":{},"body":{"changelog.html":{}}}],["compon",{"_index":679,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["con",{"_index":792,"title":{},"body":{"changelog.html":{}}}],["condit",{"_index":923,"title":{},"body":{"license.html":{}}}],["config",{"_index":555,"title":{},"body":{"changelog.html":{}}}],["configur",{"_index":618,"title":{},"body":{"changelog.html":{}}}],["connect",{"_index":949,"title":{},"body":{"license.html":{}}}],["console.log('el",{"_index":870,"title":{},"body":{"index.html":{}}}],["const",{"_index":82,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["constructor",{"_index":197,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["constructor(render",{"_index":363,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["contain",{"_index":438,"title":{},"body":{"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["content",{"_index":851,"title":{},"body":{"index.html":{}}}],["continu",{"_index":894,"title":{},"body":{"index.html":{}}}],["contract",{"_index":945,"title":{},"body":{"license.html":{}}}],["coord",{"_index":276,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["coordin",{"_index":34,"title":{"interfaces/Coordinate.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["copi",{"_index":908,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":897,"title":{},"body":{"license.html":{}}}],["core",{"_index":710,"title":{},"body":{"changelog.html":{}}}],["corner",{"_index":835,"title":{},"body":{"changelog.html":{}}}],["correct",{"_index":657,"title":{},"body":{"changelog.html":{}}}],["creat",{"_index":759,"title":{},"body":{"changelog.html":{}}}],["css",{"_index":562,"title":{},"body":{"changelog.html":{}}}],["cssclass",{"_index":636,"title":{},"body":{"changelog.html":{}}}],["current",{"_index":884,"title":{},"body":{"index.html":{}}}],["currentrect",{"_index":220,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentres",{"_index":218,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize!.currentrect",{"_index":318,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize!.edg",{"_index":300,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize!.startingrect",{"_index":299,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize)).subscrib",{"_index":232,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.clonednod",{"_index":225,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.clonednode!.scrollleft",{"_index":336,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.clonednode!.scrolltop",{"_index":334,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.edg",{"_index":245,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.edges.bottom",{"_index":274,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.edges.left",{"_index":266,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.edges.right",{"_index":269,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.edges.top",{"_index":271,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.startingrect",{"_index":335,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.startingrect.height}px",{"_index":330,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.startingrect.left}px",{"_index":328,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.startingrect.top}px",{"_index":329,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["currentresize.startingrect.width}px",{"_index":331,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["cursor",{"_index":172,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["cursorprecis",{"_index":240,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["customis",{"_index":651,"title":{},"body":{"changelog.html":{}}}],["d5b18cc",{"_index":734,"title":{},"body":{"changelog.html":{}}}],["d5ea756",{"_index":681,"title":{},"body":{"changelog.html":{}}}],["d664038",{"_index":790,"title":{},"body":{"changelog.html":{}}}],["damag",{"_index":941,"title":{},"body":{"license.html":{}}}],["dash",{"_index":744,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":911,"title":{},"body":{"license.html":{}}}],["declar",{"_index":417,"title":{},"body":{"modules/ResizableModule.html":{},"index.html":{}}}],["dedc3bb",{"_index":764,"title":{},"body":{"changelog.html":{}}}],["default",{"_index":154,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["default_resize_cursor",{"_index":174,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["defin",{"_index":28,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["delet",{"_index":474,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["demo",{"_index":749,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["depend",{"_index":570,"title":{"dependencies.html":{}},"body":{"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["descript",{"_index":7,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Edges.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{}}}],["destroy",{"_index":680,"title":{},"body":{"changelog.html":{}}}],["dev",{"_index":883,"title":{},"body":{"index.html":{}}}],["develop",{"_index":853,"title":{},"body":{"index.html":{}}}],["diff",{"_index":83,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["dimens",{"_index":181,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["direct",{"_index":39,"title":{"directives/ResizableDirective.html":{},"directives/ResizeHandleDirective.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{},"overview.html":{}}}],["directori",{"_index":885,"title":{},"body":{"index.html":{}}}],["disabl",{"_index":781,"title":{},"body":{"changelog.html":{}}}],["disableres",{"_index":786,"title":{},"body":{"changelog.html":{}}}],["dist",{"_index":736,"title":{},"body":{"changelog.html":{}}}],["distribut",{"_index":916,"title":{},"body":{"license.html":{}}}],["document",{"_index":369,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["dont",{"_index":688,"title":{},"body":{"changelog.html":{}}}],["drag",{"_index":186,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{}}}],["draghandl",{"_index":594,"title":{},"body":{"changelog.html":{}}}],["drop",{"_index":739,"title":{},"body":{"changelog.html":{}}}],["dynam",{"_index":558,"title":{},"body":{"changelog.html":{}}}],["e.g",{"_index":167,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["e722a86",{"_index":828,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":145,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["eb314fd",{"_index":776,"title":{},"body":{"changelog.html":{}}}],["edg",{"_index":62,"title":{"interfaces/Edges.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["edges.interfac",{"_index":430,"title":{},"body":{"interfaces/ResizeEvent.html":{}}}],["edgesdiff",{"_index":122,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["edgesdiff[edg",{"_index":118,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["edit",{"_index":641,"title":{},"body":{"changelog.html":{}}}],["effect",{"_index":159,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["element",{"_index":11,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["element.j",{"_index":548,"title":{},"body":{"changelog.html":{}}}],["element.nativeelement.getboundingclientrect",{"_index":104,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.nativeelement.offsetheight",{"_index":99,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.nativeelement.offsetleft",{"_index":102,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.nativeelement.offsettop",{"_index":101,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.nativeelement.offsetwidth",{"_index":100,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.nativeelement.scrollleft",{"_index":112,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.nativeelement.scrolltop",{"_index":111,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["element.umd.j",{"_index":550,"title":{},"body":{"changelog.html":{}}}],["element/bundles/angular",{"_index":549,"title":{},"body":{"changelog.html":{}}}],["element/demo",{"_index":849,"title":{},"body":{"index.html":{}}}],["element/dist/umd/angular",{"_index":547,"title":{},"body":{"changelog.html":{}}}],["element/doc",{"_index":877,"title":{},"body":{"index.html":{}}}],["elementref",{"_index":41,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["elementthen",{"_index":859,"title":{},"body":{"index.html":{}}}],["elm",{"_index":199,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["emit",{"_index":495,"title":{},"body":{"changelog.html":{}}}],["enabl",{"_index":157,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["enableghostres",{"_index":163,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"index.html":{}}}],["enableresizestyl",{"_index":765,"title":{},"body":{"changelog.html":{}}}],["enableresizestyling]=\"tru",{"_index":804,"title":{},"body":{"changelog.html":{}}}],["ensur",{"_index":493,"title":{},"body":{"changelog.html":{}}}],["entri",{"_index":545,"title":{},"body":{"changelog.html":{}}}],["environ",{"_index":879,"title":{},"body":{"index.html":{}}}],["event",{"_index":72,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["event.changedtouches[0].clienti",{"_index":389,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["event.changedtouches[0].clientx",{"_index":388,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["event.clienti",{"_index":372,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["event.clientx",{"_index":371,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["event.edg",{"_index":805,"title":{},"body":{"changelog.html":{}}}],["event.interfac",{"_index":68,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["event.interface.t",{"_index":429,"title":{},"body":{"interfaces/ResizeEvent.html":{}}}],["event.preventdefault",{"_index":233,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["event.targettouches[0].clienti",{"_index":382,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["event.targettouches[0].clientx",{"_index":381,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["event.touches[0].clienti",{"_index":375,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["event.touches[0].clientx",{"_index":374,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["eventemitt",{"_index":45,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["eventlisten",{"_index":446,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["exampl",{"_index":136,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{}}}],["export",{"_index":31,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{}}}],["expos",{"_index":620,"title":{},"body":{"changelog.html":{}}}],["express",{"_index":931,"title":{},"body":{"license.html":{}}}],["f24a746",{"_index":563,"title":{},"body":{"changelog.html":{}}}],["f3fe12a",{"_index":719,"title":{},"body":{"changelog.html":{}}}],["f440c87",{"_index":834,"title":{},"body":{"changelog.html":{}}}],["fa73345",{"_index":763,"title":{},"body":{"changelog.html":{}}}],["fals",{"_index":149,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["fanci",{"_index":207,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["fe49114",{"_index":814,"title":{},"body":{"changelog.html":{}}}],["featur",{"_index":500,"title":{},"body":{"changelog.html":{}}}],["ffad2ca",{"_index":745,"title":{},"body":{"changelog.html":{}}}],["file",{"_index":4,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"license.html":{}}}],["filter",{"_index":56,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["filter(([previouscoord",{"_index":286,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["filter((edg",{"_index":319,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["filter((newboundingrect",{"_index":301,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["find",{"_index":873,"title":{},"body":{"index.html":{}}}],["find(valu",{"_index":87,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["fire",{"_index":779,"title":{},"body":{"changelog.html":{}}}],["firefox",{"_index":595,"title":{},"body":{"changelog.html":{}}}],["fit",{"_index":798,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["fix",{"_index":179,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["flesh",{"_index":862,"title":{},"body":{"index.html":{}}}],["flicker",{"_index":825,"title":{},"body":{"changelog.html":{}}}],["folder",{"_index":861,"title":{},"body":{"index.html":{}}}],["follow",{"_index":922,"title":{},"body":{"license.html":{}}}],["free",{"_index":904,"title":{},"body":{"license.html":{}}}],["function",{"_index":75,"title":{"miscellaneous/functions.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["furnish",{"_index":921,"title":{},"body":{"license.html":{}}}],["gener",{"_index":875,"title":{},"body":{"index.html":{}}}],["get",{"_index":476,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["getdiff(movecoord",{"_index":258,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getdiff(newcoord",{"_index":285,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getdiff(previouscoord",{"_index":284,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getedgesdiff",{"_index":307,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["getedgesdiff(undefin",{"_index":841,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getelementrect",{"_index":322,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["getelementrect(el",{"_index":842,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getgrid",{"_index":275,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getgrid(newcoord",{"_index":289,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getinst",{"_index":361,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getinstance(render",{"_index":400,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["getnewboundingrectangl",{"_index":298,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["getnewboundingrectangle(startingrect",{"_index":338,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["getresizecursor",{"_index":244,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["getresizecursor(currentresize.edg",{"_index":332,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getresizecursor(edg",{"_index":843,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getresizecursor(resizeedg",{"_index":247,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["getresizeedg",{"_index":236,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["getresizeedges(undefin",{"_index":844,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getsnapgrid",{"_index":263,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["ghost",{"_index":131,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["ghostelementposit",{"_index":97,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["give",{"_index":637,"title":{},"body":{"changelog.html":{}}}],["global",{"_index":537,"title":{},"body":{"changelog.html":{}}}],["grant",{"_index":903,"title":{},"body":{"license.html":{}}}],["grid",{"_index":165,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["guidelin",{"_index":487,"title":{},"body":{"changelog.html":{}}}],["handl",{"_index":434,"title":{},"body":{"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["handle.direct",{"_index":421,"title":{},"body":{"modules/ResizableModule.html":{}}}],["handle.directive.t",{"_index":432,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["handle.directive.ts:112",{"_index":443,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["handle.directive.ts:31",{"_index":440,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["handle.directive.ts:37",{"_index":437,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["handle.directive.ts:59",{"_index":445,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["handler",{"_index":580,"title":{},"body":{"changelog.html":{}}}],["height",{"_index":16,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["here",{"_index":876,"title":{},"body":{"index.html":{}}}],["herebi",{"_index":902,"title":{},"body":{"license.html":{}}}],["hidden",{"_index":189,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["higher",{"_index":515,"title":{},"body":{"changelog.html":{}}}],["holder",{"_index":938,"title":{},"body":{"license.html":{}}}],["host",{"_index":762,"title":{},"body":{"changelog.html":{}}}],["hostlisten",{"_index":436,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["hostlistener('mousedown",{"_index":449,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["hostlistener('mouseup",{"_index":466,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["hostlistener('touchcancel",{"_index":465,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["hostlistener('touchend",{"_index":464,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["hostlistener('touchstart",{"_index":448,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["hover",{"_index":126,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["html",{"_index":137,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["htmlelement",{"_index":222,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["https://mattlewis92.github.io/angular",{"_index":848,"title":{},"body":{"index.html":{}}}],["ie11",{"_index":586,"title":{},"body":{"changelog.html":{}}}],["implement",{"_index":142,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["impli",{"_index":932,"title":{},"body":{"license.html":{}}}],["import",{"_index":38,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{}}}],["improv",{"_index":505,"title":{},"body":{"changelog.html":{}}}],["includ",{"_index":709,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":2,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{}}}],["inherit",{"_index":229,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["initi",{"_index":830,"title":{},"body":{"changelog.html":{}}}],["initialrectangl",{"_index":308,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["initialrectangle[edg",{"_index":121,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["input",{"_index":44,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["insid",{"_index":433,"title":{},"body":{"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["instal",{"_index":852,"title":{},"body":{"index.html":{}}}],["instanc",{"_index":358,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["instead",{"_index":674,"title":{},"body":{"changelog.html":{}}}],["interfac",{"_index":0,"title":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{}},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"changelog.html":{},"overview.html":{}}}],["interfaces/bound",{"_index":64,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["interfaces/edges.interfac",{"_index":63,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["interfaces/res",{"_index":67,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["isnumbercloseto",{"_index":76,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["isnumbercloseto(value1",{"_index":845,"title":{},"body":{"miscellaneous/functions.html":{}}}],["iswithinboundingi",{"_index":113,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["iswithinboundingx",{"_index":840,"title":{},"body":{"miscellaneous/functions.html":{}}}],["iswithinboundingx(undefin",{"_index":846,"title":{},"body":{"miscellaneous/functions.html":{}}}],["iswithinboundingy(undefin",{"_index":847,"title":{},"body":{"miscellaneous/functions.html":{}}}],["js",{"_index":711,"title":{},"body":{"changelog.html":{}}}],["keep",{"_index":668,"title":{},"body":{"changelog.html":{}}}],["key",{"_index":23,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Edges.html":{},"directives/ResizeHandleDirective.html":{}}}],["kind",{"_index":930,"title":{},"body":{"license.html":{}}}],["last",{"_index":772,"title":{},"body":{"changelog.html":{}}}],["left",{"_index":17,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["leftorright",{"_index":424,"title":{},"body":{"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["lettabl",{"_index":527,"title":{},"body":{"changelog.html":{}}}],["lewi",{"_index":900,"title":{},"body":{"license.html":{}}}],["liabil",{"_index":942,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":939,"title":{},"body":{"license.html":{}}}],["librari",{"_index":543,"title":{},"body":{"changelog.html":{}}}],["licens",{"_index":854,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["limit",{"_index":914,"title":{},"body":{"license.html":{}}}],["line",{"_index":360,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["listen",{"_index":613,"title":{},"body":{"changelog.html":{}}}],["local",{"_index":882,"title":{},"body":{"index.html":{}}}],["lock",{"_index":166,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["log",{"_index":480,"title":{},"body":{"changelog.html":{}}}],["longer",{"_index":539,"title":{},"body":{"changelog.html":{}}}],["main",{"_index":638,"title":{},"body":{"changelog.html":{}}}],["make",{"_index":135,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["map",{"_index":53,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["map(([previouscoord",{"_index":281,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["match",{"_index":33,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["math.abs(value1",{"_index":84,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["math.ceil(coords.clienti",{"_index":278,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["math.ceil(coords.clientx",{"_index":277,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["math.round(newcoords.clienti",{"_index":295,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["math.round(newcoords.clientx",{"_index":294,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["matt",{"_index":899,"title":{},"body":{"license.html":{}}}],["merchant",{"_index":933,"title":{},"body":{"license.html":{}}}],["merg",{"_index":51,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"license.html":{}}}],["mergemap",{"_index":54,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["mergemap(startcoord",{"_index":257,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["metadata",{"_index":402,"title":{},"body":{"directives/ResizableDirective.html":{},"directives/ResizeHandleDirective.html":{}}}],["method",{"_index":394,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["miscellan",{"_index":838,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["miss",{"_index":811,"title":{},"body":{"changelog.html":{}}}],["mit",{"_index":896,"title":{},"body":{"index.html":{},"license.html":{}}}],["modifi",{"_index":540,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["modul",{"_index":414,"title":{"modules/ResizableModule.html":{},"modules.html":{}},"body":{"modules/ResizableModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":860,"title":{},"body":{"index.html":{}}}],["mous",{"_index":171,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["mouse_move_throttle_m",{"_index":132,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["mousedown",{"_index":192,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["mousedrag",{"_index":254,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["mouseev",{"_index":73,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["mousemov",{"_index":193,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["mousemove.pipe(filt",{"_index":231,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["mousemove.pipe(pairwis",{"_index":280,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["mousemove.pipe(take(1)).pipe(map(coord",{"_index":279,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["mousemoveev",{"_index":460,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["mousemoveevent.clienti",{"_index":462,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["mousemoveevent.clientx",{"_index":461,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["mouseup",{"_index":191,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["move",{"_index":631,"title":{},"body":{"changelog.html":{}}}],["movecoords.clienti",{"_index":261,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["movecoords.clientx",{"_index":259,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["multipl",{"_index":817,"title":{},"body":{"changelog.html":{}}}],["mwl",{"_index":747,"title":{},"body":{"changelog.html":{}}}],["mwlresiz",{"_index":139,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{}}}],["mwlresizehandl",{"_index":435,"title":{},"body":{"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["mycompon",{"_index":868,"title":{},"body":{"index.html":{}}}],["mymodul",{"_index":872,"title":{},"body":{"index.html":{}}}],["name",{"_index":350,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{}}}],["ne",{"_index":955,"title":{},"body":{"miscellaneous/variables.html":{}}}],["need",{"_index":553,"title":{},"body":{"changelog.html":{}}}],["neg",{"_index":180,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["nest",{"_index":796,"title":{},"body":{"changelog.html":{}}}],["new",{"_index":185,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["newboundingrect",{"_index":306,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.height",{"_index":303,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.height}px",{"_index":312,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.left}px",{"_index":315,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.top}px",{"_index":314,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.width",{"_index":304,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newboundingrect.width}px",{"_index":313,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newcoord",{"_index":282,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newgrid",{"_index":288,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newgrid.i",{"_index":293,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newgrid.x",{"_index":291,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newrectangl",{"_index":309,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["newrectangle[edg",{"_index":119,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["ng",{"_index":530,"title":{},"body":{"changelog.html":{}}}],["ng4",{"_index":605,"title":{},"body":{"changelog.html":{}}}],["ngmodul",{"_index":419,"title":{},"body":{"modules/ResizableModule.html":{},"index.html":{}}}],["ngondestroy",{"_index":342,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["ngoninit",{"_index":203,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["ngzone",{"_index":47,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["node",{"_index":576,"title":{},"body":{"changelog.html":{}}}],["node.j",{"_index":880,"title":{},"body":{"index.html":{}}}],["node_modules/angular",{"_index":705,"title":{},"body":{"changelog.html":{}}}],["node_modules/angular2",{"_index":721,"title":{},"body":{"changelog.html":{}}}],["noninfring",{"_index":936,"title":{},"body":{"license.html":{}}}],["notabl",{"_index":481,"title":{},"body":{"changelog.html":{}}}],["notic",{"_index":925,"title":{},"body":{"license.html":{}}}],["now",{"_index":516,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["npm",{"_index":857,"title":{},"body":{"index.html":{}}}],["null",{"_index":223,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["number",{"_index":25,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["nw",{"_index":954,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object",{"_index":153,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["object.assign",{"_index":242,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["object.freez",{"_index":953,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.keys(edges).length",{"_index":320,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["object.keys(this.eventlisteners).foreach(typ",{"_index":472,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["observ",{"_index":50,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["observable.merge'",{"_index":208,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["observer.next",{"_index":370,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["obtain",{"_index":907,"title":{},"body":{"license.html":{}}}],["offlin",{"_index":716,"title":{},"body":{"changelog.html":{}}}],["old",{"_index":808,"title":{},"body":{"changelog.html":{}}}],["onc",{"_index":892,"title":{},"body":{"index.html":{}}}],["ondestroy",{"_index":46,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["oninit",{"_index":42,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["onmousedown",{"_index":450,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["onmousemov",{"_index":469,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["onmouseup(clientx",{"_index":467,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["onres",{"_index":752,"title":{},"body":{"changelog.html":{}}}],["onresizeend",{"_index":753,"title":{},"body":{"changelog.html":{}}}],["onresizeend(ev",{"_index":869,"title":{},"body":{"index.html":{}}}],["onresizestart",{"_index":751,"title":{},"body":{"changelog.html":{}}}],["oper",{"_index":528,"title":{},"body":{"changelog.html":{}}}],["opt",{"_index":791,"title":{},"body":{"changelog.html":{}}}],["option",{"_index":15,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Edges.html":{},"classes/PointerEventListeners.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["ordin",{"_index":771,"title":{},"body":{"changelog.html":{}}}],["otherwis",{"_index":947,"title":{},"body":{"license.html":{}}}],["out",{"_index":863,"title":{},"body":{"index.html":{},"license.html":{}}}],["output",{"_index":43,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["outsid",{"_index":581,"title":{},"body":{"changelog.html":{}}}],["over",{"_index":175,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["overview",{"_index":951,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":518,"title":{"dependencies.html":{}},"body":{"changelog.html":{}}}],["packagr",{"_index":531,"title":{},"body":{"changelog.html":{}}}],["pairwis",{"_index":57,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["paramet",{"_index":396,"title":{},"body":{"classes/PointerEventListeners.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":439,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["particular",{"_index":934,"title":{},"body":{"license.html":{}}}],["pass",{"_index":152,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{}}}],["path",{"_index":720,"title":{},"body":{"changelog.html":{}}}],["peer",{"_index":569,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["peerdepend",{"_index":728,"title":{},"body":{"changelog.html":{}}}],["perform",{"_index":611,"title":{},"body":{"changelog.html":{}}}],["permiss",{"_index":901,"title":{},"body":{"license.html":{}}}],["permit",{"_index":920,"title":{},"body":{"license.html":{}}}],["person",{"_index":906,"title":{},"body":{"license.html":{}}}],["pipe",{"_index":256,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pipe(audittime(mouse_move_throttle_m",{"_index":234,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pipe(filt",{"_index":297,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pipe(shar",{"_index":376,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pipe(takeuntil(merge(this.mouseup",{"_index":296,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["place",{"_index":134,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["point",{"_index":546,"title":{},"body":{"changelog.html":{}}}],["pointerdown",{"_index":354,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pointereventcoordin",{"_index":69,"title":{"interfaces/PointerEventCoordinate.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pointereventlisten",{"_index":195,"title":{"classes/PointerEventListeners.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pointereventlisteners.getinst",{"_index":202,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pointereventlisteners.inst",{"_index":362,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pointereventlistenersubscript",{"_index":196,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pointermov",{"_index":355,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pointerup",{"_index":356,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["pojo",{"_index":777,"title":{},"body":{"changelog.html":{}}}],["port",{"_index":888,"title":{},"body":{"index.html":{}}}],["portion",{"_index":928,"title":{},"body":{"license.html":{}}}],["posit",{"_index":178,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["post",{"_index":729,"title":{},"body":{"changelog.html":{}}}],["precis",{"_index":79,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["prefix",{"_index":740,"title":{},"body":{"changelog.html":{}}}],["prepar",{"_index":878,"title":{},"body":{"index.html":{}}}],["press",{"_index":183,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["prevent",{"_index":694,"title":{},"body":{"changelog.html":{}}}],["previou",{"_index":767,"title":{},"body":{"changelog.html":{}}}],["previouscoord",{"_index":283,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["previousgrid",{"_index":287,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["previousgrid.i",{"_index":292,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["previousgrid.x",{"_index":290,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["privat",{"_index":194,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["project",{"_index":482,"title":{},"body":{"changelog.html":{}}}],["propag",{"_index":148,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["properti",{"_index":13,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"changelog.html":{}}}],["prototyp",{"_index":538,"title":{},"body":{"changelog.html":{}}}],["provid",{"_index":800,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["public",{"_index":190,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["publish",{"_index":915,"title":{},"body":{"license.html":{}}}],["purpos",{"_index":935,"title":{},"body":{"license.html":{}}}],["px",{"_index":93,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["rc5",{"_index":730,"title":{},"body":{"changelog.html":{}}}],["rc6",{"_index":733,"title":{},"body":{"changelog.html":{}}}],["re",{"_index":803,"title":{},"body":{"changelog.html":{}}}],["readm",{"_index":748,"title":{},"body":{"changelog.html":{}}}],["rect",{"_index":114,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["rect.left",{"_index":117,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["rect.top",{"_index":116,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["rectangl",{"_index":9,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"changelog.html":{}}}],["rectangle.interfac",{"_index":65,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{}}}],["rectangle.interface.t",{"_index":6,"title":{},"body":{"interfaces/BoundingRectangle.html":{}}}],["rectangle.interface.ts:12",{"_index":29,"title":{},"body":{"interfaces/BoundingRectangle.html":{}}}],["refer",{"_index":647,"title":{},"body":{"changelog.html":{}}}],["regist",{"_index":630,"title":{},"body":{"changelog.html":{}}}],["relax",{"_index":624,"title":{},"body":{"changelog.html":{}}}],["releas",{"_index":188,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"index.html":{}}}],["releaselicens",{"_index":895,"title":{},"body":{"index.html":{}}}],["reload",{"_index":890,"title":{},"body":{"index.html":{}}}],["remov",{"_index":646,"title":{},"body":{"changelog.html":{}}}],["removeghostel",{"_index":224,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["renam",{"_index":700,"title":{},"body":{"changelog.html":{}}}],["render",{"_index":198,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["renderer.listen",{"_index":368,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["renderer2",{"_index":40,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["repo",{"_index":886,"title":{},"body":{"index.html":{}}}],["requir",{"_index":517,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["reset",{"_index":673,"title":{},"body":{"changelog.html":{}}}],["resiz",{"_index":10,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["resizable.direct",{"_index":420,"title":{},"body":{"modules/ResizableModule.html":{},"directives/ResizeHandleDirective.html":{}}}],["resizable.j",{"_index":725,"title":{},"body":{"changelog.html":{}}}],["resizable.jsaft",{"_index":723,"title":{},"body":{"changelog.html":{}}}],["resizable/angular2",{"_index":722,"title":{},"body":{"changelog.html":{}}}],["resizable/dist/umd/angular2",{"_index":724,"title":{},"body":{"changelog.html":{}}}],["resizabledirect",{"_index":141,"title":{"directives/ResizableDirective.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["resizablemodul",{"_index":415,"title":{"modules/ResizableModule.html":{}},"body":{"modules/ResizableModule.html":{},"changelog.html":{},"index.html":{},"modules.html":{}}}],["resize_active_class",{"_index":123,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["resize_bottom_hover_class",{"_index":129,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["resize_ghost_element_class",{"_index":130,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["resize_left_hover_class",{"_index":125,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["resize_right_hover_class",{"_index":127,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["resize_top_hover_class",{"_index":128,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["resizecursor",{"_index":173,"title":{"interfaces/ResizeCursors.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["resizecursorprecis",{"_index":177,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["resizeedg",{"_index":155,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["resizeedges.bottom",{"_index":253,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["resizeedges.left",{"_index":250,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["resizeedges.right",{"_index":251,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["resizeedges.top",{"_index":252,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["resizeedges]={top",{"_index":807,"title":{},"body":{"changelog.html":{}}}],["resizeend",{"_index":162,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["resizeev",{"_index":66,"title":{"interfaces/ResizeEvent.html":{}},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"index.html":{}}}],["resizehandl",{"_index":556,"title":{},"body":{"changelog.html":{}}}],["resizehandledirect",{"_index":418,"title":{"directives/ResizeHandleDirective.html":{}},"body":{"modules/ResizableModule.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["resizesnapgrid",{"_index":170,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["resizestart",{"_index":161,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["resizing)=\"onresizing($ev",{"_index":707,"title":{},"body":{"changelog.html":{}}}],["restrict",{"_index":913,"title":{},"body":{"license.html":{}}}],["result",{"_index":32,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":85,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["reziz",{"_index":628,"title":{},"body":{"changelog.html":{}}}],["right",{"_index":18,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["row",{"_index":959,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":627,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["rxj",{"_index":52,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["rxjs/oper",{"_index":61,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["save",{"_index":858,"title":{},"body":{"index.html":{}}}],["scroll",{"_index":574,"title":{},"body":{"changelog.html":{}}}],["scrollleft",{"_index":19,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["scrolltop",{"_index":20,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["se",{"_index":957,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seamless",{"_index":609,"title":{},"body":{"changelog.html":{}}}],["see",{"_index":483,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["select",{"_index":697,"title":{},"body":{"changelog.html":{}}}],["selector",{"_index":138,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{}}}],["sell",{"_index":919,"title":{},"body":{"license.html":{}}}],["server",{"_index":887,"title":{},"body":{"index.html":{}}}],["set",{"_index":156,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["setelementclass(elm",{"_index":349,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["shall",{"_index":926,"title":{},"body":{"license.html":{}}}],["share",{"_index":59,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["show",{"_index":833,"title":{},"body":{"changelog.html":{}}}],["shown",{"_index":559,"title":{},"body":{"changelog.html":{}}}],["size",{"_index":865,"title":{},"body":{"index.html":{}}}],["snap",{"_index":164,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["snapgrid",{"_index":264,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["snapgrid.i",{"_index":272,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["snapgrid.x",{"_index":267,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["softwar",{"_index":909,"title":{},"body":{"license.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"modules/ResizableModule.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"index.html":{}}}],["specifi",{"_index":806,"title":{},"body":{"changelog.html":{}}}],["src/.../resizable.directive.t",{"_index":839,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/interfaces/bound",{"_index":5,"title":{},"body":{"interfaces/BoundingRectangle.html":{}}}],["src/interfaces/edges.interface.t",{"_index":391,"title":{},"body":{"interfaces/Edges.html":{}}}],["src/interfaces/edges.interface.ts:8",{"_index":393,"title":{},"body":{"interfaces/Edges.html":{}}}],["src/interfaces/res",{"_index":428,"title":{},"body":{"interfaces/ResizeEvent.html":{}}}],["src/resiz",{"_index":431,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["src/resizable.directive.t",{"_index":35,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/resizable.directive.ts:279",{"_index":410,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:284",{"_index":408,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:289",{"_index":404,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:296",{"_index":409,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:301",{"_index":407,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:306",{"_index":406,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:311",{"_index":405,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:316",{"_index":403,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:321",{"_index":412,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:326",{"_index":413,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:331",{"_index":411,"title":{},"body":{"directives/ResizableDirective.html":{}}}],["src/resizable.directive.ts:782",{"_index":397,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["src/resizable.directive.ts:784",{"_index":398,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["src/resizable.directive.ts:786",{"_index":399,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["src/resizable.directive.ts:790",{"_index":401,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["src/resizable.directive.ts:801",{"_index":395,"title":{},"body":{"classes/PointerEventListeners.html":{}}}],["src/resizable.module.t",{"_index":416,"title":{},"body":{"modules/ResizableModule.html":{}}}],["standard",{"_index":484,"title":{},"body":{"changelog.html":{}}}],["start",{"_index":477,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"changelog.html":{},"index.html":{}}}],["startcoords.clienti",{"_index":262,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["startcoords.clientx",{"_index":260,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["startingrect",{"_index":219,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["state",{"_index":639,"title":{},"body":{"changelog.html":{}}}],["static",{"_index":357,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["string",{"_index":24,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/variables.html":{}}}],["style",{"_index":761,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["style[properti",{"_index":86,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["subject",{"_index":49,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"license.html":{}}}],["sublicens",{"_index":917,"title":{},"body":{"license.html":{}}}],["subscrib",{"_index":235,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["subscribe((edg",{"_index":321,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["subscribe((newboundingrect",{"_index":310,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["substanti",{"_index":927,"title":{},"body":{"license.html":{}}}],["suffix",{"_index":523,"title":{},"body":{"changelog.html":{}}}],["support",{"_index":715,"title":{},"body":{"changelog.html":{}}}],["sw",{"_index":956,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sync",{"_index":823,"title":{},"body":{"changelog.html":{}}}],["system.j",{"_index":551,"title":{},"body":{"changelog.html":{}}}],["tabl",{"_index":850,"title":{},"body":{"index.html":{}}}],["take",{"_index":58,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["takeuntil",{"_index":55,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["templat",{"_index":717,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["temporari",{"_index":158,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["test",{"_index":891,"title":{},"body":{"index.html":{}}}],["test:watch",{"_index":893,"title":{},"body":{"index.html":{}}}],["text",{"_index":695,"title":{},"body":{"changelog.html":{}}}],["thick",{"_index":176,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.allownegativeres",{"_index":302,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.element.nativeel",{"_index":454,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.elm",{"_index":237,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.elm.nativeel",{"_index":327,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.elm.nativeelement.clonenode(tru",{"_index":325,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.elm.nativeelement.parentelement.appendchild",{"_index":326,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.elm.nativeelement.parentelement.removechild",{"_index":226,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.enableghostres",{"_index":324,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.eventlisteners.mousemov",{"_index":459,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.eventlisteners.touchmov",{"_index":452,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.eventlisteners[typ",{"_index":475,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.ghostelementposit",{"_index":323,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.mousedown",{"_index":255,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.mousedown.complet",{"_index":343,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.mousedown.next",{"_index":211,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.mousemove.complet",{"_index":345,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.mousemove.next",{"_index":214,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.mousemove.pipe(shar",{"_index":230,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.mouseup.complet",{"_index":344,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.mouseup.next",{"_index":217,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.mouseup.subscrib",{"_index":339,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.onmousemov",{"_index":456,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.pointerdown",{"_index":364,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointereventlisten",{"_index":201,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointereventlisteners.pointerdown.subscrib",{"_index":210,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointereventlisteners.pointermove.subscrib",{"_index":213,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointereventlisteners.pointerup.subscrib",{"_index":216,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointereventlistenersubscriptions.pointerdown",{"_index":209,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointereventlistenersubscriptions.pointerdown.unsubscrib",{"_index":346,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointereventlistenersubscriptions.pointermov",{"_index":212,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointereventlistenersubscriptions.pointermove.unsubscrib",{"_index":347,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointereventlistenersubscriptions.pointerup",{"_index":215,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointereventlistenersubscriptions.pointerup.unsubscrib",{"_index":348,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointermov",{"_index":377,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.pointerup",{"_index":383,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.addclass",{"_index":333,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.addclass(elm.nativeel",{"_index":352,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.listen",{"_index":453,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.renderer.removeclass(elm.nativeel",{"_index":353,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.removeclass(this.elm.nativeel",{"_index":340,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.setstyl",{"_index":311,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.setstyle(document.bodi",{"_index":246,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.renderer.setstyle(this.elm.nativeel",{"_index":227,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizable.mousedown.next",{"_index":463,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.resizable.mousemove.next",{"_index":470,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.resizable.mouseup.next",{"_index":468,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.resizecursor",{"_index":243,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizecursorprecis",{"_index":241,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizeedg",{"_index":239,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["this.resizeend.emit",{"_index":341,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizesnapgrid.bottom",{"_index":273,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizesnapgrid.left",{"_index":265,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizesnapgrid.right",{"_index":268,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizesnapgrid.top",{"_index":270,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizestart.emit",{"_index":337,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.resizing.emit",{"_index":317,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.setelementclass",{"_index":249,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.setelementclass(this.elm",{"_index":248,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.unsubscribeeventlisten",{"_index":447,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["this.validateres",{"_index":305,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.zone.run",{"_index":316,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["this.zone.runoutsideangular",{"_index":451,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["throttl",{"_index":612,"title":{},"body":{"changelog.html":{}}}],["through",{"_index":856,"title":{},"body":{"index.html":{}}}],["time",{"_index":818,"title":{},"body":{"changelog.html":{}}}],["todo",{"_index":205,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["top",{"_index":21,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["topleft",{"_index":425,"title":{},"body":{"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["toporbottom",{"_index":426,"title":{},"body":{"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["topright",{"_index":427,"title":{},"body":{"interfaces/ResizeCursors.html":{},"miscellaneous/variables.html":{}}}],["tort",{"_index":946,"title":{},"body":{"license.html":{}}}],["touch",{"_index":658,"title":{},"body":{"changelog.html":{}}}],["touchcancel",{"_index":390,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["touchend",{"_index":387,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["touchend(clientx",{"_index":442,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["touchev",{"_index":74,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["touchmov",{"_index":380,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["touchmoveev",{"_index":455,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["touchmoveevent.targettouches[0].clienti",{"_index":458,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["touchmoveevent.targettouches[0].clientx",{"_index":457,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["touchstart",{"_index":373,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{}}}],["touchstart(ev",{"_index":444,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["transform",{"_index":89,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["transform.includes('transl",{"_index":90,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["transform.replace(/.*translate\\((.*)px",{"_index":92,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["translatex",{"_index":91,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["translatey",{"_index":95,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["trigger",{"_index":392,"title":{},"body":{"interfaces/Edges.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["true",{"_index":146,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["tslint:dis",{"_index":359,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["type",{"_index":30,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/Edges.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"interfaces/ResizeEvent.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["typescript",{"_index":827,"title":{},"body":{"changelog.html":{}}}],["ui",{"_index":824,"title":{},"body":{"changelog.html":{}}}],["umd",{"_index":544,"title":{},"body":{"changelog.html":{}}}],["uncancel",{"_index":821,"title":{},"body":{"changelog.html":{}}}],["undefin",{"_index":27,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Edges.html":{},"directives/ResizeHandleDirective.html":{},"miscellaneous/functions.html":{}}}],["univers",{"_index":645,"title":{},"body":{"changelog.html":{}}}],["unsubscrib",{"_index":678,"title":{},"body":{"changelog.html":{}}}],["unsubscribeeventlisten",{"_index":471,"title":{},"body":{"directives/ResizeHandleDirective.html":{}}}],["unsubscribemousedown",{"_index":365,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["unsubscribemousemov",{"_index":378,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["unsubscribemouseup",{"_index":384,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["unsubscribetouchcancel",{"_index":386,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["unsubscribetouchend",{"_index":385,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["unsubscribetouchmov",{"_index":379,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["unsubscribetouchstart",{"_index":366,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["up",{"_index":774,"title":{},"body":{"changelog.html":{}}}],["updat",{"_index":554,"title":{},"body":{"changelog.html":{}}}],["upgrad",{"_index":510,"title":{},"body":{"changelog.html":{}}}],["us",{"_index":206,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["user",{"_index":552,"title":{},"body":{"changelog.html":{}}}],["valid",{"_index":773,"title":{},"body":{"changelog.html":{}}}],["validateres",{"_index":151,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["valu",{"_index":88,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["value1",{"_index":77,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["value2",{"_index":78,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"miscellaneous/functions.html":{}}}],["variabl",{"_index":952,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":485,"title":{},"body":{"changelog.html":{}}}],["via",{"_index":692,"title":{},"body":{"changelog.html":{}}}],["view",{"_index":874,"title":{},"body":{"index.html":{}}}],["visibl",{"_index":228,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["void",{"_index":204,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"index.html":{}}}],["w",{"_index":775,"title":{},"body":{"changelog.html":{}}}],["warn",{"_index":625,"title":{},"body":{"changelog.html":{}}}],["warranti",{"_index":929,"title":{},"body":{"license.html":{}}}],["way",{"_index":801,"title":{},"body":{"changelog.html":{}}}],["webkit",{"_index":782,"title":{},"body":{"changelog.html":{}}}],["whether",{"_index":943,"title":{},"body":{"license.html":{}}}],["width",{"_index":22,"title":{},"body":{"interfaces/BoundingRectangle.html":{},"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"changelog.html":{}}}],["wip",{"_index":831,"title":{},"body":{"changelog.html":{}}}],["within",{"_index":590,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["without",{"_index":912,"title":{},"body":{"license.html":{}}}],["work",{"_index":867,"title":{},"body":{"index.html":{}}}],["x",{"_index":36,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["y",{"_index":37,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}],["yourself",{"_index":541,"title":{},"body":{"changelog.html":{}}}],["zone",{"_index":200,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{},"directives/ResizeHandleDirective.html":{},"changelog.html":{}}}],["zone.runoutsideangular",{"_index":367,"title":{},"body":{"interfaces/Coordinate.html":{},"interfaces/PointerEventCoordinate.html":{},"classes/PointerEventListeners.html":{},"directives/ResizableDirective.html":{},"interfaces/ResizeCursors.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/BoundingRectangle.html":{"url":"interfaces/BoundingRectangle.html","title":"interface - BoundingRectangle","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BoundingRectangle\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interfaces/bounding-rectangle.interface.ts\n        \n\n            \n                Description\n            \n            \n                The bounding rectangle of the resized element\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        bottom\n                                \n                                \n                                            Optional\n                                        height\n                                \n                                \n                                        left\n                                \n                                \n                                        right\n                                \n                                \n                                            Optional\n                                        scrollLeft\n                                \n                                \n                                            Optional\n                                        scrollTop\n                                \n                                \n                                        top\n                                \n                                \n                                            Optional\n                                        width\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    number | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/interfaces/bounding-rectangle.interface.ts:12\n                            \n                        \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bottom\n                                    \n                                \n                                \n                                    \n                                        bottom:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                    \n                                \n                                \n                                    \n                                        height:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        left\n                                    \n                                \n                                \n                                    \n                                        left:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        right\n                                    \n                                \n                                \n                                    \n                                        right:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scrollLeft\n                                    \n                                \n                                \n                                    \n                                        scrollLeft:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scrollTop\n                                    \n                                \n                                \n                                    \n                                        scrollTop:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        top\n                                    \n                                \n                                \n                                    \n                                        top:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                    \n                                \n                                \n                                    \n                                        width:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface BoundingRectangle {\n  top: number;\n  bottom: number;\n  left: number;\n  right: number;\n  height?: number;\n  width?: number;\n  scrollTop?: number;\n  scrollLeft?: number;\n  [key: string]: number | undefined;\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Coordinate.html":{"url":"interfaces/Coordinate.html","title":"interface - Coordinate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Coordinate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resizable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  NgZone\n} from '@angular/core';\nimport { Subject, Observable, Observer, merge } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  filter,\n  pairwise,\n  take,\n  share,\n  auditTime\n} from 'rxjs/operators';\nimport { Edges } from './interfaces/edges.interface';\nimport { BoundingRectangle } from './interfaces/bounding-rectangle.interface';\nimport { ResizeEvent } from './interfaces/resize-event.interface';\n\ninterface PointerEventCoordinate {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\ninterface Coordinate {\n  x: number;\n  y: number;\n}\n\nfunction isNumberCloseTo(\n  value1: number,\n  value2: number,\n  precision: number = 3\n): boolean {\n  const diff: number = Math.abs(value1 - value2);\n  return diff  style[property])\n    .find(value => !!value);\n  if (transform && transform.includes('translate')) {\n    translateX = transform.replace(/.*translate\\((.*)px, (.*)px\\).*/, '$1');\n    translateY = transform.replace(/.*translate\\((.*)px, (.*)px\\).*/, '$2');\n  }\n\n  if (ghostElementPositioning === 'absolute') {\n    return {\n      height: element.nativeElement.offsetHeight,\n      width: element.nativeElement.offsetWidth,\n      top: element.nativeElement.offsetTop - translateY,\n      bottom:\n        element.nativeElement.offsetHeight +\n        element.nativeElement.offsetTop -\n        translateY,\n      left: element.nativeElement.offsetLeft - translateX,\n      right:\n        element.nativeElement.offsetWidth +\n        element.nativeElement.offsetLeft -\n        translateX\n    };\n  } else {\n    const boundingRect: BoundingRectangle = element.nativeElement.getBoundingClientRect();\n    return {\n      height: boundingRect.height,\n      width: boundingRect.width,\n      top: boundingRect.top - translateY,\n      bottom: boundingRect.bottom - translateY,\n      left: boundingRect.left - translateX,\n      right: boundingRect.right - translateX,\n      scrollTop: element.nativeElement.scrollTop,\n      scrollLeft: element.nativeElement.scrollLeft\n    };\n  }\n}\n\nfunction isWithinBoundingY({\n  clientY,\n  rect\n}: {\n  clientY: number;\n  rect: ClientRect;\n}): boolean {\n  return clientY >= rect.top && clientY = rect.left && clientX  {\n    edgesDiff[edge] = (newRectangle[edge] || 0) - (initialRectangle[edge] || 0);\n  });\n  return edgesDiff;\n}\n\nconst RESIZE_ACTIVE_CLASS: string = 'resize-active';\nconst RESIZE_LEFT_HOVER_CLASS: string = 'resize-left-hover';\nconst RESIZE_RIGHT_HOVER_CLASS: string = 'resize-right-hover';\nconst RESIZE_TOP_HOVER_CLASS: string = 'resize-top-hover';\nconst RESIZE_BOTTOM_HOVER_CLASS: string = 'resize-bottom-hover';\nconst RESIZE_GHOST_ELEMENT_CLASS: string = 'resize-ghost-element';\n\nexport const MOUSE_MOVE_THROTTLE_MS: number = 50;\n\n/**\n * Place this on an element to make it resizable. For example:\n *\n * ```html\n * \n * \n * ```\n */\n@Directive({\n  selector: '[mwlResizable]'\n})\nexport class ResizableDirective implements OnInit, OnDestroy {\n  /**\n   * A function that will be called before each resize event. Return `true` to allow the resize event to propagate or `false` to cancel it\n   */\n  @Input() validateResize: (resizeEvent: ResizeEvent) => boolean;\n\n  /**\n   * The edges that an element can be resized from. Pass an object like `{top: true, bottom: false}`. By default no edges can be resized.\n   */\n  @Input() resizeEdges: Edges = {};\n\n  /**\n   * Set to `true` to enable a temporary resizing effect of the element in between the `resizeStart` and `resizeEnd` events.\n   */\n  @Input() enableGhostResize: boolean = false;\n\n  /**\n   * A snap grid that resize events will be locked to.\n   *\n   * e.g. to only allow the element to be resized every 10px set it to `{left: 10, right: 10}`\n   */\n  @Input() resizeSnapGrid: Edges = {};\n\n  /**\n   * The mouse cursors that will be set on the resize edges\n   */\n  @Input() resizeCursors: ResizeCursors = DEFAULT_RESIZE_CURSORS;\n\n  /**\n   * Mouse over thickness to active cursor.\n   */\n  @Input() resizeCursorPrecision: number = 3;\n\n  /**\n   * Define the positioning of the ghost element (can be fixed or absolute)\n   */\n  @Input() ghostElementPositioning: 'fixed' | 'absolute' = 'fixed';\n\n  /**\n   * Allow elements to be resized to negative dimensions\n   */\n  @Input() allowNegativeResizes: boolean = false;\n\n  /**\n   * Called when the mouse is pressed and a resize event is about to begin. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeStart = new EventEmitter();\n\n  /**\n   * Called as the mouse is dragged after a resize event has begun. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizing = new EventEmitter();\n\n  /**\n   * Called after the mouse is released after a resize event. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  public mouseup = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousedown = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousemove = new Subject();\n\n  private pointerEventListeners: PointerEventListeners;\n\n  private pointerEventListenerSubscriptions: any = {};\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private renderer: Renderer2,\n    public elm: ElementRef,\n    private zone: NgZone\n  ) {\n    this.pointerEventListeners = PointerEventListeners.getInstance(\n      renderer,\n      zone\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    // TODO - use some fancy Observable.merge's for this\n    this.pointerEventListenerSubscriptions.pointerDown = this.pointerEventListeners.pointerDown.subscribe(\n      ({ clientX, clientY }) => {\n        this.mousedown.next({ clientX, clientY });\n      }\n    );\n\n    this.pointerEventListenerSubscriptions.pointerMove = this.pointerEventListeners.pointerMove.subscribe(\n      ({ clientX, clientY, event }) => {\n        this.mousemove.next({ clientX, clientY, event });\n      }\n    );\n\n    this.pointerEventListenerSubscriptions.pointerUp = this.pointerEventListeners.pointerUp.subscribe(\n      ({ clientX, clientY }) => {\n        this.mouseup.next({ clientX, clientY });\n      }\n    );\n\n    let currentResize: {\n      edges: Edges;\n      startingRect: BoundingRectangle;\n      currentRect: BoundingRectangle;\n      clonedNode?: HTMLElement;\n    } | null;\n\n    const removeGhostElement = () => {\n      if (currentResize && currentResize.clonedNode) {\n        this.elm.nativeElement.parentElement.removeChild(\n          currentResize.clonedNode\n        );\n        this.renderer.setStyle(this.elm.nativeElement, 'visibility', 'inherit');\n      }\n    };\n\n    const mouseMove: Observable = this.mousemove.pipe(share());\n\n    mouseMove.pipe(filter(() => !!currentResize)).subscribe(({ event }) => {\n      event.preventDefault();\n    });\n\n    mouseMove\n      .pipe(auditTime(MOUSE_MOVE_THROTTLE_MS))\n      .subscribe(({ clientX, clientY }) => {\n        const resizeEdges: Edges = getResizeEdges({\n          clientX,\n          clientY,\n          elm: this.elm,\n          allowedEdges: this.resizeEdges,\n          cursorPrecision: this.resizeCursorPrecision\n        });\n        const resizeCursors: ResizeCursors = Object.assign(\n          {},\n          DEFAULT_RESIZE_CURSORS,\n          this.resizeCursors\n        );\n        if (currentResize) {\n          const cursor: string = getResizeCursor(\n            currentResize.edges,\n            resizeCursors\n          );\n          this.renderer.setStyle(document.body, 'cursor', cursor);\n        } else {\n          const cursor: string = getResizeCursor(resizeEdges, resizeCursors);\n          this.renderer.setStyle(this.elm.nativeElement, 'cursor', cursor);\n        }\n        this.setElementClass(this.elm, RESIZE_ACTIVE_CLASS, !!currentResize);\n        this.setElementClass(\n          this.elm,\n          RESIZE_LEFT_HOVER_CLASS,\n          resizeEdges.left === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_RIGHT_HOVER_CLASS,\n          resizeEdges.right === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_TOP_HOVER_CLASS,\n          resizeEdges.top === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_BOTTOM_HOVER_CLASS,\n          resizeEdges.bottom === true\n        );\n      });\n\n    const mousedrag: Observable = this.mousedown\n      .pipe(\n        mergeMap(startCoords => {\n          function getDiff(moveCoords: { clientX: number; clientY: number }) {\n            return {\n              clientX: moveCoords.clientX - startCoords.clientX,\n              clientY: moveCoords.clientY - startCoords.clientY\n            };\n          }\n\n          const getSnapGrid = () => {\n            const snapGrid: Coordinate = { x: 1, y: 1 };\n\n            if (currentResize) {\n              if (this.resizeSnapGrid.left && currentResize.edges.left) {\n                snapGrid.x = +this.resizeSnapGrid.left;\n              } else if (\n                this.resizeSnapGrid.right &&\n                currentResize.edges.right\n              ) {\n                snapGrid.x = +this.resizeSnapGrid.right;\n              }\n\n              if (this.resizeSnapGrid.top && currentResize.edges.top) {\n                snapGrid.y = +this.resizeSnapGrid.top;\n              } else if (\n                this.resizeSnapGrid.bottom &&\n                currentResize.edges.bottom\n              ) {\n                snapGrid.y = +this.resizeSnapGrid.bottom;\n              }\n            }\n\n            return snapGrid;\n          };\n\n          function getGrid(\n            coords: { clientX: number; clientY: number },\n            snapGrid: Coordinate\n          ) {\n            return {\n              x: Math.ceil(coords.clientX / snapGrid.x),\n              y: Math.ceil(coords.clientY / snapGrid.y)\n            };\n          }\n\n          return merge(\n            mouseMove.pipe(take(1)).pipe(map(coords => [, coords])),\n            mouseMove.pipe(pairwise())\n          )\n            .pipe(\n              map(([previousCoords, newCoords]) => {\n                return [\n                  previousCoords ? getDiff(previousCoords) : previousCoords,\n                  getDiff(newCoords)\n                ];\n              })\n            )\n            .pipe(\n              filter(([previousCoords, newCoords]) => {\n                if (!previousCoords) {\n                  return true;\n                }\n\n                const snapGrid: Coordinate = getSnapGrid();\n                const previousGrid: Coordinate = getGrid(\n                  previousCoords,\n                  snapGrid\n                );\n                const newGrid: Coordinate = getGrid(newCoords, snapGrid);\n\n                return (\n                  previousGrid.x !== newGrid.x || previousGrid.y !== newGrid.y\n                );\n              })\n            )\n            .pipe(\n              map(([, newCoords]) => {\n                const snapGrid: Coordinate = getSnapGrid();\n                return {\n                  clientX:\n                    Math.round(newCoords.clientX / snapGrid.x) * snapGrid.x,\n                  clientY:\n                    Math.round(newCoords.clientY / snapGrid.y) * snapGrid.y\n                };\n              })\n            )\n            .pipe(takeUntil(merge(this.mouseup, this.mousedown)));\n        })\n      )\n      .pipe(filter(() => !!currentResize));\n\n    mousedrag\n      .pipe(\n        map(({ clientX, clientY }) => {\n          return getNewBoundingRectangle(\n            currentResize!.startingRect,\n            currentResize!.edges,\n            clientX,\n            clientY\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return (\n            this.allowNegativeResizes ||\n            !!(\n              newBoundingRect.height &&\n              newBoundingRect.width &&\n              newBoundingRect.height > 0 &&\n              newBoundingRect.width > 0\n            )\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return this.validateResize\n            ? this.validateResize({\n                rectangle: newBoundingRect,\n                edges: getEdgesDiff({\n                  edges: currentResize!.edges,\n                  initialRectangle: currentResize!.startingRect,\n                  newRectangle: newBoundingRect\n                })\n              })\n            : true;\n        })\n      )\n      .subscribe((newBoundingRect: BoundingRectangle) => {\n        if (currentResize && currentResize.clonedNode) {\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${newBoundingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${newBoundingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${newBoundingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${newBoundingRect.left}px`\n          );\n        }\n\n        this.zone.run(() => {\n          this.resizing.emit({\n            edges: getEdgesDiff({\n              edges: currentResize!.edges,\n              initialRectangle: currentResize!.startingRect,\n              newRectangle: newBoundingRect\n            }),\n            rectangle: newBoundingRect\n          });\n        });\n\n        currentResize!.currentRect = newBoundingRect;\n      });\n\n    this.mousedown\n      .pipe(\n        map(({ clientX, clientY, edges }) => {\n          return (\n            edges ||\n            getResizeEdges({\n              clientX,\n              clientY,\n              elm: this.elm,\n              allowedEdges: this.resizeEdges,\n              cursorPrecision: this.resizeCursorPrecision\n            })\n          );\n        })\n      )\n      .pipe(\n        filter((edges: Edges) => {\n          return Object.keys(edges).length > 0;\n        })\n      )\n      .subscribe((edges: Edges) => {\n        if (currentResize) {\n          removeGhostElement();\n        }\n        const startingRect: BoundingRectangle = getElementRect(\n          this.elm,\n          this.ghostElementPositioning\n        );\n        currentResize = {\n          edges,\n          startingRect,\n          currentRect: startingRect\n        };\n        if (this.enableGhostResize) {\n          currentResize.clonedNode = this.elm.nativeElement.cloneNode(true);\n          const resizeCursors: ResizeCursors = Object.assign(\n            {},\n            DEFAULT_RESIZE_CURSORS,\n            this.resizeCursors\n          );\n          this.elm.nativeElement.parentElement.appendChild(\n            currentResize.clonedNode\n          );\n          this.renderer.setStyle(\n            this.elm.nativeElement,\n            'visibility',\n            'hidden'\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'position',\n            this.ghostElementPositioning\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${currentResize.startingRect.left}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${currentResize.startingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${currentResize.startingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${currentResize.startingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'cursor',\n            getResizeCursor(currentResize.edges, resizeCursors)\n          );\n          this.renderer.addClass(\n            currentResize.clonedNode,\n            RESIZE_GHOST_ELEMENT_CLASS\n          );\n          currentResize.clonedNode!.scrollTop = currentResize.startingRect\n            .scrollTop as number;\n          currentResize.clonedNode!.scrollLeft = currentResize.startingRect\n            .scrollLeft as number;\n        }\n        this.zone.run(() => {\n          this.resizeStart.emit({\n            edges: getEdgesDiff({\n              edges,\n              initialRectangle: startingRect,\n              newRectangle: startingRect\n            }),\n            rectangle: getNewBoundingRectangle(startingRect, {}, 0, 0)\n          });\n        });\n      });\n\n    this.mouseup.subscribe(() => {\n      if (currentResize) {\n        this.renderer.removeClass(this.elm.nativeElement, RESIZE_ACTIVE_CLASS);\n        this.renderer.setStyle(document.body, 'cursor', '');\n        this.renderer.setStyle(this.elm.nativeElement, 'cursor', '');\n        this.zone.run(() => {\n          this.resizeEnd.emit({\n            edges: getEdgesDiff({\n              edges: currentResize!.edges,\n              initialRectangle: currentResize!.startingRect,\n              newRectangle: currentResize!.currentRect\n            }),\n            rectangle: currentResize!.currentRect\n          });\n        });\n        removeGhostElement();\n        currentResize = null;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    this.mousedown.complete();\n    this.mouseup.complete();\n    this.mousemove.complete();\n    this.pointerEventListenerSubscriptions.pointerDown.unsubscribe();\n    this.pointerEventListenerSubscriptions.pointerMove.unsubscribe();\n    this.pointerEventListenerSubscriptions.pointerUp.unsubscribe();\n  }\n\n  private setElementClass(elm: ElementRef, name: string, add: boolean): void {\n    if (add) {\n      this.renderer.addClass(elm.nativeElement, name);\n    } else {\n      this.renderer.removeClass(elm.nativeElement, name);\n    }\n  }\n}\n\nclass PointerEventListeners {\n  public pointerDown: Observable;\n\n  public pointerMove: Observable;\n\n  public pointerUp: Observable;\n\n  private static instance: PointerEventListeners; // tslint:disable-line\n\n  public static getInstance(\n    renderer: Renderer2,\n    zone: NgZone\n  ): PointerEventListeners {\n    if (!PointerEventListeners.instance) {\n      PointerEventListeners.instance = new PointerEventListeners(\n        renderer,\n        zone\n      );\n    }\n    return PointerEventListeners.instance;\n  }\n\n  constructor(renderer: Renderer2, zone: NgZone) {\n    this.pointerDown = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseDown: () => void;\n        let unsubscribeTouchStart: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseDown = renderer.listen(\n            'document',\n            'mousedown',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchStart = renderer.listen(\n            'document',\n            'touchstart',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.touches[0].clientX,\n                clientY: event.touches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseDown();\n          unsubscribeTouchStart();\n        };\n      }\n    ).pipe(share());\n\n    this.pointerMove = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseMove: () => void;\n        let unsubscribeTouchMove: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseMove = renderer.listen(\n            'document',\n            'mousemove',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchMove = renderer.listen(\n            'document',\n            'touchmove',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.targetTouches[0].clientX,\n                clientY: event.targetTouches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseMove();\n          unsubscribeTouchMove();\n        };\n      }\n    ).pipe(share());\n\n    this.pointerUp = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseUp: () => void;\n        let unsubscribeTouchEnd: () => void;\n        let unsubscribeTouchCancel: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseUp = renderer.listen(\n            'document',\n            'mouseup',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchEnd = renderer.listen(\n            'document',\n            'touchend',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.changedTouches[0].clientX,\n                clientY: event.changedTouches[0].clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchCancel = renderer.listen(\n            'document',\n            'touchcancel',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.changedTouches[0].clientX,\n                clientY: event.changedTouches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseUp();\n          unsubscribeTouchEnd();\n          unsubscribeTouchCancel();\n        };\n      }\n    ).pipe(share());\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Edges.html":{"url":"interfaces/Edges.html","title":"interface - Edges","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Edges\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interfaces/edges.interface.ts\n        \n\n            \n                Description\n            \n            \n                The edges that the resize event were triggered on\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        bottom\n                                \n                                \n                                            Optional\n                                        left\n                                \n                                \n                                            Optional\n                                        right\n                                \n                                \n                                            Optional\n                                        top\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    boolean | number | undefined\n\n                    \n                \n                        \n                            \n                                Defined in src/interfaces/edges.interface.ts:8\n                            \n                        \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bottom\n                                    \n                                \n                                \n                                    \n                                        bottom:     boolean | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        left\n                                    \n                                \n                                \n                                    \n                                        left:     boolean | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        right\n                                    \n                                \n                                \n                                    \n                                        right:     boolean | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        top\n                                    \n                                \n                                \n                                    \n                                        top:     boolean | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Edges {\n  top?: boolean | number;\n  bottom?: boolean | number;\n  left?: boolean | number;\n  right?: boolean | number;\n  [key: string]: boolean | number | undefined;\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PointerEventCoordinate.html":{"url":"interfaces/PointerEventCoordinate.html","title":"interface - PointerEventCoordinate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PointerEventCoordinate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resizable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        clientX\n                                \n                                \n                                        clientY\n                                \n                                \n                                        event\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clientX\n                                    \n                                \n                                \n                                    \n                                        clientX:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        clientY\n                                    \n                                \n                                \n                                    \n                                        clientY:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        event\n                                    \n                                \n                                \n                                    \n                                        event:     MouseEvent | TouchEvent\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MouseEvent | TouchEvent\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  NgZone\n} from '@angular/core';\nimport { Subject, Observable, Observer, merge } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  filter,\n  pairwise,\n  take,\n  share,\n  auditTime\n} from 'rxjs/operators';\nimport { Edges } from './interfaces/edges.interface';\nimport { BoundingRectangle } from './interfaces/bounding-rectangle.interface';\nimport { ResizeEvent } from './interfaces/resize-event.interface';\n\ninterface PointerEventCoordinate {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\ninterface Coordinate {\n  x: number;\n  y: number;\n}\n\nfunction isNumberCloseTo(\n  value1: number,\n  value2: number,\n  precision: number = 3\n): boolean {\n  const diff: number = Math.abs(value1 - value2);\n  return diff  style[property])\n    .find(value => !!value);\n  if (transform && transform.includes('translate')) {\n    translateX = transform.replace(/.*translate\\((.*)px, (.*)px\\).*/, '$1');\n    translateY = transform.replace(/.*translate\\((.*)px, (.*)px\\).*/, '$2');\n  }\n\n  if (ghostElementPositioning === 'absolute') {\n    return {\n      height: element.nativeElement.offsetHeight,\n      width: element.nativeElement.offsetWidth,\n      top: element.nativeElement.offsetTop - translateY,\n      bottom:\n        element.nativeElement.offsetHeight +\n        element.nativeElement.offsetTop -\n        translateY,\n      left: element.nativeElement.offsetLeft - translateX,\n      right:\n        element.nativeElement.offsetWidth +\n        element.nativeElement.offsetLeft -\n        translateX\n    };\n  } else {\n    const boundingRect: BoundingRectangle = element.nativeElement.getBoundingClientRect();\n    return {\n      height: boundingRect.height,\n      width: boundingRect.width,\n      top: boundingRect.top - translateY,\n      bottom: boundingRect.bottom - translateY,\n      left: boundingRect.left - translateX,\n      right: boundingRect.right - translateX,\n      scrollTop: element.nativeElement.scrollTop,\n      scrollLeft: element.nativeElement.scrollLeft\n    };\n  }\n}\n\nfunction isWithinBoundingY({\n  clientY,\n  rect\n}: {\n  clientY: number;\n  rect: ClientRect;\n}): boolean {\n  return clientY >= rect.top && clientY = rect.left && clientX  {\n    edgesDiff[edge] = (newRectangle[edge] || 0) - (initialRectangle[edge] || 0);\n  });\n  return edgesDiff;\n}\n\nconst RESIZE_ACTIVE_CLASS: string = 'resize-active';\nconst RESIZE_LEFT_HOVER_CLASS: string = 'resize-left-hover';\nconst RESIZE_RIGHT_HOVER_CLASS: string = 'resize-right-hover';\nconst RESIZE_TOP_HOVER_CLASS: string = 'resize-top-hover';\nconst RESIZE_BOTTOM_HOVER_CLASS: string = 'resize-bottom-hover';\nconst RESIZE_GHOST_ELEMENT_CLASS: string = 'resize-ghost-element';\n\nexport const MOUSE_MOVE_THROTTLE_MS: number = 50;\n\n/**\n * Place this on an element to make it resizable. For example:\n *\n * ```html\n * \n * \n * ```\n */\n@Directive({\n  selector: '[mwlResizable]'\n})\nexport class ResizableDirective implements OnInit, OnDestroy {\n  /**\n   * A function that will be called before each resize event. Return `true` to allow the resize event to propagate or `false` to cancel it\n   */\n  @Input() validateResize: (resizeEvent: ResizeEvent) => boolean;\n\n  /**\n   * The edges that an element can be resized from. Pass an object like `{top: true, bottom: false}`. By default no edges can be resized.\n   */\n  @Input() resizeEdges: Edges = {};\n\n  /**\n   * Set to `true` to enable a temporary resizing effect of the element in between the `resizeStart` and `resizeEnd` events.\n   */\n  @Input() enableGhostResize: boolean = false;\n\n  /**\n   * A snap grid that resize events will be locked to.\n   *\n   * e.g. to only allow the element to be resized every 10px set it to `{left: 10, right: 10}`\n   */\n  @Input() resizeSnapGrid: Edges = {};\n\n  /**\n   * The mouse cursors that will be set on the resize edges\n   */\n  @Input() resizeCursors: ResizeCursors = DEFAULT_RESIZE_CURSORS;\n\n  /**\n   * Mouse over thickness to active cursor.\n   */\n  @Input() resizeCursorPrecision: number = 3;\n\n  /**\n   * Define the positioning of the ghost element (can be fixed or absolute)\n   */\n  @Input() ghostElementPositioning: 'fixed' | 'absolute' = 'fixed';\n\n  /**\n   * Allow elements to be resized to negative dimensions\n   */\n  @Input() allowNegativeResizes: boolean = false;\n\n  /**\n   * Called when the mouse is pressed and a resize event is about to begin. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeStart = new EventEmitter();\n\n  /**\n   * Called as the mouse is dragged after a resize event has begun. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizing = new EventEmitter();\n\n  /**\n   * Called after the mouse is released after a resize event. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  public mouseup = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousedown = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousemove = new Subject();\n\n  private pointerEventListeners: PointerEventListeners;\n\n  private pointerEventListenerSubscriptions: any = {};\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private renderer: Renderer2,\n    public elm: ElementRef,\n    private zone: NgZone\n  ) {\n    this.pointerEventListeners = PointerEventListeners.getInstance(\n      renderer,\n      zone\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    // TODO - use some fancy Observable.merge's for this\n    this.pointerEventListenerSubscriptions.pointerDown = this.pointerEventListeners.pointerDown.subscribe(\n      ({ clientX, clientY }) => {\n        this.mousedown.next({ clientX, clientY });\n      }\n    );\n\n    this.pointerEventListenerSubscriptions.pointerMove = this.pointerEventListeners.pointerMove.subscribe(\n      ({ clientX, clientY, event }) => {\n        this.mousemove.next({ clientX, clientY, event });\n      }\n    );\n\n    this.pointerEventListenerSubscriptions.pointerUp = this.pointerEventListeners.pointerUp.subscribe(\n      ({ clientX, clientY }) => {\n        this.mouseup.next({ clientX, clientY });\n      }\n    );\n\n    let currentResize: {\n      edges: Edges;\n      startingRect: BoundingRectangle;\n      currentRect: BoundingRectangle;\n      clonedNode?: HTMLElement;\n    } | null;\n\n    const removeGhostElement = () => {\n      if (currentResize && currentResize.clonedNode) {\n        this.elm.nativeElement.parentElement.removeChild(\n          currentResize.clonedNode\n        );\n        this.renderer.setStyle(this.elm.nativeElement, 'visibility', 'inherit');\n      }\n    };\n\n    const mouseMove: Observable = this.mousemove.pipe(share());\n\n    mouseMove.pipe(filter(() => !!currentResize)).subscribe(({ event }) => {\n      event.preventDefault();\n    });\n\n    mouseMove\n      .pipe(auditTime(MOUSE_MOVE_THROTTLE_MS))\n      .subscribe(({ clientX, clientY }) => {\n        const resizeEdges: Edges = getResizeEdges({\n          clientX,\n          clientY,\n          elm: this.elm,\n          allowedEdges: this.resizeEdges,\n          cursorPrecision: this.resizeCursorPrecision\n        });\n        const resizeCursors: ResizeCursors = Object.assign(\n          {},\n          DEFAULT_RESIZE_CURSORS,\n          this.resizeCursors\n        );\n        if (currentResize) {\n          const cursor: string = getResizeCursor(\n            currentResize.edges,\n            resizeCursors\n          );\n          this.renderer.setStyle(document.body, 'cursor', cursor);\n        } else {\n          const cursor: string = getResizeCursor(resizeEdges, resizeCursors);\n          this.renderer.setStyle(this.elm.nativeElement, 'cursor', cursor);\n        }\n        this.setElementClass(this.elm, RESIZE_ACTIVE_CLASS, !!currentResize);\n        this.setElementClass(\n          this.elm,\n          RESIZE_LEFT_HOVER_CLASS,\n          resizeEdges.left === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_RIGHT_HOVER_CLASS,\n          resizeEdges.right === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_TOP_HOVER_CLASS,\n          resizeEdges.top === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_BOTTOM_HOVER_CLASS,\n          resizeEdges.bottom === true\n        );\n      });\n\n    const mousedrag: Observable = this.mousedown\n      .pipe(\n        mergeMap(startCoords => {\n          function getDiff(moveCoords: { clientX: number; clientY: number }) {\n            return {\n              clientX: moveCoords.clientX - startCoords.clientX,\n              clientY: moveCoords.clientY - startCoords.clientY\n            };\n          }\n\n          const getSnapGrid = () => {\n            const snapGrid: Coordinate = { x: 1, y: 1 };\n\n            if (currentResize) {\n              if (this.resizeSnapGrid.left && currentResize.edges.left) {\n                snapGrid.x = +this.resizeSnapGrid.left;\n              } else if (\n                this.resizeSnapGrid.right &&\n                currentResize.edges.right\n              ) {\n                snapGrid.x = +this.resizeSnapGrid.right;\n              }\n\n              if (this.resizeSnapGrid.top && currentResize.edges.top) {\n                snapGrid.y = +this.resizeSnapGrid.top;\n              } else if (\n                this.resizeSnapGrid.bottom &&\n                currentResize.edges.bottom\n              ) {\n                snapGrid.y = +this.resizeSnapGrid.bottom;\n              }\n            }\n\n            return snapGrid;\n          };\n\n          function getGrid(\n            coords: { clientX: number; clientY: number },\n            snapGrid: Coordinate\n          ) {\n            return {\n              x: Math.ceil(coords.clientX / snapGrid.x),\n              y: Math.ceil(coords.clientY / snapGrid.y)\n            };\n          }\n\n          return merge(\n            mouseMove.pipe(take(1)).pipe(map(coords => [, coords])),\n            mouseMove.pipe(pairwise())\n          )\n            .pipe(\n              map(([previousCoords, newCoords]) => {\n                return [\n                  previousCoords ? getDiff(previousCoords) : previousCoords,\n                  getDiff(newCoords)\n                ];\n              })\n            )\n            .pipe(\n              filter(([previousCoords, newCoords]) => {\n                if (!previousCoords) {\n                  return true;\n                }\n\n                const snapGrid: Coordinate = getSnapGrid();\n                const previousGrid: Coordinate = getGrid(\n                  previousCoords,\n                  snapGrid\n                );\n                const newGrid: Coordinate = getGrid(newCoords, snapGrid);\n\n                return (\n                  previousGrid.x !== newGrid.x || previousGrid.y !== newGrid.y\n                );\n              })\n            )\n            .pipe(\n              map(([, newCoords]) => {\n                const snapGrid: Coordinate = getSnapGrid();\n                return {\n                  clientX:\n                    Math.round(newCoords.clientX / snapGrid.x) * snapGrid.x,\n                  clientY:\n                    Math.round(newCoords.clientY / snapGrid.y) * snapGrid.y\n                };\n              })\n            )\n            .pipe(takeUntil(merge(this.mouseup, this.mousedown)));\n        })\n      )\n      .pipe(filter(() => !!currentResize));\n\n    mousedrag\n      .pipe(\n        map(({ clientX, clientY }) => {\n          return getNewBoundingRectangle(\n            currentResize!.startingRect,\n            currentResize!.edges,\n            clientX,\n            clientY\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return (\n            this.allowNegativeResizes ||\n            !!(\n              newBoundingRect.height &&\n              newBoundingRect.width &&\n              newBoundingRect.height > 0 &&\n              newBoundingRect.width > 0\n            )\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return this.validateResize\n            ? this.validateResize({\n                rectangle: newBoundingRect,\n                edges: getEdgesDiff({\n                  edges: currentResize!.edges,\n                  initialRectangle: currentResize!.startingRect,\n                  newRectangle: newBoundingRect\n                })\n              })\n            : true;\n        })\n      )\n      .subscribe((newBoundingRect: BoundingRectangle) => {\n        if (currentResize && currentResize.clonedNode) {\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${newBoundingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${newBoundingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${newBoundingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${newBoundingRect.left}px`\n          );\n        }\n\n        this.zone.run(() => {\n          this.resizing.emit({\n            edges: getEdgesDiff({\n              edges: currentResize!.edges,\n              initialRectangle: currentResize!.startingRect,\n              newRectangle: newBoundingRect\n            }),\n            rectangle: newBoundingRect\n          });\n        });\n\n        currentResize!.currentRect = newBoundingRect;\n      });\n\n    this.mousedown\n      .pipe(\n        map(({ clientX, clientY, edges }) => {\n          return (\n            edges ||\n            getResizeEdges({\n              clientX,\n              clientY,\n              elm: this.elm,\n              allowedEdges: this.resizeEdges,\n              cursorPrecision: this.resizeCursorPrecision\n            })\n          );\n        })\n      )\n      .pipe(\n        filter((edges: Edges) => {\n          return Object.keys(edges).length > 0;\n        })\n      )\n      .subscribe((edges: Edges) => {\n        if (currentResize) {\n          removeGhostElement();\n        }\n        const startingRect: BoundingRectangle = getElementRect(\n          this.elm,\n          this.ghostElementPositioning\n        );\n        currentResize = {\n          edges,\n          startingRect,\n          currentRect: startingRect\n        };\n        if (this.enableGhostResize) {\n          currentResize.clonedNode = this.elm.nativeElement.cloneNode(true);\n          const resizeCursors: ResizeCursors = Object.assign(\n            {},\n            DEFAULT_RESIZE_CURSORS,\n            this.resizeCursors\n          );\n          this.elm.nativeElement.parentElement.appendChild(\n            currentResize.clonedNode\n          );\n          this.renderer.setStyle(\n            this.elm.nativeElement,\n            'visibility',\n            'hidden'\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'position',\n            this.ghostElementPositioning\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${currentResize.startingRect.left}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${currentResize.startingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${currentResize.startingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${currentResize.startingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'cursor',\n            getResizeCursor(currentResize.edges, resizeCursors)\n          );\n          this.renderer.addClass(\n            currentResize.clonedNode,\n            RESIZE_GHOST_ELEMENT_CLASS\n          );\n          currentResize.clonedNode!.scrollTop = currentResize.startingRect\n            .scrollTop as number;\n          currentResize.clonedNode!.scrollLeft = currentResize.startingRect\n            .scrollLeft as number;\n        }\n        this.zone.run(() => {\n          this.resizeStart.emit({\n            edges: getEdgesDiff({\n              edges,\n              initialRectangle: startingRect,\n              newRectangle: startingRect\n            }),\n            rectangle: getNewBoundingRectangle(startingRect, {}, 0, 0)\n          });\n        });\n      });\n\n    this.mouseup.subscribe(() => {\n      if (currentResize) {\n        this.renderer.removeClass(this.elm.nativeElement, RESIZE_ACTIVE_CLASS);\n        this.renderer.setStyle(document.body, 'cursor', '');\n        this.renderer.setStyle(this.elm.nativeElement, 'cursor', '');\n        this.zone.run(() => {\n          this.resizeEnd.emit({\n            edges: getEdgesDiff({\n              edges: currentResize!.edges,\n              initialRectangle: currentResize!.startingRect,\n              newRectangle: currentResize!.currentRect\n            }),\n            rectangle: currentResize!.currentRect\n          });\n        });\n        removeGhostElement();\n        currentResize = null;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    this.mousedown.complete();\n    this.mouseup.complete();\n    this.mousemove.complete();\n    this.pointerEventListenerSubscriptions.pointerDown.unsubscribe();\n    this.pointerEventListenerSubscriptions.pointerMove.unsubscribe();\n    this.pointerEventListenerSubscriptions.pointerUp.unsubscribe();\n  }\n\n  private setElementClass(elm: ElementRef, name: string, add: boolean): void {\n    if (add) {\n      this.renderer.addClass(elm.nativeElement, name);\n    } else {\n      this.renderer.removeClass(elm.nativeElement, name);\n    }\n  }\n}\n\nclass PointerEventListeners {\n  public pointerDown: Observable;\n\n  public pointerMove: Observable;\n\n  public pointerUp: Observable;\n\n  private static instance: PointerEventListeners; // tslint:disable-line\n\n  public static getInstance(\n    renderer: Renderer2,\n    zone: NgZone\n  ): PointerEventListeners {\n    if (!PointerEventListeners.instance) {\n      PointerEventListeners.instance = new PointerEventListeners(\n        renderer,\n        zone\n      );\n    }\n    return PointerEventListeners.instance;\n  }\n\n  constructor(renderer: Renderer2, zone: NgZone) {\n    this.pointerDown = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseDown: () => void;\n        let unsubscribeTouchStart: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseDown = renderer.listen(\n            'document',\n            'mousedown',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchStart = renderer.listen(\n            'document',\n            'touchstart',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.touches[0].clientX,\n                clientY: event.touches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseDown();\n          unsubscribeTouchStart();\n        };\n      }\n    ).pipe(share());\n\n    this.pointerMove = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseMove: () => void;\n        let unsubscribeTouchMove: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseMove = renderer.listen(\n            'document',\n            'mousemove',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchMove = renderer.listen(\n            'document',\n            'touchmove',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.targetTouches[0].clientX,\n                clientY: event.targetTouches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseMove();\n          unsubscribeTouchMove();\n        };\n      }\n    ).pipe(share());\n\n    this.pointerUp = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseUp: () => void;\n        let unsubscribeTouchEnd: () => void;\n        let unsubscribeTouchCancel: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseUp = renderer.listen(\n            'document',\n            'mouseup',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchEnd = renderer.listen(\n            'document',\n            'touchend',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.changedTouches[0].clientX,\n                clientY: event.changedTouches[0].clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchCancel = renderer.listen(\n            'document',\n            'touchcancel',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.changedTouches[0].clientX,\n                clientY: event.changedTouches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseUp();\n          unsubscribeTouchEnd();\n          unsubscribeTouchCancel();\n        };\n      }\n    ).pipe(share());\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PointerEventListeners.html":{"url":"classes/PointerEventListeners.html","title":"class - PointerEventListeners","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  PointerEventListeners\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resizable.directive.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                pointerDown\n                            \n                            \n                                    Public\n                                pointerMove\n                            \n                            \n                                    Public\n                                pointerUp\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getInstance\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(renderer: Renderer2, zone: NgZone)\n                    \n                \n                        \n                            \n                                Defined in src/resizable.directive.ts:801\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                    Renderer2\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        zone\n                                                  \n                                                        \n                                                                    NgZone\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            pointerDown\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        pointerDown:     Observable\n\n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/resizable.directive.ts:782\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            pointerMove\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        pointerMove:     Observable\n\n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/resizable.directive.ts:784\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            pointerUp\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        pointerUp:     Observable\n\n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in src/resizable.directive.ts:786\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            getInstance\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getInstance(renderer: Renderer2, zone: NgZone)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/resizable.directive.ts:790\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        renderer\n                                                        \n                                                                    Renderer2\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        zone\n                                                        \n                                                                    NgZone\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     PointerEventListeners\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  NgZone\n} from '@angular/core';\nimport { Subject, Observable, Observer, merge } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  filter,\n  pairwise,\n  take,\n  share,\n  auditTime\n} from 'rxjs/operators';\nimport { Edges } from './interfaces/edges.interface';\nimport { BoundingRectangle } from './interfaces/bounding-rectangle.interface';\nimport { ResizeEvent } from './interfaces/resize-event.interface';\n\ninterface PointerEventCoordinate {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\ninterface Coordinate {\n  x: number;\n  y: number;\n}\n\nfunction isNumberCloseTo(\n  value1: number,\n  value2: number,\n  precision: number = 3\n): boolean {\n  const diff: number = Math.abs(value1 - value2);\n  return diff  style[property])\n    .find(value => !!value);\n  if (transform && transform.includes('translate')) {\n    translateX = transform.replace(/.*translate\\((.*)px, (.*)px\\).*/, '$1');\n    translateY = transform.replace(/.*translate\\((.*)px, (.*)px\\).*/, '$2');\n  }\n\n  if (ghostElementPositioning === 'absolute') {\n    return {\n      height: element.nativeElement.offsetHeight,\n      width: element.nativeElement.offsetWidth,\n      top: element.nativeElement.offsetTop - translateY,\n      bottom:\n        element.nativeElement.offsetHeight +\n        element.nativeElement.offsetTop -\n        translateY,\n      left: element.nativeElement.offsetLeft - translateX,\n      right:\n        element.nativeElement.offsetWidth +\n        element.nativeElement.offsetLeft -\n        translateX\n    };\n  } else {\n    const boundingRect: BoundingRectangle = element.nativeElement.getBoundingClientRect();\n    return {\n      height: boundingRect.height,\n      width: boundingRect.width,\n      top: boundingRect.top - translateY,\n      bottom: boundingRect.bottom - translateY,\n      left: boundingRect.left - translateX,\n      right: boundingRect.right - translateX,\n      scrollTop: element.nativeElement.scrollTop,\n      scrollLeft: element.nativeElement.scrollLeft\n    };\n  }\n}\n\nfunction isWithinBoundingY({\n  clientY,\n  rect\n}: {\n  clientY: number;\n  rect: ClientRect;\n}): boolean {\n  return clientY >= rect.top && clientY = rect.left && clientX  {\n    edgesDiff[edge] = (newRectangle[edge] || 0) - (initialRectangle[edge] || 0);\n  });\n  return edgesDiff;\n}\n\nconst RESIZE_ACTIVE_CLASS: string = 'resize-active';\nconst RESIZE_LEFT_HOVER_CLASS: string = 'resize-left-hover';\nconst RESIZE_RIGHT_HOVER_CLASS: string = 'resize-right-hover';\nconst RESIZE_TOP_HOVER_CLASS: string = 'resize-top-hover';\nconst RESIZE_BOTTOM_HOVER_CLASS: string = 'resize-bottom-hover';\nconst RESIZE_GHOST_ELEMENT_CLASS: string = 'resize-ghost-element';\n\nexport const MOUSE_MOVE_THROTTLE_MS: number = 50;\n\n/**\n * Place this on an element to make it resizable. For example:\n *\n * ```html\n * \n * \n * ```\n */\n@Directive({\n  selector: '[mwlResizable]'\n})\nexport class ResizableDirective implements OnInit, OnDestroy {\n  /**\n   * A function that will be called before each resize event. Return `true` to allow the resize event to propagate or `false` to cancel it\n   */\n  @Input() validateResize: (resizeEvent: ResizeEvent) => boolean;\n\n  /**\n   * The edges that an element can be resized from. Pass an object like `{top: true, bottom: false}`. By default no edges can be resized.\n   */\n  @Input() resizeEdges: Edges = {};\n\n  /**\n   * Set to `true` to enable a temporary resizing effect of the element in between the `resizeStart` and `resizeEnd` events.\n   */\n  @Input() enableGhostResize: boolean = false;\n\n  /**\n   * A snap grid that resize events will be locked to.\n   *\n   * e.g. to only allow the element to be resized every 10px set it to `{left: 10, right: 10}`\n   */\n  @Input() resizeSnapGrid: Edges = {};\n\n  /**\n   * The mouse cursors that will be set on the resize edges\n   */\n  @Input() resizeCursors: ResizeCursors = DEFAULT_RESIZE_CURSORS;\n\n  /**\n   * Mouse over thickness to active cursor.\n   */\n  @Input() resizeCursorPrecision: number = 3;\n\n  /**\n   * Define the positioning of the ghost element (can be fixed or absolute)\n   */\n  @Input() ghostElementPositioning: 'fixed' | 'absolute' = 'fixed';\n\n  /**\n   * Allow elements to be resized to negative dimensions\n   */\n  @Input() allowNegativeResizes: boolean = false;\n\n  /**\n   * Called when the mouse is pressed and a resize event is about to begin. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeStart = new EventEmitter();\n\n  /**\n   * Called as the mouse is dragged after a resize event has begun. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizing = new EventEmitter();\n\n  /**\n   * Called after the mouse is released after a resize event. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  public mouseup = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousedown = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousemove = new Subject();\n\n  private pointerEventListeners: PointerEventListeners;\n\n  private pointerEventListenerSubscriptions: any = {};\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private renderer: Renderer2,\n    public elm: ElementRef,\n    private zone: NgZone\n  ) {\n    this.pointerEventListeners = PointerEventListeners.getInstance(\n      renderer,\n      zone\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    // TODO - use some fancy Observable.merge's for this\n    this.pointerEventListenerSubscriptions.pointerDown = this.pointerEventListeners.pointerDown.subscribe(\n      ({ clientX, clientY }) => {\n        this.mousedown.next({ clientX, clientY });\n      }\n    );\n\n    this.pointerEventListenerSubscriptions.pointerMove = this.pointerEventListeners.pointerMove.subscribe(\n      ({ clientX, clientY, event }) => {\n        this.mousemove.next({ clientX, clientY, event });\n      }\n    );\n\n    this.pointerEventListenerSubscriptions.pointerUp = this.pointerEventListeners.pointerUp.subscribe(\n      ({ clientX, clientY }) => {\n        this.mouseup.next({ clientX, clientY });\n      }\n    );\n\n    let currentResize: {\n      edges: Edges;\n      startingRect: BoundingRectangle;\n      currentRect: BoundingRectangle;\n      clonedNode?: HTMLElement;\n    } | null;\n\n    const removeGhostElement = () => {\n      if (currentResize && currentResize.clonedNode) {\n        this.elm.nativeElement.parentElement.removeChild(\n          currentResize.clonedNode\n        );\n        this.renderer.setStyle(this.elm.nativeElement, 'visibility', 'inherit');\n      }\n    };\n\n    const mouseMove: Observable = this.mousemove.pipe(share());\n\n    mouseMove.pipe(filter(() => !!currentResize)).subscribe(({ event }) => {\n      event.preventDefault();\n    });\n\n    mouseMove\n      .pipe(auditTime(MOUSE_MOVE_THROTTLE_MS))\n      .subscribe(({ clientX, clientY }) => {\n        const resizeEdges: Edges = getResizeEdges({\n          clientX,\n          clientY,\n          elm: this.elm,\n          allowedEdges: this.resizeEdges,\n          cursorPrecision: this.resizeCursorPrecision\n        });\n        const resizeCursors: ResizeCursors = Object.assign(\n          {},\n          DEFAULT_RESIZE_CURSORS,\n          this.resizeCursors\n        );\n        if (currentResize) {\n          const cursor: string = getResizeCursor(\n            currentResize.edges,\n            resizeCursors\n          );\n          this.renderer.setStyle(document.body, 'cursor', cursor);\n        } else {\n          const cursor: string = getResizeCursor(resizeEdges, resizeCursors);\n          this.renderer.setStyle(this.elm.nativeElement, 'cursor', cursor);\n        }\n        this.setElementClass(this.elm, RESIZE_ACTIVE_CLASS, !!currentResize);\n        this.setElementClass(\n          this.elm,\n          RESIZE_LEFT_HOVER_CLASS,\n          resizeEdges.left === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_RIGHT_HOVER_CLASS,\n          resizeEdges.right === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_TOP_HOVER_CLASS,\n          resizeEdges.top === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_BOTTOM_HOVER_CLASS,\n          resizeEdges.bottom === true\n        );\n      });\n\n    const mousedrag: Observable = this.mousedown\n      .pipe(\n        mergeMap(startCoords => {\n          function getDiff(moveCoords: { clientX: number; clientY: number }) {\n            return {\n              clientX: moveCoords.clientX - startCoords.clientX,\n              clientY: moveCoords.clientY - startCoords.clientY\n            };\n          }\n\n          const getSnapGrid = () => {\n            const snapGrid: Coordinate = { x: 1, y: 1 };\n\n            if (currentResize) {\n              if (this.resizeSnapGrid.left && currentResize.edges.left) {\n                snapGrid.x = +this.resizeSnapGrid.left;\n              } else if (\n                this.resizeSnapGrid.right &&\n                currentResize.edges.right\n              ) {\n                snapGrid.x = +this.resizeSnapGrid.right;\n              }\n\n              if (this.resizeSnapGrid.top && currentResize.edges.top) {\n                snapGrid.y = +this.resizeSnapGrid.top;\n              } else if (\n                this.resizeSnapGrid.bottom &&\n                currentResize.edges.bottom\n              ) {\n                snapGrid.y = +this.resizeSnapGrid.bottom;\n              }\n            }\n\n            return snapGrid;\n          };\n\n          function getGrid(\n            coords: { clientX: number; clientY: number },\n            snapGrid: Coordinate\n          ) {\n            return {\n              x: Math.ceil(coords.clientX / snapGrid.x),\n              y: Math.ceil(coords.clientY / snapGrid.y)\n            };\n          }\n\n          return merge(\n            mouseMove.pipe(take(1)).pipe(map(coords => [, coords])),\n            mouseMove.pipe(pairwise())\n          )\n            .pipe(\n              map(([previousCoords, newCoords]) => {\n                return [\n                  previousCoords ? getDiff(previousCoords) : previousCoords,\n                  getDiff(newCoords)\n                ];\n              })\n            )\n            .pipe(\n              filter(([previousCoords, newCoords]) => {\n                if (!previousCoords) {\n                  return true;\n                }\n\n                const snapGrid: Coordinate = getSnapGrid();\n                const previousGrid: Coordinate = getGrid(\n                  previousCoords,\n                  snapGrid\n                );\n                const newGrid: Coordinate = getGrid(newCoords, snapGrid);\n\n                return (\n                  previousGrid.x !== newGrid.x || previousGrid.y !== newGrid.y\n                );\n              })\n            )\n            .pipe(\n              map(([, newCoords]) => {\n                const snapGrid: Coordinate = getSnapGrid();\n                return {\n                  clientX:\n                    Math.round(newCoords.clientX / snapGrid.x) * snapGrid.x,\n                  clientY:\n                    Math.round(newCoords.clientY / snapGrid.y) * snapGrid.y\n                };\n              })\n            )\n            .pipe(takeUntil(merge(this.mouseup, this.mousedown)));\n        })\n      )\n      .pipe(filter(() => !!currentResize));\n\n    mousedrag\n      .pipe(\n        map(({ clientX, clientY }) => {\n          return getNewBoundingRectangle(\n            currentResize!.startingRect,\n            currentResize!.edges,\n            clientX,\n            clientY\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return (\n            this.allowNegativeResizes ||\n            !!(\n              newBoundingRect.height &&\n              newBoundingRect.width &&\n              newBoundingRect.height > 0 &&\n              newBoundingRect.width > 0\n            )\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return this.validateResize\n            ? this.validateResize({\n                rectangle: newBoundingRect,\n                edges: getEdgesDiff({\n                  edges: currentResize!.edges,\n                  initialRectangle: currentResize!.startingRect,\n                  newRectangle: newBoundingRect\n                })\n              })\n            : true;\n        })\n      )\n      .subscribe((newBoundingRect: BoundingRectangle) => {\n        if (currentResize && currentResize.clonedNode) {\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${newBoundingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${newBoundingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${newBoundingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${newBoundingRect.left}px`\n          );\n        }\n\n        this.zone.run(() => {\n          this.resizing.emit({\n            edges: getEdgesDiff({\n              edges: currentResize!.edges,\n              initialRectangle: currentResize!.startingRect,\n              newRectangle: newBoundingRect\n            }),\n            rectangle: newBoundingRect\n          });\n        });\n\n        currentResize!.currentRect = newBoundingRect;\n      });\n\n    this.mousedown\n      .pipe(\n        map(({ clientX, clientY, edges }) => {\n          return (\n            edges ||\n            getResizeEdges({\n              clientX,\n              clientY,\n              elm: this.elm,\n              allowedEdges: this.resizeEdges,\n              cursorPrecision: this.resizeCursorPrecision\n            })\n          );\n        })\n      )\n      .pipe(\n        filter((edges: Edges) => {\n          return Object.keys(edges).length > 0;\n        })\n      )\n      .subscribe((edges: Edges) => {\n        if (currentResize) {\n          removeGhostElement();\n        }\n        const startingRect: BoundingRectangle = getElementRect(\n          this.elm,\n          this.ghostElementPositioning\n        );\n        currentResize = {\n          edges,\n          startingRect,\n          currentRect: startingRect\n        };\n        if (this.enableGhostResize) {\n          currentResize.clonedNode = this.elm.nativeElement.cloneNode(true);\n          const resizeCursors: ResizeCursors = Object.assign(\n            {},\n            DEFAULT_RESIZE_CURSORS,\n            this.resizeCursors\n          );\n          this.elm.nativeElement.parentElement.appendChild(\n            currentResize.clonedNode\n          );\n          this.renderer.setStyle(\n            this.elm.nativeElement,\n            'visibility',\n            'hidden'\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'position',\n            this.ghostElementPositioning\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${currentResize.startingRect.left}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${currentResize.startingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${currentResize.startingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${currentResize.startingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'cursor',\n            getResizeCursor(currentResize.edges, resizeCursors)\n          );\n          this.renderer.addClass(\n            currentResize.clonedNode,\n            RESIZE_GHOST_ELEMENT_CLASS\n          );\n          currentResize.clonedNode!.scrollTop = currentResize.startingRect\n            .scrollTop as number;\n          currentResize.clonedNode!.scrollLeft = currentResize.startingRect\n            .scrollLeft as number;\n        }\n        this.zone.run(() => {\n          this.resizeStart.emit({\n            edges: getEdgesDiff({\n              edges,\n              initialRectangle: startingRect,\n              newRectangle: startingRect\n            }),\n            rectangle: getNewBoundingRectangle(startingRect, {}, 0, 0)\n          });\n        });\n      });\n\n    this.mouseup.subscribe(() => {\n      if (currentResize) {\n        this.renderer.removeClass(this.elm.nativeElement, RESIZE_ACTIVE_CLASS);\n        this.renderer.setStyle(document.body, 'cursor', '');\n        this.renderer.setStyle(this.elm.nativeElement, 'cursor', '');\n        this.zone.run(() => {\n          this.resizeEnd.emit({\n            edges: getEdgesDiff({\n              edges: currentResize!.edges,\n              initialRectangle: currentResize!.startingRect,\n              newRectangle: currentResize!.currentRect\n            }),\n            rectangle: currentResize!.currentRect\n          });\n        });\n        removeGhostElement();\n        currentResize = null;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    this.mousedown.complete();\n    this.mouseup.complete();\n    this.mousemove.complete();\n    this.pointerEventListenerSubscriptions.pointerDown.unsubscribe();\n    this.pointerEventListenerSubscriptions.pointerMove.unsubscribe();\n    this.pointerEventListenerSubscriptions.pointerUp.unsubscribe();\n  }\n\n  private setElementClass(elm: ElementRef, name: string, add: boolean): void {\n    if (add) {\n      this.renderer.addClass(elm.nativeElement, name);\n    } else {\n      this.renderer.removeClass(elm.nativeElement, name);\n    }\n  }\n}\n\nclass PointerEventListeners {\n  public pointerDown: Observable;\n\n  public pointerMove: Observable;\n\n  public pointerUp: Observable;\n\n  private static instance: PointerEventListeners; // tslint:disable-line\n\n  public static getInstance(\n    renderer: Renderer2,\n    zone: NgZone\n  ): PointerEventListeners {\n    if (!PointerEventListeners.instance) {\n      PointerEventListeners.instance = new PointerEventListeners(\n        renderer,\n        zone\n      );\n    }\n    return PointerEventListeners.instance;\n  }\n\n  constructor(renderer: Renderer2, zone: NgZone) {\n    this.pointerDown = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseDown: () => void;\n        let unsubscribeTouchStart: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseDown = renderer.listen(\n            'document',\n            'mousedown',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchStart = renderer.listen(\n            'document',\n            'touchstart',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.touches[0].clientX,\n                clientY: event.touches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseDown();\n          unsubscribeTouchStart();\n        };\n      }\n    ).pipe(share());\n\n    this.pointerMove = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseMove: () => void;\n        let unsubscribeTouchMove: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseMove = renderer.listen(\n            'document',\n            'mousemove',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchMove = renderer.listen(\n            'document',\n            'touchmove',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.targetTouches[0].clientX,\n                clientY: event.targetTouches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseMove();\n          unsubscribeTouchMove();\n        };\n      }\n    ).pipe(share());\n\n    this.pointerUp = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseUp: () => void;\n        let unsubscribeTouchEnd: () => void;\n        let unsubscribeTouchCancel: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseUp = renderer.listen(\n            'document',\n            'mouseup',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchEnd = renderer.listen(\n            'document',\n            'touchend',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.changedTouches[0].clientX,\n                clientY: event.changedTouches[0].clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchCancel = renderer.listen(\n            'document',\n            'touchcancel',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.changedTouches[0].clientX,\n                clientY: event.changedTouches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseUp();\n          unsubscribeTouchEnd();\n          unsubscribeTouchCancel();\n        };\n      }\n    ).pipe(share());\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/ResizableDirective.html":{"url":"directives/ResizableDirective.html","title":"directive - ResizableDirective","body":"\n                   \n\n\n\n\n\n\n  Directives\n  ResizableDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resizable.directive.ts\n        \n\n            \n                Description\n            \n            \n                Place this on an element to make it resizable. For example:\n\n\n            \n\n            \n                Implements\n            \n            \n                        OnInit\n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        selector\n                        [mwlResizable]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                allowNegativeResizes\n                            \n                            \n                                enableGhostResize\n                            \n                            \n                                ghostElementPositioning\n                            \n                            \n                                resizeCursorPrecision\n                            \n                            \n                                resizeCursors\n                            \n                            \n                                resizeEdges\n                            \n                            \n                                resizeSnapGrid\n                            \n                            \n                                validateResize\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                resizeEnd\n                            \n                            \n                                resizeStart\n                            \n                            \n                                resizing\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        allowNegativeResizes\n                    \n                    \n                        Allow elements to be resized to negative dimensions\n\n                            \n                            Type:    boolean\n\n                            \n                        \n                            Default value: false\n                        \n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:316\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        enableGhostResize\n                    \n                    \n                        Set to true to enable a temporary resizing effect of the element in between the resizeStart and resizeEnd events.\n\n                            \n                            Type:    boolean\n\n                            \n                        \n                            Default value: false\n                        \n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:289\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ghostElementPositioning\n                    \n                    \n                        Define the positioning of the ghost element (can be fixed or absolute)\n\n                            \n                            Type:    \"fixed\" | \"absolute\"\n\n                            \n                        \n                            Default value: 'fixed'\n                        \n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:311\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        resizeCursorPrecision\n                    \n                    \n                        Mouse over thickness to active cursor.\n\n                            \n                            Type:    number\n\n                            \n                        \n                            Default value: 3\n                        \n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:306\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        resizeCursors\n                    \n                    \n                        The mouse cursors that will be set on the resize edges\n\n                            \n                            Type:    ResizeCursors\n\n                            \n                        \n                            Default value: DEFAULT_RESIZE_CURSORS\n                        \n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:301\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        resizeEdges\n                    \n                    \n                        The edges that an element can be resized from. Pass an object like {top: true, bottom: false}. By default no edges can be resized.\n\n                            \n                            Type:    Edges\n\n                            \n                        \n                            Default value: {}\n                        \n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:284\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        resizeSnapGrid\n                    \n                    \n                        A snap grid that resize events will be locked to.\ne.g. to only allow the element to be resized every 10px set it to {left: 10, right: 10}\n\n                            \n                            Type:    Edges\n\n                            \n                        \n                            Default value: {}\n                        \n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:296\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        validateResize\n                    \n                    \n                        A function that will be called before each resize event. Return true to allow the resize event to propagate or false to cancel it\n\n                            \n                            Type:    function\n\n                            \n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:279\n                            \n                        \n            \n        \n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        resizeEnd\n                    \n                    \n                        Called after the mouse is released after a resize event. $event is a ResizeEvent object.\n\n                        $event type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:331\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        resizeStart\n                    \n                    \n                        Called when the mouse is pressed and a resize event is about to begin. $event is a ResizeEvent object.\n\n                        $event type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:321\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        resizing\n                    \n                    \n                        Called as the mouse is dragged after a resize event has begun. $event is a ResizeEvent object.\n\n                        $event type:    EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/resizable.directive.ts:326\n                            \n                        \n            \n        \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  NgZone\n} from '@angular/core';\nimport { Subject, Observable, Observer, merge } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  filter,\n  pairwise,\n  take,\n  share,\n  auditTime\n} from 'rxjs/operators';\nimport { Edges } from './interfaces/edges.interface';\nimport { BoundingRectangle } from './interfaces/bounding-rectangle.interface';\nimport { ResizeEvent } from './interfaces/resize-event.interface';\n\ninterface PointerEventCoordinate {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\ninterface Coordinate {\n  x: number;\n  y: number;\n}\n\nfunction isNumberCloseTo(\n  value1: number,\n  value2: number,\n  precision: number = 3\n): boolean {\n  const diff: number = Math.abs(value1 - value2);\n  return diff  style[property])\n    .find(value => !!value);\n  if (transform && transform.includes('translate')) {\n    translateX = transform.replace(/.*translate\\((.*)px, (.*)px\\).*/, '$1');\n    translateY = transform.replace(/.*translate\\((.*)px, (.*)px\\).*/, '$2');\n  }\n\n  if (ghostElementPositioning === 'absolute') {\n    return {\n      height: element.nativeElement.offsetHeight,\n      width: element.nativeElement.offsetWidth,\n      top: element.nativeElement.offsetTop - translateY,\n      bottom:\n        element.nativeElement.offsetHeight +\n        element.nativeElement.offsetTop -\n        translateY,\n      left: element.nativeElement.offsetLeft - translateX,\n      right:\n        element.nativeElement.offsetWidth +\n        element.nativeElement.offsetLeft -\n        translateX\n    };\n  } else {\n    const boundingRect: BoundingRectangle = element.nativeElement.getBoundingClientRect();\n    return {\n      height: boundingRect.height,\n      width: boundingRect.width,\n      top: boundingRect.top - translateY,\n      bottom: boundingRect.bottom - translateY,\n      left: boundingRect.left - translateX,\n      right: boundingRect.right - translateX,\n      scrollTop: element.nativeElement.scrollTop,\n      scrollLeft: element.nativeElement.scrollLeft\n    };\n  }\n}\n\nfunction isWithinBoundingY({\n  clientY,\n  rect\n}: {\n  clientY: number;\n  rect: ClientRect;\n}): boolean {\n  return clientY >= rect.top && clientY = rect.left && clientX  {\n    edgesDiff[edge] = (newRectangle[edge] || 0) - (initialRectangle[edge] || 0);\n  });\n  return edgesDiff;\n}\n\nconst RESIZE_ACTIVE_CLASS: string = 'resize-active';\nconst RESIZE_LEFT_HOVER_CLASS: string = 'resize-left-hover';\nconst RESIZE_RIGHT_HOVER_CLASS: string = 'resize-right-hover';\nconst RESIZE_TOP_HOVER_CLASS: string = 'resize-top-hover';\nconst RESIZE_BOTTOM_HOVER_CLASS: string = 'resize-bottom-hover';\nconst RESIZE_GHOST_ELEMENT_CLASS: string = 'resize-ghost-element';\n\nexport const MOUSE_MOVE_THROTTLE_MS: number = 50;\n\n/**\n * Place this on an element to make it resizable. For example:\n *\n * ```html\n * \n * \n * ```\n */\n@Directive({\n  selector: '[mwlResizable]'\n})\nexport class ResizableDirective implements OnInit, OnDestroy {\n  /**\n   * A function that will be called before each resize event. Return `true` to allow the resize event to propagate or `false` to cancel it\n   */\n  @Input() validateResize: (resizeEvent: ResizeEvent) => boolean;\n\n  /**\n   * The edges that an element can be resized from. Pass an object like `{top: true, bottom: false}`. By default no edges can be resized.\n   */\n  @Input() resizeEdges: Edges = {};\n\n  /**\n   * Set to `true` to enable a temporary resizing effect of the element in between the `resizeStart` and `resizeEnd` events.\n   */\n  @Input() enableGhostResize: boolean = false;\n\n  /**\n   * A snap grid that resize events will be locked to.\n   *\n   * e.g. to only allow the element to be resized every 10px set it to `{left: 10, right: 10}`\n   */\n  @Input() resizeSnapGrid: Edges = {};\n\n  /**\n   * The mouse cursors that will be set on the resize edges\n   */\n  @Input() resizeCursors: ResizeCursors = DEFAULT_RESIZE_CURSORS;\n\n  /**\n   * Mouse over thickness to active cursor.\n   */\n  @Input() resizeCursorPrecision: number = 3;\n\n  /**\n   * Define the positioning of the ghost element (can be fixed or absolute)\n   */\n  @Input() ghostElementPositioning: 'fixed' | 'absolute' = 'fixed';\n\n  /**\n   * Allow elements to be resized to negative dimensions\n   */\n  @Input() allowNegativeResizes: boolean = false;\n\n  /**\n   * Called when the mouse is pressed and a resize event is about to begin. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeStart = new EventEmitter();\n\n  /**\n   * Called as the mouse is dragged after a resize event has begun. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizing = new EventEmitter();\n\n  /**\n   * Called after the mouse is released after a resize event. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  public mouseup = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousedown = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousemove = new Subject();\n\n  private pointerEventListeners: PointerEventListeners;\n\n  private pointerEventListenerSubscriptions: any = {};\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private renderer: Renderer2,\n    public elm: ElementRef,\n    private zone: NgZone\n  ) {\n    this.pointerEventListeners = PointerEventListeners.getInstance(\n      renderer,\n      zone\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    // TODO - use some fancy Observable.merge's for this\n    this.pointerEventListenerSubscriptions.pointerDown = this.pointerEventListeners.pointerDown.subscribe(\n      ({ clientX, clientY }) => {\n        this.mousedown.next({ clientX, clientY });\n      }\n    );\n\n    this.pointerEventListenerSubscriptions.pointerMove = this.pointerEventListeners.pointerMove.subscribe(\n      ({ clientX, clientY, event }) => {\n        this.mousemove.next({ clientX, clientY, event });\n      }\n    );\n\n    this.pointerEventListenerSubscriptions.pointerUp = this.pointerEventListeners.pointerUp.subscribe(\n      ({ clientX, clientY }) => {\n        this.mouseup.next({ clientX, clientY });\n      }\n    );\n\n    let currentResize: {\n      edges: Edges;\n      startingRect: BoundingRectangle;\n      currentRect: BoundingRectangle;\n      clonedNode?: HTMLElement;\n    } | null;\n\n    const removeGhostElement = () => {\n      if (currentResize && currentResize.clonedNode) {\n        this.elm.nativeElement.parentElement.removeChild(\n          currentResize.clonedNode\n        );\n        this.renderer.setStyle(this.elm.nativeElement, 'visibility', 'inherit');\n      }\n    };\n\n    const mouseMove: Observable = this.mousemove.pipe(share());\n\n    mouseMove.pipe(filter(() => !!currentResize)).subscribe(({ event }) => {\n      event.preventDefault();\n    });\n\n    mouseMove\n      .pipe(auditTime(MOUSE_MOVE_THROTTLE_MS))\n      .subscribe(({ clientX, clientY }) => {\n        const resizeEdges: Edges = getResizeEdges({\n          clientX,\n          clientY,\n          elm: this.elm,\n          allowedEdges: this.resizeEdges,\n          cursorPrecision: this.resizeCursorPrecision\n        });\n        const resizeCursors: ResizeCursors = Object.assign(\n          {},\n          DEFAULT_RESIZE_CURSORS,\n          this.resizeCursors\n        );\n        if (currentResize) {\n          const cursor: string = getResizeCursor(\n            currentResize.edges,\n            resizeCursors\n          );\n          this.renderer.setStyle(document.body, 'cursor', cursor);\n        } else {\n          const cursor: string = getResizeCursor(resizeEdges, resizeCursors);\n          this.renderer.setStyle(this.elm.nativeElement, 'cursor', cursor);\n        }\n        this.setElementClass(this.elm, RESIZE_ACTIVE_CLASS, !!currentResize);\n        this.setElementClass(\n          this.elm,\n          RESIZE_LEFT_HOVER_CLASS,\n          resizeEdges.left === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_RIGHT_HOVER_CLASS,\n          resizeEdges.right === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_TOP_HOVER_CLASS,\n          resizeEdges.top === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_BOTTOM_HOVER_CLASS,\n          resizeEdges.bottom === true\n        );\n      });\n\n    const mousedrag: Observable = this.mousedown\n      .pipe(\n        mergeMap(startCoords => {\n          function getDiff(moveCoords: { clientX: number; clientY: number }) {\n            return {\n              clientX: moveCoords.clientX - startCoords.clientX,\n              clientY: moveCoords.clientY - startCoords.clientY\n            };\n          }\n\n          const getSnapGrid = () => {\n            const snapGrid: Coordinate = { x: 1, y: 1 };\n\n            if (currentResize) {\n              if (this.resizeSnapGrid.left && currentResize.edges.left) {\n                snapGrid.x = +this.resizeSnapGrid.left;\n              } else if (\n                this.resizeSnapGrid.right &&\n                currentResize.edges.right\n              ) {\n                snapGrid.x = +this.resizeSnapGrid.right;\n              }\n\n              if (this.resizeSnapGrid.top && currentResize.edges.top) {\n                snapGrid.y = +this.resizeSnapGrid.top;\n              } else if (\n                this.resizeSnapGrid.bottom &&\n                currentResize.edges.bottom\n              ) {\n                snapGrid.y = +this.resizeSnapGrid.bottom;\n              }\n            }\n\n            return snapGrid;\n          };\n\n          function getGrid(\n            coords: { clientX: number; clientY: number },\n            snapGrid: Coordinate\n          ) {\n            return {\n              x: Math.ceil(coords.clientX / snapGrid.x),\n              y: Math.ceil(coords.clientY / snapGrid.y)\n            };\n          }\n\n          return merge(\n            mouseMove.pipe(take(1)).pipe(map(coords => [, coords])),\n            mouseMove.pipe(pairwise())\n          )\n            .pipe(\n              map(([previousCoords, newCoords]) => {\n                return [\n                  previousCoords ? getDiff(previousCoords) : previousCoords,\n                  getDiff(newCoords)\n                ];\n              })\n            )\n            .pipe(\n              filter(([previousCoords, newCoords]) => {\n                if (!previousCoords) {\n                  return true;\n                }\n\n                const snapGrid: Coordinate = getSnapGrid();\n                const previousGrid: Coordinate = getGrid(\n                  previousCoords,\n                  snapGrid\n                );\n                const newGrid: Coordinate = getGrid(newCoords, snapGrid);\n\n                return (\n                  previousGrid.x !== newGrid.x || previousGrid.y !== newGrid.y\n                );\n              })\n            )\n            .pipe(\n              map(([, newCoords]) => {\n                const snapGrid: Coordinate = getSnapGrid();\n                return {\n                  clientX:\n                    Math.round(newCoords.clientX / snapGrid.x) * snapGrid.x,\n                  clientY:\n                    Math.round(newCoords.clientY / snapGrid.y) * snapGrid.y\n                };\n              })\n            )\n            .pipe(takeUntil(merge(this.mouseup, this.mousedown)));\n        })\n      )\n      .pipe(filter(() => !!currentResize));\n\n    mousedrag\n      .pipe(\n        map(({ clientX, clientY }) => {\n          return getNewBoundingRectangle(\n            currentResize!.startingRect,\n            currentResize!.edges,\n            clientX,\n            clientY\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return (\n            this.allowNegativeResizes ||\n            !!(\n              newBoundingRect.height &&\n              newBoundingRect.width &&\n              newBoundingRect.height > 0 &&\n              newBoundingRect.width > 0\n            )\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return this.validateResize\n            ? this.validateResize({\n                rectangle: newBoundingRect,\n                edges: getEdgesDiff({\n                  edges: currentResize!.edges,\n                  initialRectangle: currentResize!.startingRect,\n                  newRectangle: newBoundingRect\n                })\n              })\n            : true;\n        })\n      )\n      .subscribe((newBoundingRect: BoundingRectangle) => {\n        if (currentResize && currentResize.clonedNode) {\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${newBoundingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${newBoundingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${newBoundingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${newBoundingRect.left}px`\n          );\n        }\n\n        this.zone.run(() => {\n          this.resizing.emit({\n            edges: getEdgesDiff({\n              edges: currentResize!.edges,\n              initialRectangle: currentResize!.startingRect,\n              newRectangle: newBoundingRect\n            }),\n            rectangle: newBoundingRect\n          });\n        });\n\n        currentResize!.currentRect = newBoundingRect;\n      });\n\n    this.mousedown\n      .pipe(\n        map(({ clientX, clientY, edges }) => {\n          return (\n            edges ||\n            getResizeEdges({\n              clientX,\n              clientY,\n              elm: this.elm,\n              allowedEdges: this.resizeEdges,\n              cursorPrecision: this.resizeCursorPrecision\n            })\n          );\n        })\n      )\n      .pipe(\n        filter((edges: Edges) => {\n          return Object.keys(edges).length > 0;\n        })\n      )\n      .subscribe((edges: Edges) => {\n        if (currentResize) {\n          removeGhostElement();\n        }\n        const startingRect: BoundingRectangle = getElementRect(\n          this.elm,\n          this.ghostElementPositioning\n        );\n        currentResize = {\n          edges,\n          startingRect,\n          currentRect: startingRect\n        };\n        if (this.enableGhostResize) {\n          currentResize.clonedNode = this.elm.nativeElement.cloneNode(true);\n          const resizeCursors: ResizeCursors = Object.assign(\n            {},\n            DEFAULT_RESIZE_CURSORS,\n            this.resizeCursors\n          );\n          this.elm.nativeElement.parentElement.appendChild(\n            currentResize.clonedNode\n          );\n          this.renderer.setStyle(\n            this.elm.nativeElement,\n            'visibility',\n            'hidden'\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'position',\n            this.ghostElementPositioning\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${currentResize.startingRect.left}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${currentResize.startingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${currentResize.startingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${currentResize.startingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'cursor',\n            getResizeCursor(currentResize.edges, resizeCursors)\n          );\n          this.renderer.addClass(\n            currentResize.clonedNode,\n            RESIZE_GHOST_ELEMENT_CLASS\n          );\n          currentResize.clonedNode!.scrollTop = currentResize.startingRect\n            .scrollTop as number;\n          currentResize.clonedNode!.scrollLeft = currentResize.startingRect\n            .scrollLeft as number;\n        }\n        this.zone.run(() => {\n          this.resizeStart.emit({\n            edges: getEdgesDiff({\n              edges,\n              initialRectangle: startingRect,\n              newRectangle: startingRect\n            }),\n            rectangle: getNewBoundingRectangle(startingRect, {}, 0, 0)\n          });\n        });\n      });\n\n    this.mouseup.subscribe(() => {\n      if (currentResize) {\n        this.renderer.removeClass(this.elm.nativeElement, RESIZE_ACTIVE_CLASS);\n        this.renderer.setStyle(document.body, 'cursor', '');\n        this.renderer.setStyle(this.elm.nativeElement, 'cursor', '');\n        this.zone.run(() => {\n          this.resizeEnd.emit({\n            edges: getEdgesDiff({\n              edges: currentResize!.edges,\n              initialRectangle: currentResize!.startingRect,\n              newRectangle: currentResize!.currentRect\n            }),\n            rectangle: currentResize!.currentRect\n          });\n        });\n        removeGhostElement();\n        currentResize = null;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    this.mousedown.complete();\n    this.mouseup.complete();\n    this.mousemove.complete();\n    this.pointerEventListenerSubscriptions.pointerDown.unsubscribe();\n    this.pointerEventListenerSubscriptions.pointerMove.unsubscribe();\n    this.pointerEventListenerSubscriptions.pointerUp.unsubscribe();\n  }\n\n  private setElementClass(elm: ElementRef, name: string, add: boolean): void {\n    if (add) {\n      this.renderer.addClass(elm.nativeElement, name);\n    } else {\n      this.renderer.removeClass(elm.nativeElement, name);\n    }\n  }\n}\n\nclass PointerEventListeners {\n  public pointerDown: Observable;\n\n  public pointerMove: Observable;\n\n  public pointerUp: Observable;\n\n  private static instance: PointerEventListeners; // tslint:disable-line\n\n  public static getInstance(\n    renderer: Renderer2,\n    zone: NgZone\n  ): PointerEventListeners {\n    if (!PointerEventListeners.instance) {\n      PointerEventListeners.instance = new PointerEventListeners(\n        renderer,\n        zone\n      );\n    }\n    return PointerEventListeners.instance;\n  }\n\n  constructor(renderer: Renderer2, zone: NgZone) {\n    this.pointerDown = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseDown: () => void;\n        let unsubscribeTouchStart: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseDown = renderer.listen(\n            'document',\n            'mousedown',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchStart = renderer.listen(\n            'document',\n            'touchstart',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.touches[0].clientX,\n                clientY: event.touches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseDown();\n          unsubscribeTouchStart();\n        };\n      }\n    ).pipe(share());\n\n    this.pointerMove = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseMove: () => void;\n        let unsubscribeTouchMove: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseMove = renderer.listen(\n            'document',\n            'mousemove',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchMove = renderer.listen(\n            'document',\n            'touchmove',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.targetTouches[0].clientX,\n                clientY: event.targetTouches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseMove();\n          unsubscribeTouchMove();\n        };\n      }\n    ).pipe(share());\n\n    this.pointerUp = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseUp: () => void;\n        let unsubscribeTouchEnd: () => void;\n        let unsubscribeTouchCancel: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseUp = renderer.listen(\n            'document',\n            'mouseup',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchEnd = renderer.listen(\n            'document',\n            'touchend',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.changedTouches[0].clientX,\n                clientY: event.changedTouches[0].clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchCancel = renderer.listen(\n            'document',\n            'touchcancel',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.changedTouches[0].clientX,\n                clientY: event.changedTouches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseUp();\n          unsubscribeTouchEnd();\n          unsubscribeTouchCancel();\n        };\n      }\n    ).pipe(share());\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ResizableModule.html":{"url":"modules/ResizableModule.html","title":"module - ResizableModule","body":"\n                   \n\n\n\n\n  Modules\n  ResizableModule\n\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/resizable.module.ts\n        \n\n\n        \n\n        \n            \n                \n                    Declarations\n                    \n                            \n                                ResizableDirective\n                            \n                            \n                                ResizeHandleDirective\n                            \n                    \n                \n                \n                    Exports\n                    \n                            \n                                    ResizableDirective\n                            \n                            \n                                    ResizeHandleDirective\n                            \n                    \n                \n            \n        \n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { ResizableDirective } from './resizable.directive';\nimport { ResizeHandleDirective } from './resize-handle.directive';\n\n@NgModule({\n  declarations: [ResizableDirective, ResizeHandleDirective],\n  exports: [ResizableDirective, ResizeHandleDirective]\n})\nexport class ResizableModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResizeCursors.html":{"url":"interfaces/ResizeCursors.html","title":"interface - ResizeCursors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ResizeCursors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resizable.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        bottomLeft\n                                \n                                \n                                        bottomRight\n                                \n                                \n                                        leftOrRight\n                                \n                                \n                                        topLeft\n                                \n                                \n                                        topOrBottom\n                                \n                                \n                                        topRight\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bottomLeft\n                                    \n                                \n                                \n                                    \n                                        bottomLeft:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        bottomRight\n                                    \n                                \n                                \n                                    \n                                        bottomRight:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        leftOrRight\n                                    \n                                \n                                \n                                    \n                                        leftOrRight:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        topLeft\n                                    \n                                \n                                \n                                    \n                                        topLeft:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        topOrBottom\n                                    \n                                \n                                \n                                    \n                                        topOrBottom:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        topRight\n                                    \n                                \n                                \n                                    \n                                        topRight:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Directive,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  NgZone\n} from '@angular/core';\nimport { Subject, Observable, Observer, merge } from 'rxjs';\nimport {\n  map,\n  mergeMap,\n  takeUntil,\n  filter,\n  pairwise,\n  take,\n  share,\n  auditTime\n} from 'rxjs/operators';\nimport { Edges } from './interfaces/edges.interface';\nimport { BoundingRectangle } from './interfaces/bounding-rectangle.interface';\nimport { ResizeEvent } from './interfaces/resize-event.interface';\n\ninterface PointerEventCoordinate {\n  clientX: number;\n  clientY: number;\n  event: MouseEvent | TouchEvent;\n}\n\ninterface Coordinate {\n  x: number;\n  y: number;\n}\n\nfunction isNumberCloseTo(\n  value1: number,\n  value2: number,\n  precision: number = 3\n): boolean {\n  const diff: number = Math.abs(value1 - value2);\n  return diff  style[property])\n    .find(value => !!value);\n  if (transform && transform.includes('translate')) {\n    translateX = transform.replace(/.*translate\\((.*)px, (.*)px\\).*/, '$1');\n    translateY = transform.replace(/.*translate\\((.*)px, (.*)px\\).*/, '$2');\n  }\n\n  if (ghostElementPositioning === 'absolute') {\n    return {\n      height: element.nativeElement.offsetHeight,\n      width: element.nativeElement.offsetWidth,\n      top: element.nativeElement.offsetTop - translateY,\n      bottom:\n        element.nativeElement.offsetHeight +\n        element.nativeElement.offsetTop -\n        translateY,\n      left: element.nativeElement.offsetLeft - translateX,\n      right:\n        element.nativeElement.offsetWidth +\n        element.nativeElement.offsetLeft -\n        translateX\n    };\n  } else {\n    const boundingRect: BoundingRectangle = element.nativeElement.getBoundingClientRect();\n    return {\n      height: boundingRect.height,\n      width: boundingRect.width,\n      top: boundingRect.top - translateY,\n      bottom: boundingRect.bottom - translateY,\n      left: boundingRect.left - translateX,\n      right: boundingRect.right - translateX,\n      scrollTop: element.nativeElement.scrollTop,\n      scrollLeft: element.nativeElement.scrollLeft\n    };\n  }\n}\n\nfunction isWithinBoundingY({\n  clientY,\n  rect\n}: {\n  clientY: number;\n  rect: ClientRect;\n}): boolean {\n  return clientY >= rect.top && clientY = rect.left && clientX  {\n    edgesDiff[edge] = (newRectangle[edge] || 0) - (initialRectangle[edge] || 0);\n  });\n  return edgesDiff;\n}\n\nconst RESIZE_ACTIVE_CLASS: string = 'resize-active';\nconst RESIZE_LEFT_HOVER_CLASS: string = 'resize-left-hover';\nconst RESIZE_RIGHT_HOVER_CLASS: string = 'resize-right-hover';\nconst RESIZE_TOP_HOVER_CLASS: string = 'resize-top-hover';\nconst RESIZE_BOTTOM_HOVER_CLASS: string = 'resize-bottom-hover';\nconst RESIZE_GHOST_ELEMENT_CLASS: string = 'resize-ghost-element';\n\nexport const MOUSE_MOVE_THROTTLE_MS: number = 50;\n\n/**\n * Place this on an element to make it resizable. For example:\n *\n * ```html\n * \n * \n * ```\n */\n@Directive({\n  selector: '[mwlResizable]'\n})\nexport class ResizableDirective implements OnInit, OnDestroy {\n  /**\n   * A function that will be called before each resize event. Return `true` to allow the resize event to propagate or `false` to cancel it\n   */\n  @Input() validateResize: (resizeEvent: ResizeEvent) => boolean;\n\n  /**\n   * The edges that an element can be resized from. Pass an object like `{top: true, bottom: false}`. By default no edges can be resized.\n   */\n  @Input() resizeEdges: Edges = {};\n\n  /**\n   * Set to `true` to enable a temporary resizing effect of the element in between the `resizeStart` and `resizeEnd` events.\n   */\n  @Input() enableGhostResize: boolean = false;\n\n  /**\n   * A snap grid that resize events will be locked to.\n   *\n   * e.g. to only allow the element to be resized every 10px set it to `{left: 10, right: 10}`\n   */\n  @Input() resizeSnapGrid: Edges = {};\n\n  /**\n   * The mouse cursors that will be set on the resize edges\n   */\n  @Input() resizeCursors: ResizeCursors = DEFAULT_RESIZE_CURSORS;\n\n  /**\n   * Mouse over thickness to active cursor.\n   */\n  @Input() resizeCursorPrecision: number = 3;\n\n  /**\n   * Define the positioning of the ghost element (can be fixed or absolute)\n   */\n  @Input() ghostElementPositioning: 'fixed' | 'absolute' = 'fixed';\n\n  /**\n   * Allow elements to be resized to negative dimensions\n   */\n  @Input() allowNegativeResizes: boolean = false;\n\n  /**\n   * Called when the mouse is pressed and a resize event is about to begin. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeStart = new EventEmitter();\n\n  /**\n   * Called as the mouse is dragged after a resize event has begun. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizing = new EventEmitter();\n\n  /**\n   * Called after the mouse is released after a resize event. `$event` is a `ResizeEvent` object.\n   */\n  @Output() resizeEnd = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  public mouseup = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousedown = new Subject();\n\n  /**\n   * @hidden\n   */\n  public mousemove = new Subject();\n\n  private pointerEventListeners: PointerEventListeners;\n\n  private pointerEventListenerSubscriptions: any = {};\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private renderer: Renderer2,\n    public elm: ElementRef,\n    private zone: NgZone\n  ) {\n    this.pointerEventListeners = PointerEventListeners.getInstance(\n      renderer,\n      zone\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    // TODO - use some fancy Observable.merge's for this\n    this.pointerEventListenerSubscriptions.pointerDown = this.pointerEventListeners.pointerDown.subscribe(\n      ({ clientX, clientY }) => {\n        this.mousedown.next({ clientX, clientY });\n      }\n    );\n\n    this.pointerEventListenerSubscriptions.pointerMove = this.pointerEventListeners.pointerMove.subscribe(\n      ({ clientX, clientY, event }) => {\n        this.mousemove.next({ clientX, clientY, event });\n      }\n    );\n\n    this.pointerEventListenerSubscriptions.pointerUp = this.pointerEventListeners.pointerUp.subscribe(\n      ({ clientX, clientY }) => {\n        this.mouseup.next({ clientX, clientY });\n      }\n    );\n\n    let currentResize: {\n      edges: Edges;\n      startingRect: BoundingRectangle;\n      currentRect: BoundingRectangle;\n      clonedNode?: HTMLElement;\n    } | null;\n\n    const removeGhostElement = () => {\n      if (currentResize && currentResize.clonedNode) {\n        this.elm.nativeElement.parentElement.removeChild(\n          currentResize.clonedNode\n        );\n        this.renderer.setStyle(this.elm.nativeElement, 'visibility', 'inherit');\n      }\n    };\n\n    const mouseMove: Observable = this.mousemove.pipe(share());\n\n    mouseMove.pipe(filter(() => !!currentResize)).subscribe(({ event }) => {\n      event.preventDefault();\n    });\n\n    mouseMove\n      .pipe(auditTime(MOUSE_MOVE_THROTTLE_MS))\n      .subscribe(({ clientX, clientY }) => {\n        const resizeEdges: Edges = getResizeEdges({\n          clientX,\n          clientY,\n          elm: this.elm,\n          allowedEdges: this.resizeEdges,\n          cursorPrecision: this.resizeCursorPrecision\n        });\n        const resizeCursors: ResizeCursors = Object.assign(\n          {},\n          DEFAULT_RESIZE_CURSORS,\n          this.resizeCursors\n        );\n        if (currentResize) {\n          const cursor: string = getResizeCursor(\n            currentResize.edges,\n            resizeCursors\n          );\n          this.renderer.setStyle(document.body, 'cursor', cursor);\n        } else {\n          const cursor: string = getResizeCursor(resizeEdges, resizeCursors);\n          this.renderer.setStyle(this.elm.nativeElement, 'cursor', cursor);\n        }\n        this.setElementClass(this.elm, RESIZE_ACTIVE_CLASS, !!currentResize);\n        this.setElementClass(\n          this.elm,\n          RESIZE_LEFT_HOVER_CLASS,\n          resizeEdges.left === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_RIGHT_HOVER_CLASS,\n          resizeEdges.right === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_TOP_HOVER_CLASS,\n          resizeEdges.top === true\n        );\n        this.setElementClass(\n          this.elm,\n          RESIZE_BOTTOM_HOVER_CLASS,\n          resizeEdges.bottom === true\n        );\n      });\n\n    const mousedrag: Observable = this.mousedown\n      .pipe(\n        mergeMap(startCoords => {\n          function getDiff(moveCoords: { clientX: number; clientY: number }) {\n            return {\n              clientX: moveCoords.clientX - startCoords.clientX,\n              clientY: moveCoords.clientY - startCoords.clientY\n            };\n          }\n\n          const getSnapGrid = () => {\n            const snapGrid: Coordinate = { x: 1, y: 1 };\n\n            if (currentResize) {\n              if (this.resizeSnapGrid.left && currentResize.edges.left) {\n                snapGrid.x = +this.resizeSnapGrid.left;\n              } else if (\n                this.resizeSnapGrid.right &&\n                currentResize.edges.right\n              ) {\n                snapGrid.x = +this.resizeSnapGrid.right;\n              }\n\n              if (this.resizeSnapGrid.top && currentResize.edges.top) {\n                snapGrid.y = +this.resizeSnapGrid.top;\n              } else if (\n                this.resizeSnapGrid.bottom &&\n                currentResize.edges.bottom\n              ) {\n                snapGrid.y = +this.resizeSnapGrid.bottom;\n              }\n            }\n\n            return snapGrid;\n          };\n\n          function getGrid(\n            coords: { clientX: number; clientY: number },\n            snapGrid: Coordinate\n          ) {\n            return {\n              x: Math.ceil(coords.clientX / snapGrid.x),\n              y: Math.ceil(coords.clientY / snapGrid.y)\n            };\n          }\n\n          return merge(\n            mouseMove.pipe(take(1)).pipe(map(coords => [, coords])),\n            mouseMove.pipe(pairwise())\n          )\n            .pipe(\n              map(([previousCoords, newCoords]) => {\n                return [\n                  previousCoords ? getDiff(previousCoords) : previousCoords,\n                  getDiff(newCoords)\n                ];\n              })\n            )\n            .pipe(\n              filter(([previousCoords, newCoords]) => {\n                if (!previousCoords) {\n                  return true;\n                }\n\n                const snapGrid: Coordinate = getSnapGrid();\n                const previousGrid: Coordinate = getGrid(\n                  previousCoords,\n                  snapGrid\n                );\n                const newGrid: Coordinate = getGrid(newCoords, snapGrid);\n\n                return (\n                  previousGrid.x !== newGrid.x || previousGrid.y !== newGrid.y\n                );\n              })\n            )\n            .pipe(\n              map(([, newCoords]) => {\n                const snapGrid: Coordinate = getSnapGrid();\n                return {\n                  clientX:\n                    Math.round(newCoords.clientX / snapGrid.x) * snapGrid.x,\n                  clientY:\n                    Math.round(newCoords.clientY / snapGrid.y) * snapGrid.y\n                };\n              })\n            )\n            .pipe(takeUntil(merge(this.mouseup, this.mousedown)));\n        })\n      )\n      .pipe(filter(() => !!currentResize));\n\n    mousedrag\n      .pipe(\n        map(({ clientX, clientY }) => {\n          return getNewBoundingRectangle(\n            currentResize!.startingRect,\n            currentResize!.edges,\n            clientX,\n            clientY\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return (\n            this.allowNegativeResizes ||\n            !!(\n              newBoundingRect.height &&\n              newBoundingRect.width &&\n              newBoundingRect.height > 0 &&\n              newBoundingRect.width > 0\n            )\n          );\n        })\n      )\n      .pipe(\n        filter((newBoundingRect: BoundingRectangle) => {\n          return this.validateResize\n            ? this.validateResize({\n                rectangle: newBoundingRect,\n                edges: getEdgesDiff({\n                  edges: currentResize!.edges,\n                  initialRectangle: currentResize!.startingRect,\n                  newRectangle: newBoundingRect\n                })\n              })\n            : true;\n        })\n      )\n      .subscribe((newBoundingRect: BoundingRectangle) => {\n        if (currentResize && currentResize.clonedNode) {\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${newBoundingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${newBoundingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${newBoundingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${newBoundingRect.left}px`\n          );\n        }\n\n        this.zone.run(() => {\n          this.resizing.emit({\n            edges: getEdgesDiff({\n              edges: currentResize!.edges,\n              initialRectangle: currentResize!.startingRect,\n              newRectangle: newBoundingRect\n            }),\n            rectangle: newBoundingRect\n          });\n        });\n\n        currentResize!.currentRect = newBoundingRect;\n      });\n\n    this.mousedown\n      .pipe(\n        map(({ clientX, clientY, edges }) => {\n          return (\n            edges ||\n            getResizeEdges({\n              clientX,\n              clientY,\n              elm: this.elm,\n              allowedEdges: this.resizeEdges,\n              cursorPrecision: this.resizeCursorPrecision\n            })\n          );\n        })\n      )\n      .pipe(\n        filter((edges: Edges) => {\n          return Object.keys(edges).length > 0;\n        })\n      )\n      .subscribe((edges: Edges) => {\n        if (currentResize) {\n          removeGhostElement();\n        }\n        const startingRect: BoundingRectangle = getElementRect(\n          this.elm,\n          this.ghostElementPositioning\n        );\n        currentResize = {\n          edges,\n          startingRect,\n          currentRect: startingRect\n        };\n        if (this.enableGhostResize) {\n          currentResize.clonedNode = this.elm.nativeElement.cloneNode(true);\n          const resizeCursors: ResizeCursors = Object.assign(\n            {},\n            DEFAULT_RESIZE_CURSORS,\n            this.resizeCursors\n          );\n          this.elm.nativeElement.parentElement.appendChild(\n            currentResize.clonedNode\n          );\n          this.renderer.setStyle(\n            this.elm.nativeElement,\n            'visibility',\n            'hidden'\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'position',\n            this.ghostElementPositioning\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'left',\n            `${currentResize.startingRect.left}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'top',\n            `${currentResize.startingRect.top}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'height',\n            `${currentResize.startingRect.height}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'width',\n            `${currentResize.startingRect.width}px`\n          );\n          this.renderer.setStyle(\n            currentResize.clonedNode,\n            'cursor',\n            getResizeCursor(currentResize.edges, resizeCursors)\n          );\n          this.renderer.addClass(\n            currentResize.clonedNode,\n            RESIZE_GHOST_ELEMENT_CLASS\n          );\n          currentResize.clonedNode!.scrollTop = currentResize.startingRect\n            .scrollTop as number;\n          currentResize.clonedNode!.scrollLeft = currentResize.startingRect\n            .scrollLeft as number;\n        }\n        this.zone.run(() => {\n          this.resizeStart.emit({\n            edges: getEdgesDiff({\n              edges,\n              initialRectangle: startingRect,\n              newRectangle: startingRect\n            }),\n            rectangle: getNewBoundingRectangle(startingRect, {}, 0, 0)\n          });\n        });\n      });\n\n    this.mouseup.subscribe(() => {\n      if (currentResize) {\n        this.renderer.removeClass(this.elm.nativeElement, RESIZE_ACTIVE_CLASS);\n        this.renderer.setStyle(document.body, 'cursor', '');\n        this.renderer.setStyle(this.elm.nativeElement, 'cursor', '');\n        this.zone.run(() => {\n          this.resizeEnd.emit({\n            edges: getEdgesDiff({\n              edges: currentResize!.edges,\n              initialRectangle: currentResize!.startingRect,\n              newRectangle: currentResize!.currentRect\n            }),\n            rectangle: currentResize!.currentRect\n          });\n        });\n        removeGhostElement();\n        currentResize = null;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    this.mousedown.complete();\n    this.mouseup.complete();\n    this.mousemove.complete();\n    this.pointerEventListenerSubscriptions.pointerDown.unsubscribe();\n    this.pointerEventListenerSubscriptions.pointerMove.unsubscribe();\n    this.pointerEventListenerSubscriptions.pointerUp.unsubscribe();\n  }\n\n  private setElementClass(elm: ElementRef, name: string, add: boolean): void {\n    if (add) {\n      this.renderer.addClass(elm.nativeElement, name);\n    } else {\n      this.renderer.removeClass(elm.nativeElement, name);\n    }\n  }\n}\n\nclass PointerEventListeners {\n  public pointerDown: Observable;\n\n  public pointerMove: Observable;\n\n  public pointerUp: Observable;\n\n  private static instance: PointerEventListeners; // tslint:disable-line\n\n  public static getInstance(\n    renderer: Renderer2,\n    zone: NgZone\n  ): PointerEventListeners {\n    if (!PointerEventListeners.instance) {\n      PointerEventListeners.instance = new PointerEventListeners(\n        renderer,\n        zone\n      );\n    }\n    return PointerEventListeners.instance;\n  }\n\n  constructor(renderer: Renderer2, zone: NgZone) {\n    this.pointerDown = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseDown: () => void;\n        let unsubscribeTouchStart: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseDown = renderer.listen(\n            'document',\n            'mousedown',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchStart = renderer.listen(\n            'document',\n            'touchstart',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.touches[0].clientX,\n                clientY: event.touches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseDown();\n          unsubscribeTouchStart();\n        };\n      }\n    ).pipe(share());\n\n    this.pointerMove = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseMove: () => void;\n        let unsubscribeTouchMove: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseMove = renderer.listen(\n            'document',\n            'mousemove',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchMove = renderer.listen(\n            'document',\n            'touchmove',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.targetTouches[0].clientX,\n                clientY: event.targetTouches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseMove();\n          unsubscribeTouchMove();\n        };\n      }\n    ).pipe(share());\n\n    this.pointerUp = new Observable(\n      (observer: Observer) => {\n        let unsubscribeMouseUp: () => void;\n        let unsubscribeTouchEnd: () => void;\n        let unsubscribeTouchCancel: () => void;\n\n        zone.runOutsideAngular(() => {\n          unsubscribeMouseUp = renderer.listen(\n            'document',\n            'mouseup',\n            (event: MouseEvent) => {\n              observer.next({\n                clientX: event.clientX,\n                clientY: event.clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchEnd = renderer.listen(\n            'document',\n            'touchend',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.changedTouches[0].clientX,\n                clientY: event.changedTouches[0].clientY,\n                event\n              });\n            }\n          );\n\n          unsubscribeTouchCancel = renderer.listen(\n            'document',\n            'touchcancel',\n            (event: TouchEvent) => {\n              observer.next({\n                clientX: event.changedTouches[0].clientX,\n                clientY: event.changedTouches[0].clientY,\n                event\n              });\n            }\n          );\n        });\n\n        return () => {\n          unsubscribeMouseUp();\n          unsubscribeTouchEnd();\n          unsubscribeTouchCancel();\n        };\n      }\n    ).pipe(share());\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResizeEvent.html":{"url":"interfaces/ResizeEvent.html","title":"interface - ResizeEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ResizeEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interfaces/resize-event.interface.ts\n        \n\n            \n                Description\n            \n            \n                The $event object that is passed to the resize events\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        edges\n                                \n                                \n                                        rectangle\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        edges\n                                    \n                                \n                                \n                                    \n                                        edges:     Edges\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Edges\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rectangle\n                                    \n                                \n                                \n                                    \n                                        rectangle:     BoundingRectangle\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     BoundingRectangle\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BoundingRectangle } from './bounding-rectangle.interface';\nimport { Edges } from './edges.interface';\n\n/**\n * The `$event` object that is passed to the resize events\n */\nexport interface ResizeEvent {\n  rectangle: BoundingRectangle;\n  edges: Edges;\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/ResizeHandleDirective.html":{"url":"directives/ResizeHandleDirective.html","title":"directive - ResizeHandleDirective","body":"\n                   \n\n\n\n\n\n\n  Directives\n  ResizeHandleDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/resize-handle.directive.ts\n        \n\n            \n                Description\n            \n            \n                An element placed inside a mwlResizable directive to be used as a drag and resize handle\nFor example\n\n   \n\n            \n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        selector\n                        [mwlResizeHandle]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                resizeEdges\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                touchend\n                            \n                            \n                                touchstart\n                            \n                        \n                    \n                \n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(renderer: Renderer2, element: ElementRef, zone: NgZone, resizable: ResizableDirective)\n                    \n                \n                        \n                            \n                                Defined in src/resize-handle.directive.ts:37\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        renderer\n                                                  \n                                                        \n                                                                    Renderer2\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        element\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        zone\n                                                  \n                                                        \n                                                                    NgZone\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        resizable\n                                                  \n                                                        \n                                                                    ResizableDirective\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        resizeEdges\n                    \n                    \n                        The Edges object that contains the edges of the parent element that dragging the handle will trigger a resize on\n\n                            \n                            Type:    Edges\n\n                            \n                        \n                            Default value: {}\n                        \n                    \n                \n                        \n                            \n                                    Defined in src/resize-handle.directive.ts:31\n                            \n                        \n            \n        \n\n\n\n            \n    HostListeners        \n            \n                \n                    \n                        \n                        \n                            \n                            touchend\n                            \n                            \n                        \n                    \n                \n                    \n                        \n                            Arguments : '$event.changedTouches[0].clientX' '$event.changedTouches[0].clientY' \n                        \n                    \n                \n                    \ntouchend(clientX: number, clientY: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/resize-handle.directive.ts:112\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            touchstart\n                            \n                            \n                        \n                    \n                \n                    \n                        \n                            Arguments : '$event' '$event.touches[0].clientX' '$event.touches[0].clientY' \n                        \n                    \n                \n                    \ntouchstart(event: MouseEvent | TouchEvent, clientX: number, clientY: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/resize-handle.directive.ts:59\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n\n\n    \n        import {\n  Directive,\n  Input,\n  HostListener,\n  Renderer2,\n  ElementRef,\n  OnDestroy,\n  NgZone\n} from '@angular/core';\nimport { ResizableDirective } from './resizable.directive';\nimport { Edges } from './interfaces/edges.interface';\n\n/**\n * An element placed inside a `mwlResizable` directive to be used as a drag and resize handle\n *\n * For example\n *\n * ```html\n * \n *   \n * \n * ```\n */\n@Directive({\n  selector: '[mwlResizeHandle]'\n})\nexport class ResizeHandleDirective implements OnDestroy {\n  /**\n   * The `Edges` object that contains the edges of the parent element that dragging the handle will trigger a resize on\n   */\n  @Input() resizeEdges: Edges = {};\n\n  private eventListeners: {\n    touchmove?: () => void;\n    mousemove?: () => void;\n    [key: string]: (() => void) | undefined;\n  } = {};\n\n  constructor(\n    private renderer: Renderer2,\n    private element: ElementRef,\n    private zone: NgZone,\n    private resizable: ResizableDirective\n  ) {}\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n  }\n\n  /**\n   * @hidden\n   */\n  @HostListener('touchstart', [\n    '$event',\n    '$event.touches[0].clientX',\n    '$event.touches[0].clientY'\n  ])\n  @HostListener('mousedown', ['$event', '$event.clientX', '$event.clientY'])\n  onMousedown(\n    event: MouseEvent | TouchEvent,\n    clientX: number,\n    clientY: number\n  ): void {\n    event.preventDefault();\n    this.zone.runOutsideAngular(() => {\n      if (!this.eventListeners.touchmove) {\n        this.eventListeners.touchmove = this.renderer.listen(\n          this.element.nativeElement,\n          'touchmove',\n          (touchMoveEvent: TouchEvent) => {\n            this.onMousemove(\n              touchMoveEvent,\n              touchMoveEvent.targetTouches[0].clientX,\n              touchMoveEvent.targetTouches[0].clientY\n            );\n          }\n        );\n      }\n      if (!this.eventListeners.mousemove) {\n        this.eventListeners.mousemove = this.renderer.listen(\n          this.element.nativeElement,\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.onMousemove(\n              mouseMoveEvent,\n              mouseMoveEvent.clientX,\n              mouseMoveEvent.clientY\n            );\n          }\n        );\n      }\n      this.resizable.mousedown.next({\n        clientX,\n        clientY,\n        edges: this.resizeEdges\n      });\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  @HostListener('touchend', [\n    '$event.changedTouches[0].clientX',\n    '$event.changedTouches[0].clientY'\n  ])\n  @HostListener('touchcancel', [\n    '$event.changedTouches[0].clientX',\n    '$event.changedTouches[0].clientY'\n  ])\n  @HostListener('mouseup', ['$event.clientX', '$event.clientY'])\n  onMouseup(clientX: number, clientY: number): void {\n    this.zone.runOutsideAngular(() => {\n      this.unsubscribeEventListeners();\n      this.resizable.mouseup.next({\n        clientX,\n        clientY,\n        edges: this.resizeEdges\n      });\n    });\n  }\n\n  private onMousemove(\n    event: MouseEvent | TouchEvent,\n    clientX: number,\n    clientY: number\n  ): void {\n    this.resizable.mousemove.next({\n      clientX,\n      clientY,\n      edges: this.resizeEdges,\n      event\n    });\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListeners).forEach(type => {\n      (this as any).eventListeners[type]();\n      delete this.eventListeners[type];\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChange Log\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n\n3.2.1 (2018-08-03)\nBug Fixes\n\nensure all resizing events are always emitted (25d6fa3)\n\n\n3.2.0 (2018-07-23)\nFeatures\n\nallow negative resizing of elements (560bcb1)\n\n\n3.1.0 (2018-06-19)\nFeatures\n\nimprove default resize cursors (37fc88e)\n\n\n3.0.0 (2018-05-09)\nFeatures\n\nupgrade to angular 6 (c7e3de6)\n\nBREAKING CHANGES\n\nangular 6 and rxjs 6 or higher are now required to use this package\n\n\n2.0.0 (2017-12-26)\nFeatures\n\nexport directives with Directive suffix (0440bbd)\nupgrade to angular 5 (5d6a576)\nuse lettable rxjs operators (af7abf7)\nuse ng-packagr for bundling the package (c4519a1), closes #79 #80\n\nBREAKING CHANGES\n\nthe global observable prototype is now no longer modified by this package, you must\nimport rxjs operators yourself. Also rxjs 5.5 or higher is now required to use this library\nThe UMD entry point has changed from angular-resizable-element/dist/umd/angular-resizable-element.js to angular-resizable-element/bundles/angular-resizable-element.umd.js\n\nSystem.js users will need to update their configs\n\nangular 5 or higher is now required to use this package\nThe Resizable import is now ResizableDirective and ResizeHandle is now\nResizeHandleDirective\n\n\n1.2.5 (2017-12-26)\nBug Fixes\n\nresizeHandle: allow handles to be dynamically shown (34342aa), closes #68\nresize elements that have css transforms (f24a746), closes #72\nset the resize cursor globally when resizing (71d5a05), closes #70\n\n\n1.2.4 (2017-10-21)\nBug Fixes\n\nallow angular 5 peer dependency (25cfe50)\n\n\n1.2.3 (2017-09-28)\nBug Fixes\n\nAdd startingRect scroll position to cloned node. (#66) (a056154)\n\n\n1.2.2 (2017-08-28)\nBug Fixes\n\nensure mouse event handlers are triggers outside of the angular zone (23fc6e5), closes #65\n\n\n1.2.1 (2017-08-06)\nBug Fixes\n\ncursor: change the cursor back to default on IE11 (a0323e9), closes #62\n\n\n1.2.0 (2017-06-12)\nFeatures\n\nexport Edges and BoundingRectangle interfaces for use within applications (10051cd)\n\n\n1.1.2 (2017-06-10)\nBug Fixes\n\ndragHandle: fix drag handles on firefox (1d15bb4), closes #54\n\n\n1.1.1 (2017-05-21)\nBug Fixes\n\nset ghost element width and height on resize start (be5d727), closes #53\n\n\n1.1.0 (2017-05-12)\nFeatures\n\nadd a class to the ghost element (54be6b7)\n\n\n1.0.0 (2017-03-24)\nFeatures\n\nng4: upgrade to angular 4 (4c665d2)\n\nBREAKING CHANGES\n\nng4: angular 4.0 or higher is now required to use this library. The\nupgrade should be seamless\nfor most users.\n\n\n0.8.1 (2017-03-23)\nPerformance Improvements\n\nthrottle mousemove listener events (05f7f7e)\nuse shared mouse event listeners across all resizable instances (2a4b102)\n\n\n0.8.0 (2017-03-16)\nFeatures\n\nghostElementPositioning: allow ghost element positioning to be configured (b77c9fc)\nexpose Resizable and ResizeHandle directives (3633040)\n\n\n0.7.2 (2017-03-04)\nBug Fixes\n\nrelax peer dependency warning to allow angular 4 (8232e66)\n\nPerformance Improvements\n\nrun all rezize events outside the angular zone (820612e)\nresizable: only register mouse move events when a rezize is active (a74f9e2)\nresizeHandle: dynamically register mouse move event listener (4b20cde)\n\n\n0.7.0 (2017-02-28)\nFeatures\n\ncssClasses: Gives classes to main element depend on state (8e3f108)\ncursorPrecision: allow cursor precision value to be edited (3ce508d)\n\n\n0.6.1 (2017-02-11)\nBug Fixes\n\nuniversal: remove MouseEvent reference (520abce), closes #41\n\n\n0.6.0 (2017-02-04)\nFeatures\n\nresizeCursors: allow resize cursors to be customised (99d2f66), closes #40\n\n\n0.5.7 (2017-01-30)\nBug Fixes\n\nuse correct touch event properties (0ab7d40), closes #39\n\n\n0.5.6 (2017-01-25)\nBug Fixes\n\nelement should resize on touch events (aa169c7), closes #36\n\n\n0.5.5 (2017-01-11)\nBug Fixes\n\nadd width and height to cloned node (75ce122), closes #31\nkeep cursor while resizing (93a5c4e), closes #33\n\n\n0.5.4 (2016-12-11)\nBug Fixes\n\ncursor: reset the cursor instead of changing it to auto (514851f)\n\n\n0.5.3 (2016-11-19)\nBug Fixes\n\nunsubscribe all observables when the component is destroyed (d5ea756), closes #27\n\n\n0.5.2 (2016-11-05)\nBug Fixes\n\naot: aot compatibility (9236e02)\n\n\n0.5.1 (2016-11-03)\nBug Fixes\n\ndont change the cursor when resizing an element (697c52c), closes #24\n\n\n0.5.0 (2016-10-29)\nBug Fixes\n\nfix resizing via a drag handle (5f7f468)\nprevent text from being selected when resizing an element (5571069), closes #22\n\nFeatures\n\nrename the library from angular2-resizable to angular-resizable-element (927235e), closes #21\nrename the resize output to resizing (9597986), closes #20\n\nBREAKING CHANGES\n\nThe library has been renamed to angular-resizable-element.\n\nThe UMD entry point has changed to\nnode_modules/angular-resizable-element/dist/umd/angular-resizable-element.js\nBefore(resize)=\"onResize($event)\"\n\nAfter:\n(resizing)=\"onResizing($event)\"\n0.4.1 (2016-09-28)\nBug Fixes\n\ntypings: dont include reference to core-js (68dc84f)\n\n\n0.4.0 (2016-09-25)\nFeatures\n\nbuild: support offline template compilation (f3fe12a)\n\nBREAKING CHANGES\n\nbuild: For System.js users the path to the UMD files has changed:\n\nBefore:\nnode_modules/angular2-resizable/angular2-resizable.jsAfter:\nnode_modules/angular2-resizable/dist/umd/angular2-resizable.js\n0.3.3 (2016-09-13)\nBug Fixes\n\npeerDependencies: allow any versions of angular post RC5 (cbe088f)\n\n\n0.3.2 (2016-09-03)\nFeatures\n\nangular: support RC6 (d5b18cc)\n\n\n0.3.1 (2016-08-25)\nBug Fixes\n\nrxjs: use correct rxjs operator imports in dist (858b3f8), closes #16\n\n\n0.3.0 (2016-08-12)\nFeatures\n\nevents: rename all outputs to drop the on prefix (9c76aac)\ndirective selectors are now camel case instead of dash case (ffad2ca)\nupgrade to angular RC5 (9557c0a)\n\nBREAKING CHANGES\n\nmwl-resizable is now mwlResizable and mwl-resize-handle is now mwlResizeHandle\nAngular RC5 is now required\n\nThe Resizable and ResizeHandle directives are now no longer exported. Instead you must use the ResizableModule. See the readme or the demo app for an example of how to do this.\n\nevents: The onResizeStart output has been renamed to resizeStart\n\nThe onResize output has been renamed to resize\nThe onResizeEnd output has been renamed to resizeEnd\n\n0.2.1 (2016-07-15)\nBug Fixes\n\ndemo: fix broken demo (0a5bf11)\n\n\n0.2.0 (2016-07-15)\nBug Fixes\n\ncreate a clone of the ghost element instead of applying styling to the host (fa73345), closes #15\nonly resize when the cursor is within the bounding rectangle (dedc3bb)\n\nBREAKING CHANGES\n\nenableResizeStyling has been renamed to enableGhostResize\n\n\n0.1.0 (2016-06-26)\nBug Fixes\n\nmousedrag: cancel the previous mousedrag observable when starting a new drag (149c1a4), closes #9\nonResizeEnd: call with co-ordinates of last valid resize rather than where the mouse up event w (eb314fd)\nonResizeStart: ensure the starting rectangle is a POJO rather than a bounding rectangle (81fe0b4)\ncancel mousedrag event when either a mouseup or mousedown event fires (c76be59)\ndisable dragging effects on resizable elements on webkit browsers (59078e2)\nrenamed directive selector from mwl-resizeable to mwl-resizable (c60b3f5)\n\nFeatures\n\ndisableResize: support completely disabling resizing an element (9f9c54a), closes #13\nexpose the amount each edge was resized on resize events (d664038), closes #11\nenableResizeStyling: make temporary resizing of the element opt-in by default so users can con (4c59b05), closes #5\nresizeEdges: allow the resize edges to be customised (60c2e08), closes #8\nresizeHandles: add support for nesting resize handles inside the element (1af705a), closes #10\nresizeSnapGrid: allow resizing to fit to a snap grid (74424ba), closes #3\nvalidate: provide a way for resize events to be validated (4da938d), closes #12\n\nBREAKING CHANGES\n\nenableResizeStyling: the element will no longer have its styles changed by default when dragging and\nresizing. You can now re-enable it by setting [enableResizeStyling]=\"true\" on the element.\nthe $event.edges object values now contain numbers instead of booleans\n\nrename the directive from mwl-resizeable to mwl-resizable\n\n\nresizeEdges: by default the element is no longer resizable.\n\nYou must specify [resizeEdges]={top: true, bottom: true, left: true, right: true} to get the old behaviour back\n\n0.0.3 (2016-06-13)\nBug Fixes\n\nimport missing rxjs operators (300ac10)\n\n\n0.0.2 (2016-06-13)\nBug Fixes\n\ntypes: export Edges and BoundingRectangle types (fe49114)\ndont bundle rxjs with the library (7b1280e)\n\n\n0.0.1 (2016-06-13)\nBug Fixes\n\nallow the element to be resized multiple times (bf497d2)\ndrag: disable user dragging (053fb0e)\nreset element styles on mousedown if there was a previous uncancelled resize (a8e5cd3)\noutputs: make outputs sync to prevent ui flicker (032ea5a)\ntypescript: add missing types (e722a86)\n\nFeatures\n\nimprove transforms, add resize events (0959a12)\ninitial WIP resizable implementation (22af52f)\nshow the cursor when mousing over the edge of the element (f440c87)\nsupport resizing from corners (bac87e3), closes #4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Peer Dependencies\n    \n    \n        \n            @angular/core : >=6.0.0 \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            getEdgesDiff   (src/.../resizable.directive.ts)\n                        \n                        \n                            getElementRect   (src/.../resizable.directive.ts)\n                        \n                        \n                            getNewBoundingRectangle   (src/.../resizable.directive.ts)\n                        \n                        \n                            getResizeCursor   (src/.../resizable.directive.ts)\n                        \n                        \n                            getResizeEdges   (src/.../resizable.directive.ts)\n                        \n                        \n                            isNumberCloseTo   (src/.../resizable.directive.ts)\n                        \n                        \n                            isWithinBoundingX   (src/.../resizable.directive.ts)\n                        \n                        \n                            isWithinBoundingY   (src/.../resizable.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/resizable.directive.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            getEdgesDiff\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetEdgesDiff(undefined: undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getElementRect\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetElementRect(element: undefined, ghostElementPositioning: undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        element\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        ghostElementPositioning\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getNewBoundingRectangle\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetNewBoundingRectangle(startingRect: undefined, edges: undefined, clientX: undefined, clientY: undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        startingRect\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        edges\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        clientX\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        clientY\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getResizeCursor\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetResizeCursor(edges: undefined, cursors: undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        edges\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        cursors\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getResizeEdges\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetResizeEdges(undefined: undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isNumberCloseTo\n                            \n                            \n                        \n                    \n                \n                \n                    \nisNumberCloseTo(value1: undefined, value2: undefined, precision: undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value1\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        value2\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        precision\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isWithinBoundingX\n                            \n                            \n                        \n                    \n                \n                \n                    \nisWithinBoundingX(undefined: undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isWithinBoundingY\n                            \n                            \n                        \n                    \n                \n                \n                    \nisWithinBoundingY(undefined: undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nangular resizable element\n\n\n\n\n\n\n\nDemo\nhttps://mattlewis92.github.io/angular-resizable-element/demo/\nTable of contents\n\nAbout\nInstallation\nDocumentation\nDevelopment\nLicense\n\nAbout\nAn angular 6.0+ directive that allows an element to be dragged and resized\nInstallation\nInstall through npm:\nnpm install --save angular-resizable-elementThen use it in your app like so:\nimport { Component } from '@angular/core';\nimport { ResizeEvent } from 'angular-resizable-element';\n\n@Component({\n  selector: 'demo-app',\n  // you should add some more styles to the element. See the demo folder for a more fleshed out example\n  styles: [\n    `\n    mwlResizable {\n      box-sizing: border-box; // required for the enableGhostResize option to work\n    }\n  `\n  ],\n  template: `\n    \n    \n  `\n})\nexport class MyComponent {\n  onResizeEnd(event: ResizeEvent): void {\n    console.log('Element was resized', event);\n  }\n}\n\n// now use within your apps module\nimport { NgModule } from '@angular/core';\nimport { ResizableModule } from 'angular-resizable-element';\n\n@NgModule({\n  declarations: [MyComponent],\n  imports: [ResizableModule],\n  bootstrap: [MyComponent]\n})\nclass MyModule {}You may also find it useful to view the demo source.\nDocumentation\nAll documentation is auto-generated from the source and can be viewed here:\nhttps://mattlewis92.github.io/angular-resizable-element/docs/\nDevelopment\nPrepare your environment\n\nInstall Node.js and NPM (should come with)\nInstall local dev dependencies: npm install while current directory is this repo\n\nDevelopment server\nRun npm start to start a development server on port 8000 with auto reload + tests.\nTesting\nRun npm test to run tests once or npm run test:watch to continually run tests.\nRelease\nnpm run releaseLicense\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright (c) 2016 Matt Lewis\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ResizableModule\n                    \n                    \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n    \n            \n                \n                    \n                        \n                        \n                            1 module\n                        \n                    \n                \n            \n            \n                \n                    \n                        \n                        2 directives\n                    \n                \n            \n            \n                \n                    \n                        \n                        1 class\n                    \n                \n            \n            \n                \n                    \n                        \n                        6 interfaces\n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DEFAULT_RESIZE_CURSORS   (src/.../resizable.directive.ts)\n                        \n                        \n                            MOUSE_MOVE_THROTTLE_MS   (src/.../resizable.directive.ts)\n                        \n                        \n                            RESIZE_ACTIVE_CLASS   (src/.../resizable.directive.ts)\n                        \n                        \n                            RESIZE_BOTTOM_HOVER_CLASS   (src/.../resizable.directive.ts)\n                        \n                        \n                            RESIZE_GHOST_ELEMENT_CLASS   (src/.../resizable.directive.ts)\n                        \n                        \n                            RESIZE_LEFT_HOVER_CLASS   (src/.../resizable.directive.ts)\n                        \n                        \n                            RESIZE_RIGHT_HOVER_CLASS   (src/.../resizable.directive.ts)\n                        \n                        \n                            RESIZE_TOP_HOVER_CLASS   (src/.../resizable.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/resizable.directive.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_RESIZE_CURSORS\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        DEFAULT_RESIZE_CURSORS:     ResizeCursors\n\n                    \n                \n                    \n                        \n                            Type :     ResizeCursors\n\n                        \n                    \n                    \n                        \n                            Default value : Object.freeze({\n  topLeft: 'nw-resize',\n  topRight: 'ne-resize',\n  bottomLeft: 'sw-resize',\n  bottomRight: 'se-resize',\n  leftOrRight: 'col-resize',\n  topOrBottom: 'row-resize'\n})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MOUSE_MOVE_THROTTLE_MS\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        MOUSE_MOVE_THROTTLE_MS:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 50\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RESIZE_ACTIVE_CLASS\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        RESIZE_ACTIVE_CLASS:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'resize-active'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RESIZE_BOTTOM_HOVER_CLASS\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        RESIZE_BOTTOM_HOVER_CLASS:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'resize-bottom-hover'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RESIZE_GHOST_ELEMENT_CLASS\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        RESIZE_GHOST_ELEMENT_CLASS:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'resize-ghost-element'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RESIZE_LEFT_HOVER_CLASS\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        RESIZE_LEFT_HOVER_CLASS:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'resize-left-hover'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RESIZE_RIGHT_HOVER_CLASS\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        RESIZE_RIGHT_HOVER_CLASS:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'resize-right-hover'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            RESIZE_TOP_HOVER_CLASS\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        RESIZE_TOP_HOVER_CLASS:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : 'resize-top-hover'\n                        \n                    \n\n\n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
